{
  "version": 3,
  "sources": ["../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/platform-browser/src/dom/events/event_manager.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/platform-browser/src/dom/shared_styles_host.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/platform-browser/src/dom/dom_renderer.js", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/platform-browser/src/browser/browser_adapter.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/platform-browser/src/browser/testability.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/platform-browser/src/browser/xhr.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/platform-browser/src/dom/events/dom_events.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/platform-browser/src/dom/events/key_events.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/platform-browser/src/browser.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/platform-browser/src/browser/meta.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/platform-browser/src/browser/title.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/platform-browser/src/dom/util.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/platform-browser/src/browser/tools/common_tools.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/platform-browser/src/browser/tools/tools.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/platform-browser/src/dom/debug/by.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/platform-browser/src/dom/events/hammer_gestures.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/platform-browser/src/security/dom_sanitization_service.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/platform-browser/src/hydration.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/platform-browser/src/version.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  NgZone,\n  ɵRuntimeError as RuntimeError,\n  type ListenerOptions,\n} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../../errors';\n\n/**\n * The injection token for plugins of the `EventManager` service.\n *\n * @publicApi\n */\nexport const EVENT_MANAGER_PLUGINS = new InjectionToken<EventManagerPlugin[]>(\n  ngDevMode ? 'EventManagerPlugins' : '',\n);\n\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n *\n * @publicApi\n */\n@Injectable()\nexport class EventManager {\n  private _plugins: EventManagerPlugin[];\n  private _eventNameToPlugin = new Map<string, EventManagerPlugin>();\n\n  /**\n   * Initializes an instance of the event-manager service.\n   */\n  constructor(\n    @Inject(EVENT_MANAGER_PLUGINS) plugins: EventManagerPlugin[],\n    private _zone: NgZone,\n  ) {\n    plugins.forEach((plugin) => {\n      plugin.manager = this;\n    });\n    this._plugins = plugins.slice().reverse();\n  }\n\n  /**\n   * Registers a handler for a specific element and event.\n   *\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @param options Options that configure how the event listener is bound.\n   * @returns  A callback function that can be used to remove the handler.\n   */\n  addEventListener(\n    element: HTMLElement,\n    eventName: string,\n    handler: Function,\n    options?: ListenerOptions,\n  ): Function {\n    const plugin = this._findPluginFor(eventName);\n    return plugin.addEventListener(element, eventName, handler, options);\n  }\n\n  /**\n   * Retrieves the compilation zone in which event listeners are registered.\n   */\n  getZone(): NgZone {\n    return this._zone;\n  }\n\n  /** @internal */\n  _findPluginFor(eventName: string): EventManagerPlugin {\n    let plugin = this._eventNameToPlugin.get(eventName);\n    if (plugin) {\n      return plugin;\n    }\n\n    const plugins = this._plugins;\n    plugin = plugins.find((plugin) => plugin.supports(eventName));\n    if (!plugin) {\n      throw new RuntimeError(\n        RuntimeErrorCode.NO_PLUGIN_FOR_EVENT,\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n          `No event manager plugin found for event ${eventName}`,\n      );\n    }\n\n    this._eventNameToPlugin.set(eventName, plugin);\n    return plugin;\n  }\n}\n\n/**\n * The plugin definition for the `EventManager` class\n *\n * It can be used as a base class to create custom manager plugins, i.e. you can create your own\n * class that extends the `EventManagerPlugin` one.\n *\n * @publicApi\n */\nexport abstract class EventManagerPlugin {\n  // TODO: remove (has some usage in G3)\n  constructor(private _doc: any) {}\n\n  // Using non-null assertion because it's set by EventManager's constructor\n  manager!: EventManager;\n\n  /**\n   * Should return `true` for every event name that should be supported by this plugin\n   */\n  abstract supports(eventName: string): boolean;\n\n  /**\n   * Implement the behaviour for the supported events\n   */\n  abstract addEventListener(\n    element: HTMLElement,\n    eventName: string,\n    handler: Function,\n    options?: ListenerOptions,\n  ): Function;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT, isPlatformServer} from '@angular/common';\nimport {\n  APP_ID,\n  CSP_NONCE,\n  Inject,\n  Injectable,\n  OnDestroy,\n  Optional,\n  PLATFORM_ID,\n} from '@angular/core';\n\n/** The style elements attribute name used to set value of `APP_ID` token. */\nconst APP_ID_ATTRIBUTE_NAME = 'ng-app-id';\n\n/**\n * A record of usage for a specific style including all elements added to the DOM\n * that contain a given style.\n */\ninterface UsageRecord<T> {\n  elements: T[];\n  usage: number;\n}\n\n/**\n * Removes all provided elements from the document.\n * @param elements An array of HTML Elements.\n */\nfunction removeElements(elements: Iterable<HTMLElement>): void {\n  for (const element of elements) {\n    element.remove();\n  }\n}\n\n/**\n * Creates a `style` element with the provided inline style content.\n * @param style A string of the inline style content.\n * @param doc A DOM Document to use to create the element.\n * @returns An HTMLStyleElement instance.\n */\nfunction createStyleElement(style: string, doc: Document): HTMLStyleElement {\n  const styleElement = doc.createElement('style');\n  styleElement.textContent = style;\n\n  return styleElement;\n}\n\n/**\n * Searches a DOM document's head element for style elements with a matching application\n * identifier attribute (`ng-app-id`) to the provide identifier and adds usage records for each.\n * @param doc An HTML DOM document instance.\n * @param appId A string containing an Angular application identifer.\n * @param inline A Map object for tracking inline (defined via `styles` in component decorator) style usage.\n * @param external A Map object for tracking external (defined via `styleUrls` in component decorator) style usage.\n */\nfunction addServerStyles(\n  doc: Document,\n  appId: string,\n  inline: Map<string, UsageRecord<HTMLStyleElement>>,\n  external: Map<string, UsageRecord<HTMLLinkElement>>,\n): void {\n  const elements = doc.head?.querySelectorAll<HTMLStyleElement | HTMLLinkElement>(\n    `style[${APP_ID_ATTRIBUTE_NAME}=\"${appId}\"],link[${APP_ID_ATTRIBUTE_NAME}=\"${appId}\"]`,\n  );\n\n  if (elements) {\n    for (const styleElement of elements) {\n      styleElement.removeAttribute(APP_ID_ATTRIBUTE_NAME);\n      if (styleElement instanceof HTMLLinkElement) {\n        // Only use filename from href\n        // The href is build time generated with a unique value to prevent duplicates.\n        external.set(styleElement.href.slice(styleElement.href.lastIndexOf('/') + 1), {\n          usage: 0,\n          elements: [styleElement],\n        });\n      } else if (styleElement.textContent) {\n        inline.set(styleElement.textContent, {usage: 0, elements: [styleElement]});\n      }\n    }\n  }\n}\n\n/**\n * Creates a `link` element for the provided external style URL.\n * @param url A string of the URL for the stylesheet.\n * @param doc A DOM Document to use to create the element.\n * @returns An HTMLLinkElement instance.\n */\nexport function createLinkElement(url: string, doc: Document): HTMLLinkElement {\n  const linkElement = doc.createElement('link');\n  linkElement.setAttribute('rel', 'stylesheet');\n  linkElement.setAttribute('href', url);\n\n  return linkElement;\n}\n\n@Injectable()\nexport class SharedStylesHost implements OnDestroy {\n  /**\n   * Provides usage information for active inline style content and associated HTML <style> elements.\n   * Embedded styles typically originate from the `styles` metadata of a rendered component.\n   */\n  private readonly inline = new Map<string /** content */, UsageRecord<HTMLStyleElement>>();\n\n  /**\n   * Provides usage information for active external style URLs and the associated HTML <link> elements.\n   * External styles typically originate from the `ɵɵExternalStylesFeature` of a rendered component.\n   */\n  private readonly external = new Map<string /** URL */, UsageRecord<HTMLLinkElement>>();\n\n  /**\n   * Set of host DOM nodes that will have styles attached.\n   */\n  private readonly hosts = new Set<Node>();\n\n  /**\n   * Whether the application code is currently executing on a server.\n   */\n  private readonly isServer: boolean;\n\n  constructor(\n    @Inject(DOCUMENT) private readonly doc: Document,\n    @Inject(APP_ID) private readonly appId: string,\n    @Inject(CSP_NONCE) @Optional() private readonly nonce?: string | null,\n    @Inject(PLATFORM_ID) platformId: object = {},\n  ) {\n    this.isServer = isPlatformServer(platformId);\n    addServerStyles(doc, appId, this.inline, this.external);\n    this.hosts.add(doc.head);\n  }\n\n  /**\n   * Adds embedded styles to the DOM via HTML `style` elements.\n   * @param styles An array of style content strings.\n   */\n  addStyles(styles: string[], urls?: string[]): void {\n    for (const value of styles) {\n      this.addUsage(value, this.inline, createStyleElement);\n    }\n\n    urls?.forEach((value) => this.addUsage(value, this.external, createLinkElement));\n  }\n\n  /**\n   * Removes embedded styles from the DOM that were added as HTML `style` elements.\n   * @param styles An array of style content strings.\n   */\n  removeStyles(styles: string[], urls?: string[]): void {\n    for (const value of styles) {\n      this.removeUsage(value, this.inline);\n    }\n\n    urls?.forEach((value) => this.removeUsage(value, this.external));\n  }\n\n  protected addUsage<T extends HTMLElement>(\n    value: string,\n    usages: Map<string, UsageRecord<T>>,\n    creator: (value: string, doc: Document) => T,\n  ): void {\n    // Attempt to get any current usage of the value\n    const record = usages.get(value);\n\n    // If existing, just increment the usage count\n    if (record) {\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && record.usage === 0) {\n        // A usage count of zero indicates a preexisting server generated style.\n        // This attribute is solely used for debugging purposes of SSR style reuse.\n        record.elements.forEach((element) => element.setAttribute('ng-style-reused', ''));\n      }\n      record.usage++;\n    } else {\n      // Otherwise, create an entry to track the elements and add element for each host\n      usages.set(value, {\n        usage: 1,\n        elements: [...this.hosts].map((host) => this.addElement(host, creator(value, this.doc))),\n      });\n    }\n  }\n\n  protected removeUsage<T extends HTMLElement>(\n    value: string,\n    usages: Map<string, UsageRecord<T>>,\n  ): void {\n    // Attempt to get any current usage of the value\n    const record = usages.get(value);\n\n    // If there is a record, reduce the usage count and if no longer used,\n    // remove from DOM and delete usage record.\n    if (record) {\n      record.usage--;\n      if (record.usage <= 0) {\n        removeElements(record.elements);\n        usages.delete(value);\n      }\n    }\n  }\n\n  ngOnDestroy(): void {\n    for (const [, {elements}] of [...this.inline, ...this.external]) {\n      removeElements(elements);\n    }\n    this.hosts.clear();\n  }\n\n  /**\n   * Adds a host node to the set of style hosts and adds all existing style usage to\n   * the newly added host node.\n   *\n   * This is currently only used for Shadow DOM encapsulation mode.\n   */\n  addHost(hostNode: Node): void {\n    this.hosts.add(hostNode);\n\n    // Add existing styles to new host\n    for (const [style, {elements}] of this.inline) {\n      elements.push(this.addElement(hostNode, createStyleElement(style, this.doc)));\n    }\n    for (const [url, {elements}] of this.external) {\n      elements.push(this.addElement(hostNode, createLinkElement(url, this.doc)));\n    }\n  }\n\n  removeHost(hostNode: Node): void {\n    this.hosts.delete(hostNode);\n  }\n\n  private addElement<T extends HTMLElement>(host: Node, element: T): T {\n    // Add a nonce if present\n    if (this.nonce) {\n      element.setAttribute('nonce', this.nonce);\n    }\n\n    // Add application identifier when on the server to support client-side reuse\n    if (this.isServer) {\n      element.setAttribute(APP_ID_ATTRIBUTE_NAME, this.appId);\n    }\n\n    // Insert the element into the DOM with the host node as parent\n    return host.appendChild(element);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport { DOCUMENT, isPlatformServer, ɵgetDOM as getDOM } from '@angular/common';\nimport { APP_ID, CSP_NONCE, Inject, Injectable, InjectionToken, NgZone, PLATFORM_ID, RendererStyleFlags2, ViewEncapsulation, ɵRuntimeError as RuntimeError, ɵTracingService as TracingService, Optional, } from '@angular/core';\nimport { EventManager } from './events/event_manager';\nimport { createLinkElement, SharedStylesHost } from './shared_styles_host';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./events/event_manager\";\nimport * as i2 from \"./shared_styles_host\";\nexport const NAMESPACE_URIS = {\n    'svg': 'http://www.w3.org/2000/svg',\n    'xhtml': 'http://www.w3.org/1999/xhtml',\n    'xlink': 'http://www.w3.org/1999/xlink',\n    'xml': 'http://www.w3.org/XML/1998/namespace',\n    'xmlns': 'http://www.w3.org/2000/xmlns/',\n    'math': 'http://www.w3.org/1998/Math/MathML',\n};\nconst COMPONENT_REGEX = /%COMP%/g;\nconst SOURCEMAP_URL_REGEXP = /\\/\\*#\\s*sourceMappingURL=(.+?)\\s*\\*\\//;\nconst PROTOCOL_REGEXP = /^https?:/;\nexport const COMPONENT_VARIABLE = '%COMP%';\nexport const HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nexport const CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n/**\n * The default value for the `REMOVE_STYLES_ON_COMPONENT_DESTROY` DI token.\n */\nconst REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT = true;\n/**\n * A DI token that indicates whether styles\n * of destroyed components should be removed from DOM.\n *\n * By default, the value is set to `true`.\n * @publicApi\n */\nexport const REMOVE_STYLES_ON_COMPONENT_DESTROY = new InjectionToken(ngDevMode ? 'RemoveStylesOnCompDestroy' : '', {\n    providedIn: 'root',\n    factory: () => REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT,\n});\nexport function shimContentAttribute(componentShortId) {\n    return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\nexport function shimHostAttribute(componentShortId) {\n    return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\nexport function shimStylesContent(compId, styles) {\n    return styles.map((s) => s.replace(COMPONENT_REGEX, compId));\n}\n/**\n * Prepends a baseHref to the `sourceMappingURL` within the provided CSS content.\n * If the `sourceMappingURL` contains an inline (encoded) map, the function skips processing.\n *\n * @note For inline stylesheets, the `sourceMappingURL` is relative to the page's origin\n * and not the provided baseHref. This function is needed as when accessing the page with a URL\n * containing two or more segments.\n * For example, if the baseHref is set to `/`, and you visit a URL like `http://localhost/foo/bar`,\n * the map would be requested from `http://localhost/foo/bar/comp.css.map` instead of what you'd expect,\n * which is `http://localhost/comp.css.map`. This behavior is corrected by modifying the `sourceMappingURL`\n * to ensure external source maps are loaded relative to the baseHref.\n *\n\n * @param baseHref - The base URL to prepend to the `sourceMappingURL`.\n * @param styles - An array of CSS content strings, each potentially containing a `sourceMappingURL`.\n * @returns The updated array of CSS content strings with modified `sourceMappingURL` values,\n * or the original content if no modification is needed.\n */\nexport function addBaseHrefToCssSourceMap(baseHref, styles) {\n    if (!baseHref) {\n        return styles;\n    }\n    const absoluteBaseHrefUrl = new URL(baseHref, 'http://localhost');\n    return styles.map((cssContent) => {\n        if (!cssContent.includes('sourceMappingURL=')) {\n            return cssContent;\n        }\n        return cssContent.replace(SOURCEMAP_URL_REGEXP, (_, sourceMapUrl) => {\n            if (sourceMapUrl[0] === '/' ||\n                sourceMapUrl.startsWith('data:') ||\n                PROTOCOL_REGEXP.test(sourceMapUrl)) {\n                return `/*# sourceMappingURL=${sourceMapUrl} */`;\n            }\n            const { pathname: resolvedSourceMapUrl } = new URL(sourceMapUrl, absoluteBaseHrefUrl);\n            return `/*# sourceMappingURL=${resolvedSourceMapUrl} */`;\n        });\n    });\n}\nexport class DomRendererFactory2 {\n    eventManager;\n    sharedStylesHost;\n    appId;\n    removeStylesOnCompDestroy;\n    doc;\n    platformId;\n    ngZone;\n    nonce;\n    tracingService;\n    rendererByCompId = new Map();\n    defaultRenderer;\n    platformIsServer;\n    constructor(eventManager, sharedStylesHost, appId, removeStylesOnCompDestroy, doc, platformId, ngZone, nonce = null, tracingService = null) {\n        this.eventManager = eventManager;\n        this.sharedStylesHost = sharedStylesHost;\n        this.appId = appId;\n        this.removeStylesOnCompDestroy = removeStylesOnCompDestroy;\n        this.doc = doc;\n        this.platformId = platformId;\n        this.ngZone = ngZone;\n        this.nonce = nonce;\n        this.tracingService = tracingService;\n        this.platformIsServer = isPlatformServer(platformId);\n        this.defaultRenderer = new DefaultDomRenderer2(eventManager, doc, ngZone, this.platformIsServer, this.tracingService);\n    }\n    createRenderer(element, type) {\n        if (!element || !type) {\n            return this.defaultRenderer;\n        }\n        if (this.platformIsServer && type.encapsulation === ViewEncapsulation.ShadowDom) {\n            // Domino does not support shadow DOM.\n            type = { ...type, encapsulation: ViewEncapsulation.Emulated };\n        }\n        const renderer = this.getOrCreateRenderer(element, type);\n        // Renderers have different logic due to different encapsulation behaviours.\n        // Ex: for emulated, an attribute is added to the element.\n        if (renderer instanceof EmulatedEncapsulationDomRenderer2) {\n            renderer.applyToHost(element);\n        }\n        else if (renderer instanceof NoneEncapsulationDomRenderer) {\n            renderer.applyStyles();\n        }\n        return renderer;\n    }\n    getOrCreateRenderer(element, type) {\n        const rendererByCompId = this.rendererByCompId;\n        let renderer = rendererByCompId.get(type.id);\n        if (!renderer) {\n            const doc = this.doc;\n            const ngZone = this.ngZone;\n            const eventManager = this.eventManager;\n            const sharedStylesHost = this.sharedStylesHost;\n            const removeStylesOnCompDestroy = this.removeStylesOnCompDestroy;\n            const platformIsServer = this.platformIsServer;\n            const tracingService = this.tracingService;\n            switch (type.encapsulation) {\n                case ViewEncapsulation.Emulated:\n                    renderer = new EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, type, this.appId, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, tracingService);\n                    break;\n                case ViewEncapsulation.ShadowDom:\n                    return new ShadowDomRenderer(eventManager, sharedStylesHost, element, type, doc, ngZone, this.nonce, platformIsServer, tracingService);\n                default:\n                    renderer = new NoneEncapsulationDomRenderer(eventManager, sharedStylesHost, type, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, tracingService);\n                    break;\n            }\n            rendererByCompId.set(type.id, renderer);\n        }\n        return renderer;\n    }\n    ngOnDestroy() {\n        this.rendererByCompId.clear();\n    }\n    /**\n     * Used during HMR to clear any cached data about a component.\n     * @param componentId ID of the component that is being replaced.\n     */\n    componentReplaced(componentId) {\n        this.rendererByCompId.delete(componentId);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.14\", ngImport: i0, type: DomRendererFactory2, deps: [{ token: i1.EventManager }, { token: i2.SharedStylesHost }, { token: APP_ID }, { token: REMOVE_STYLES_ON_COMPONENT_DESTROY }, { token: DOCUMENT }, { token: PLATFORM_ID }, { token: i0.NgZone }, { token: CSP_NONCE }, { token: TracingService, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.14\", ngImport: i0, type: DomRendererFactory2 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.14\", ngImport: i0, type: DomRendererFactory2, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: i1.EventManager }, { type: i2.SharedStylesHost }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [APP_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [REMOVE_STYLES_ON_COMPONENT_DESTROY]\n                }] }, { type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CSP_NONCE]\n                }] }, { type: i0.ɵTracingService, decorators: [{\n                    type: Inject,\n                    args: [TracingService]\n                }, {\n                    type: Optional\n                }] }] });\nclass DefaultDomRenderer2 {\n    eventManager;\n    doc;\n    ngZone;\n    platformIsServer;\n    tracingService;\n    data = Object.create(null);\n    /**\n     * By default this renderer throws when encountering synthetic properties\n     * This can be disabled for example by the AsyncAnimationRendererFactory\n     */\n    throwOnSyntheticProps = true;\n    constructor(eventManager, doc, ngZone, platformIsServer, tracingService) {\n        this.eventManager = eventManager;\n        this.doc = doc;\n        this.ngZone = ngZone;\n        this.platformIsServer = platformIsServer;\n        this.tracingService = tracingService;\n    }\n    destroy() { }\n    destroyNode = null;\n    createElement(name, namespace) {\n        if (namespace) {\n            // TODO: `|| namespace` was added in\n            // https://github.com/angular/angular/commit/2b9cc8503d48173492c29f5a271b61126104fbdb to\n            // support how Ivy passed around the namespace URI rather than short name at the time. It did\n            // not, however extend the support to other parts of the system (setAttribute, setAttribute,\n            // and the ServerRenderer). We should decide what exactly the semantics for dealing with\n            // namespaces should be and make it consistent.\n            // Related issues:\n            // https://github.com/angular/angular/issues/44028\n            // https://github.com/angular/angular/issues/44883\n            return this.doc.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);\n        }\n        return this.doc.createElement(name);\n    }\n    createComment(value) {\n        return this.doc.createComment(value);\n    }\n    createText(value) {\n        return this.doc.createTextNode(value);\n    }\n    appendChild(parent, newChild) {\n        const targetParent = isTemplateNode(parent) ? parent.content : parent;\n        targetParent.appendChild(newChild);\n    }\n    insertBefore(parent, newChild, refChild) {\n        if (parent) {\n            const targetParent = isTemplateNode(parent) ? parent.content : parent;\n            targetParent.insertBefore(newChild, refChild);\n        }\n    }\n    removeChild(_parent, oldChild) {\n        oldChild.remove();\n    }\n    selectRootElement(selectorOrNode, preserveContent) {\n        let el = typeof selectorOrNode === 'string' ? this.doc.querySelector(selectorOrNode) : selectorOrNode;\n        if (!el) {\n            throw new RuntimeError(-5104 /* RuntimeErrorCode.ROOT_NODE_NOT_FOUND */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                `The selector \"${selectorOrNode}\" did not match any elements`);\n        }\n        if (!preserveContent) {\n            el.textContent = '';\n        }\n        return el;\n    }\n    parentNode(node) {\n        return node.parentNode;\n    }\n    nextSibling(node) {\n        return node.nextSibling;\n    }\n    setAttribute(el, name, value, namespace) {\n        if (namespace) {\n            name = namespace + ':' + name;\n            const namespaceUri = NAMESPACE_URIS[namespace];\n            if (namespaceUri) {\n                el.setAttributeNS(namespaceUri, name, value);\n            }\n            else {\n                el.setAttribute(name, value);\n            }\n        }\n        else {\n            el.setAttribute(name, value);\n        }\n    }\n    removeAttribute(el, name, namespace) {\n        if (namespace) {\n            const namespaceUri = NAMESPACE_URIS[namespace];\n            if (namespaceUri) {\n                el.removeAttributeNS(namespaceUri, name);\n            }\n            else {\n                el.removeAttribute(`${namespace}:${name}`);\n            }\n        }\n        else {\n            el.removeAttribute(name);\n        }\n    }\n    addClass(el, name) {\n        el.classList.add(name);\n    }\n    removeClass(el, name) {\n        el.classList.remove(name);\n    }\n    setStyle(el, style, value, flags) {\n        if (flags & (RendererStyleFlags2.DashCase | RendererStyleFlags2.Important)) {\n            el.style.setProperty(style, value, flags & RendererStyleFlags2.Important ? 'important' : '');\n        }\n        else {\n            el.style[style] = value;\n        }\n    }\n    removeStyle(el, style, flags) {\n        if (flags & RendererStyleFlags2.DashCase) {\n            // removeProperty has no effect when used on camelCased properties.\n            el.style.removeProperty(style);\n        }\n        else {\n            el.style[style] = '';\n        }\n    }\n    setProperty(el, name, value) {\n        if (el == null) {\n            return;\n        }\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n            this.throwOnSyntheticProps &&\n            checkNoSyntheticProp(name, 'property');\n        el[name] = value;\n    }\n    setValue(node, value) {\n        node.nodeValue = value;\n    }\n    listen(target, event, callback, options) {\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n            this.throwOnSyntheticProps &&\n            checkNoSyntheticProp(event, 'listener');\n        if (typeof target === 'string') {\n            target = getDOM().getGlobalEventTarget(this.doc, target);\n            if (!target) {\n                throw new RuntimeError(5102 /* RuntimeErrorCode.UNSUPPORTED_EVENT_TARGET */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                    `Unsupported event target ${target} for event ${event}`);\n            }\n        }\n        let wrappedCallback = this.decoratePreventDefault(callback);\n        if (this.tracingService?.wrapEventListener) {\n            wrappedCallback = this.tracingService.wrapEventListener(target, event, wrappedCallback);\n        }\n        return this.eventManager.addEventListener(target, event, wrappedCallback, options);\n    }\n    decoratePreventDefault(eventHandler) {\n        // `DebugNode.triggerEventHandler` needs to know if the listener was created with\n        // decoratePreventDefault or is a listener added outside the Angular context so it can handle\n        // the two differently. In the first case, the special '__ngUnwrap__' token is passed to the\n        // unwrap the listener (see below).\n        return (event) => {\n            // Ivy uses '__ngUnwrap__' as a special token that allows us to unwrap the function\n            // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`. The\n            // debug_node can inspect the listener toString contents for the existence of this special\n            // token. Because the token is a string literal, it is ensured to not be modified by compiled\n            // code.\n            if (event === '__ngUnwrap__') {\n                return eventHandler;\n            }\n            // Run the event handler inside the ngZone because event handlers are not patched\n            // by Zone on the server. This is required only for tests.\n            const allowDefaultBehavior = this.platformIsServer\n                ? this.ngZone.runGuarded(() => eventHandler(event))\n                : eventHandler(event);\n            if (allowDefaultBehavior === false) {\n                event.preventDefault();\n            }\n            return undefined;\n        };\n    }\n}\nconst AT_CHARCODE = (() => '@'.charCodeAt(0))();\nfunction checkNoSyntheticProp(name, nameKind) {\n    if (name.charCodeAt(0) === AT_CHARCODE) {\n        throw new RuntimeError(5105 /* RuntimeErrorCode.UNEXPECTED_SYNTHETIC_PROPERTY */, `Unexpected synthetic ${nameKind} ${name} found. Please make sure that:\n  - Make sure \\`provideAnimationsAsync()\\`, \\`provideAnimations()\\` or \\`provideNoopAnimations()\\` call was added to a list of providers used to bootstrap an application.\n  - There is a corresponding animation configuration named \\`${name}\\` defined in the \\`animations\\` field of the \\`@Component\\` decorator (see https://angular.dev/api/core/Component#animations).`);\n    }\n}\nfunction isTemplateNode(node) {\n    return node.tagName === 'TEMPLATE' && node.content !== undefined;\n}\nclass ShadowDomRenderer extends DefaultDomRenderer2 {\n    sharedStylesHost;\n    hostEl;\n    shadowRoot;\n    constructor(eventManager, sharedStylesHost, hostEl, component, doc, ngZone, nonce, platformIsServer, tracingService) {\n        super(eventManager, doc, ngZone, platformIsServer, tracingService);\n        this.sharedStylesHost = sharedStylesHost;\n        this.hostEl = hostEl;\n        this.shadowRoot = hostEl.attachShadow({ mode: 'open' });\n        this.sharedStylesHost.addHost(this.shadowRoot);\n        let styles = component.styles;\n        if (ngDevMode) {\n            // We only do this in development, as for production users should not add CSS sourcemaps to components.\n            const baseHref = getDOM().getBaseHref(doc) ?? '';\n            styles = addBaseHrefToCssSourceMap(baseHref, styles);\n        }\n        styles = shimStylesContent(component.id, styles);\n        for (const style of styles) {\n            const styleEl = document.createElement('style');\n            if (nonce) {\n                styleEl.setAttribute('nonce', nonce);\n            }\n            styleEl.textContent = style;\n            this.shadowRoot.appendChild(styleEl);\n        }\n        // Apply any external component styles to the shadow root for the component's element.\n        // The ShadowDOM renderer uses an alternative execution path for component styles that\n        // does not use the SharedStylesHost that other encapsulation modes leverage. Much like\n        // the manual addition of embedded styles directly above, any external stylesheets\n        // must be manually added here to ensure ShadowDOM components are correctly styled.\n        // TODO: Consider reworking the DOM Renderers to consolidate style handling.\n        const styleUrls = component.getExternalStyles?.();\n        if (styleUrls) {\n            for (const styleUrl of styleUrls) {\n                const linkEl = createLinkElement(styleUrl, doc);\n                if (nonce) {\n                    linkEl.setAttribute('nonce', nonce);\n                }\n                this.shadowRoot.appendChild(linkEl);\n            }\n        }\n    }\n    nodeOrShadowRoot(node) {\n        return node === this.hostEl ? this.shadowRoot : node;\n    }\n    appendChild(parent, newChild) {\n        return super.appendChild(this.nodeOrShadowRoot(parent), newChild);\n    }\n    insertBefore(parent, newChild, refChild) {\n        return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);\n    }\n    removeChild(_parent, oldChild) {\n        return super.removeChild(null, oldChild);\n    }\n    parentNode(node) {\n        return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));\n    }\n    destroy() {\n        this.sharedStylesHost.removeHost(this.shadowRoot);\n    }\n}\nclass NoneEncapsulationDomRenderer extends DefaultDomRenderer2 {\n    sharedStylesHost;\n    removeStylesOnCompDestroy;\n    styles;\n    styleUrls;\n    constructor(eventManager, sharedStylesHost, component, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, tracingService, compId) {\n        super(eventManager, doc, ngZone, platformIsServer, tracingService);\n        this.sharedStylesHost = sharedStylesHost;\n        this.removeStylesOnCompDestroy = removeStylesOnCompDestroy;\n        let styles = component.styles;\n        if (ngDevMode) {\n            // We only do this in development, as for production users should not add CSS sourcemaps to components.\n            const baseHref = getDOM().getBaseHref(doc) ?? '';\n            styles = addBaseHrefToCssSourceMap(baseHref, styles);\n        }\n        this.styles = compId ? shimStylesContent(compId, styles) : styles;\n        this.styleUrls = component.getExternalStyles?.(compId);\n    }\n    applyStyles() {\n        this.sharedStylesHost.addStyles(this.styles, this.styleUrls);\n    }\n    destroy() {\n        if (!this.removeStylesOnCompDestroy) {\n            return;\n        }\n        this.sharedStylesHost.removeStyles(this.styles, this.styleUrls);\n    }\n}\nclass EmulatedEncapsulationDomRenderer2 extends NoneEncapsulationDomRenderer {\n    contentAttr;\n    hostAttr;\n    constructor(eventManager, sharedStylesHost, component, appId, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, tracingService) {\n        const compId = appId + '-' + component.id;\n        super(eventManager, sharedStylesHost, component, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, tracingService, compId);\n        this.contentAttr = shimContentAttribute(compId);\n        this.hostAttr = shimHostAttribute(compId);\n    }\n    applyToHost(element) {\n        this.applyStyles();\n        this.setAttribute(element, this.hostAttr, '');\n    }\n    createElement(parent, name) {\n        const el = super.createElement(parent, name);\n        super.setAttribute(el, this.contentAttr, '');\n        return el;\n    }\n}\n//# sourceMappingURL=dom_renderer.js.map", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ɵparseCookieValue as parseCookieValue,\n  ɵsetRootDomAdapter as setRootDomAdapter,\n  ɵDomAdapter as DomAdapter,\n} from '@angular/common';\n\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport class BrowserDomAdapter extends DomAdapter {\n  override readonly supportsDOMEvents: boolean = true;\n\n  static makeCurrent() {\n    setRootDomAdapter(new BrowserDomAdapter());\n  }\n\n  override onAndCancel(el: Node, evt: any, listener: any, options: any): Function {\n    el.addEventListener(evt, listener, options);\n    return () => {\n      el.removeEventListener(evt, listener, options);\n    };\n  }\n  override dispatchEvent(el: Node, evt: any) {\n    el.dispatchEvent(evt);\n  }\n  override remove(node: Node): void {\n    (node as Element | Text | Comment).remove();\n  }\n  override createElement(tagName: string, doc?: Document): HTMLElement {\n    doc = doc || this.getDefaultDocument();\n    return doc.createElement(tagName);\n  }\n  override createHtmlDocument(): Document {\n    return document.implementation.createHTMLDocument('fakeTitle');\n  }\n  override getDefaultDocument(): Document {\n    return document;\n  }\n\n  override isElementNode(node: Node): boolean {\n    return node.nodeType === Node.ELEMENT_NODE;\n  }\n\n  override isShadowRoot(node: any): boolean {\n    return node instanceof DocumentFragment;\n  }\n\n  /** @deprecated No longer being used in Ivy code. To be removed in version 14. */\n  override getGlobalEventTarget(doc: Document, target: string): EventTarget | null {\n    if (target === 'window') {\n      return window;\n    }\n    if (target === 'document') {\n      return doc;\n    }\n    if (target === 'body') {\n      return doc.body;\n    }\n    return null;\n  }\n  override getBaseHref(doc: Document): string | null {\n    const href = getBaseElementHref();\n    return href == null ? null : relativePath(href);\n  }\n  override resetBaseElement(): void {\n    baseElement = null;\n  }\n  override getUserAgent(): string {\n    return window.navigator.userAgent;\n  }\n  override getCookie(name: string): string | null {\n    return parseCookieValue(document.cookie, name);\n  }\n}\n\nlet baseElement: HTMLElement | null = null;\nfunction getBaseElementHref(): string | null {\n  baseElement = baseElement || document.head.querySelector('base');\n  return baseElement ? baseElement.getAttribute('href') : null;\n}\n\nfunction relativePath(url: string): string {\n  // The base URL doesn't really matter, we just need it so relative paths have something\n  // to resolve against. In the browser `HTMLBaseElement.href` is always absolute.\n  return new URL(url, document.baseURI).pathname;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ɵgetDOM as getDOM} from '@angular/common';\nimport {\n  GetTestability,\n  Testability,\n  TestabilityRegistry,\n  ɵglobal as global,\n  ɵRuntimeError as RuntimeError,\n} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\nexport class BrowserGetTestability implements GetTestability {\n  addToWindow(registry: TestabilityRegistry): void {\n    global['getAngularTestability'] = (elem: any, findInAncestors: boolean = true) => {\n      const testability = registry.findTestabilityInTree(elem, findInAncestors);\n      if (testability == null) {\n        throw new RuntimeError(\n          RuntimeErrorCode.TESTABILITY_NOT_FOUND,\n          (typeof ngDevMode === 'undefined' || ngDevMode) &&\n            'Could not find testability for element.',\n        );\n      }\n      return testability;\n    };\n\n    global['getAllAngularTestabilities'] = () => registry.getAllTestabilities();\n\n    global['getAllAngularRootElements'] = () => registry.getAllRootElements();\n\n    const whenAllStable = (callback: () => void) => {\n      const testabilities = global['getAllAngularTestabilities']() as Testability[];\n      let count = testabilities.length;\n      const decrement = function () {\n        count--;\n        if (count == 0) {\n          callback();\n        }\n      };\n      testabilities.forEach((testability) => {\n        testability.whenStable(decrement);\n      });\n    };\n\n    if (!global['frameworkStabilizers']) {\n      global['frameworkStabilizers'] = [];\n    }\n    global['frameworkStabilizers'].push(whenAllStable);\n  }\n\n  findTestabilityInTree(\n    registry: TestabilityRegistry,\n    elem: any,\n    findInAncestors: boolean,\n  ): Testability | null {\n    if (elem == null) {\n      return null;\n    }\n    const t = registry.getTestability(elem);\n    if (t != null) {\n      return t;\n    } else if (!findInAncestors) {\n      return null;\n    }\n    if (getDOM().isShadowRoot(elem)) {\n      return this.findTestabilityInTree(registry, (<any>elem).host, true);\n    }\n    return this.findTestabilityInTree(registry, elem.parentElement, true);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {XhrFactory} from '@angular/common';\nimport {Injectable} from '@angular/core';\n\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n */\n@Injectable()\nexport class BrowserXhr implements XhrFactory {\n  build(): XMLHttpRequest {\n    return new XMLHttpRequest();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, type ListenerOptions} from '@angular/core';\n\nimport {EventManagerPlugin} from './event_manager';\n\n@Injectable()\nexport class DomEventsPlugin extends EventManagerPlugin {\n  constructor(@Inject(DOCUMENT) doc: any) {\n    super(doc);\n  }\n\n  // This plugin should come last in the list of plugins, because it accepts all\n  // events.\n  override supports(eventName: string): boolean {\n    return true;\n  }\n\n  override addEventListener(\n    element: HTMLElement,\n    eventName: string,\n    handler: Function,\n    options?: ListenerOptions,\n  ): Function {\n    element.addEventListener(eventName, handler as EventListener, options);\n    return () => this.removeEventListener(element, eventName, handler as EventListener, options);\n  }\n\n  removeEventListener(\n    target: any,\n    eventName: string,\n    callback: Function,\n    options?: ListenerOptions,\n  ): void {\n    return target.removeEventListener(eventName, callback as EventListener, options);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, type ListenerOptions, NgZone} from '@angular/core';\n\nimport {EventManagerPlugin} from './event_manager';\n\n/**\n * Defines supported modifiers for key events.\n */\nconst MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\n\n// The following values are here for cross-browser compatibility and to match the W3C standard\n// cf https://www.w3.org/TR/DOM-Level-3-Events-key/\nconst _keyMap: {[k: string]: string} = {\n  '\\b': 'Backspace',\n  '\\t': 'Tab',\n  '\\x7F': 'Delete',\n  '\\x1B': 'Escape',\n  'Del': 'Delete',\n  'Esc': 'Escape',\n  'Left': 'ArrowLeft',\n  'Right': 'ArrowRight',\n  'Up': 'ArrowUp',\n  'Down': 'ArrowDown',\n  'Menu': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'Win': 'OS',\n};\n\n/**\n * Retrieves modifiers from key-event objects.\n */\nconst MODIFIER_KEY_GETTERS: {[key: string]: (event: KeyboardEvent) => boolean} = {\n  'alt': (event: KeyboardEvent) => event.altKey,\n  'control': (event: KeyboardEvent) => event.ctrlKey,\n  'meta': (event: KeyboardEvent) => event.metaKey,\n  'shift': (event: KeyboardEvent) => event.shiftKey,\n};\n\n/**\n * A browser plug-in that provides support for handling of key events in Angular.\n */\n@Injectable()\nexport class KeyEventsPlugin extends EventManagerPlugin {\n  /**\n   * Initializes an instance of the browser plug-in.\n   * @param doc The document in which key events will be detected.\n   */\n  constructor(@Inject(DOCUMENT) doc: any) {\n    super(doc);\n  }\n\n  /**\n   * Reports whether a named key event is supported.\n   * @param eventName The event name to query.\n   * @return True if the named key event is supported.\n   */\n  override supports(eventName: string): boolean {\n    return KeyEventsPlugin.parseEventName(eventName) != null;\n  }\n\n  /**\n   * Registers a handler for a specific element and key event.\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the key event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns The key event that was registered.\n   */\n  override addEventListener(\n    element: HTMLElement,\n    eventName: string,\n    handler: Function,\n    options?: ListenerOptions,\n  ): Function {\n    const parsedEvent = KeyEventsPlugin.parseEventName(eventName)!;\n\n    const outsideHandler = KeyEventsPlugin.eventCallback(\n      parsedEvent['fullKey'],\n      handler,\n      this.manager.getZone(),\n    );\n\n    return this.manager.getZone().runOutsideAngular(() => {\n      return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler, options);\n    });\n  }\n\n  /**\n   * Parses the user provided full keyboard event definition and normalizes it for\n   * later internal use. It ensures the string is all lowercase, converts special\n   * characters to a standard spelling, and orders all the values consistently.\n   *\n   * @param eventName The name of the key event to listen for.\n   * @returns an object with the full, normalized string, and the dom event name\n   * or null in the case when the event doesn't match a keyboard event.\n   */\n  static parseEventName(eventName: string): {fullKey: string; domEventName: string} | null {\n    const parts: string[] = eventName.toLowerCase().split('.');\n\n    const domEventName = parts.shift();\n    if (parts.length === 0 || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n      return null;\n    }\n\n    const key = KeyEventsPlugin._normalizeKey(parts.pop()!);\n\n    let fullKey = '';\n    let codeIX = parts.indexOf('code');\n    if (codeIX > -1) {\n      parts.splice(codeIX, 1);\n      fullKey = 'code.';\n    }\n    MODIFIER_KEYS.forEach((modifierName) => {\n      const index: number = parts.indexOf(modifierName);\n      if (index > -1) {\n        parts.splice(index, 1);\n        fullKey += modifierName + '.';\n      }\n    });\n    fullKey += key;\n\n    if (parts.length != 0 || key.length === 0) {\n      // returning null instead of throwing to let another plugin process the event\n      return null;\n    }\n\n    // NOTE: Please don't rewrite this as so, as it will break JSCompiler property renaming.\n    //       The code must remain in the `result['domEventName']` form.\n    // return {domEventName, fullKey};\n    const result: {fullKey: string; domEventName: string} = {} as any;\n    result['domEventName'] = domEventName;\n    result['fullKey'] = fullKey;\n    return result;\n  }\n\n  /**\n   * Determines whether the actual keys pressed match the configured key code string.\n   * The `fullKeyCode` event is normalized in the `parseEventName` method when the\n   * event is attached to the DOM during the `addEventListener` call. This is unseen\n   * by the end user and is normalized for internal consistency and parsing.\n   *\n   * @param event The keyboard event.\n   * @param fullKeyCode The normalized user defined expected key event string\n   * @returns boolean.\n   */\n  static matchEventFullKeyCode(event: KeyboardEvent, fullKeyCode: string): boolean {\n    let keycode = _keyMap[event.key] || event.key;\n    let key = '';\n    if (fullKeyCode.indexOf('code.') > -1) {\n      keycode = event.code;\n      key = 'code.';\n    }\n    // the keycode could be unidentified so we have to check here\n    if (keycode == null || !keycode) return false;\n    keycode = keycode.toLowerCase();\n    if (keycode === ' ') {\n      keycode = 'space'; // for readability\n    } else if (keycode === '.') {\n      keycode = 'dot'; // because '.' is used as a separator in event names\n    }\n    MODIFIER_KEYS.forEach((modifierName) => {\n      if (modifierName !== keycode) {\n        const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n        if (modifierGetter(event)) {\n          key += modifierName + '.';\n        }\n      }\n    });\n    key += keycode;\n    return key === fullKeyCode;\n  }\n\n  /**\n   * Configures a handler callback for a key event.\n   * @param fullKey The event name that combines all simultaneous keystrokes.\n   * @param handler The function that responds to the key event.\n   * @param zone The zone in which the event occurred.\n   * @returns A callback function.\n   */\n  static eventCallback(fullKey: string, handler: Function, zone: NgZone): Function {\n    return (event: KeyboardEvent) => {\n      if (KeyEventsPlugin.matchEventFullKeyCode(event, fullKey)) {\n        zone.runGuarded(() => handler(event));\n      }\n    };\n  }\n\n  /** @internal */\n  static _normalizeKey(keyName: string): string {\n    return keyName === 'esc' ? 'escape' : keyName;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  CommonModule,\n  DOCUMENT,\n  XhrFactory,\n  ɵPLATFORM_BROWSER_ID as PLATFORM_BROWSER_ID,\n} from '@angular/common';\nimport {\n  ApplicationConfig as ApplicationConfigFromCore,\n  ApplicationModule,\n  ApplicationRef,\n  createPlatformFactory,\n  ErrorHandler,\n  InjectionToken,\n  NgModule,\n  NgZone,\n  PLATFORM_ID,\n  PLATFORM_INITIALIZER,\n  platformCore,\n  PlatformRef,\n  Provider,\n  RendererFactory2,\n  StaticProvider,\n  Testability,\n  TestabilityRegistry,\n  Type,\n  ɵINJECTOR_SCOPE as INJECTOR_SCOPE,\n  ɵinternalCreateApplication as internalCreateApplication,\n  ɵRuntimeError as RuntimeError,\n  ɵsetDocument,\n  ɵTESTABILITY as TESTABILITY,\n  ɵTESTABILITY_GETTER as TESTABILITY_GETTER,\n  inject,\n} from '@angular/core';\n\nimport {BrowserDomAdapter} from './browser/browser_adapter';\nimport {BrowserGetTestability} from './browser/testability';\nimport {BrowserXhr} from './browser/xhr';\nimport {DomRendererFactory2} from './dom/dom_renderer';\nimport {DomEventsPlugin} from './dom/events/dom_events';\nimport {EVENT_MANAGER_PLUGINS, EventManager} from './dom/events/event_manager';\nimport {KeyEventsPlugin} from './dom/events/key_events';\nimport {SharedStylesHost} from './dom/shared_styles_host';\nimport {RuntimeErrorCode} from './errors';\n\n/**\n * Set of config options available during the application bootstrap operation.\n *\n * @publicApi\n *\n * @deprecated\n * `ApplicationConfig` has moved, please import `ApplicationConfig` from `@angular/core` instead.\n */\n// The below is a workaround to add a deprecated message.\ntype ApplicationConfig = ApplicationConfigFromCore;\nexport {ApplicationConfig};\n\n/**\n * Bootstraps an instance of an Angular application and renders a standalone component as the\n * application's root component. More information about standalone components can be found in [this\n * guide](guide/components/importing).\n *\n * @usageNotes\n * The root component passed into this function *must* be a standalone one (should have the\n * `standalone: true` flag in the `@Component` decorator config).\n *\n * ```angular-ts\n * @Component({\n *   standalone: true,\n *   template: 'Hello world!'\n * })\n * class RootComponent {}\n *\n * const appRef: ApplicationRef = await bootstrapApplication(RootComponent);\n * ```\n *\n * You can add the list of providers that should be available in the application injector by\n * specifying the `providers` field in an object passed as the second argument:\n *\n * ```ts\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     {provide: BACKEND_URL, useValue: 'https://yourdomain.com/api'}\n *   ]\n * });\n * ```\n *\n * The `importProvidersFrom` helper method can be used to collect all providers from any\n * existing NgModule (and transitively from all NgModules that it imports):\n *\n * ```ts\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     importProvidersFrom(SomeNgModule)\n *   ]\n * });\n * ```\n *\n * Note: the `bootstrapApplication` method doesn't include [Testability](api/core/Testability) by\n * default. You can add [Testability](api/core/Testability) by getting the list of necessary\n * providers using `provideProtractorTestingSupport()` function and adding them into the `providers`\n * array, for example:\n *\n * ```ts\n * import {provideProtractorTestingSupport} from '@angular/platform-browser';\n *\n * await bootstrapApplication(RootComponent, {providers: [provideProtractorTestingSupport()]});\n * ```\n *\n * @param rootComponent A reference to a standalone component that should be rendered.\n * @param options Extra configuration for the bootstrap operation, see `ApplicationConfig` for\n *     additional info.\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n *\n * @publicApi\n */\nexport function bootstrapApplication(\n  rootComponent: Type<unknown>,\n  options?: ApplicationConfig,\n): Promise<ApplicationRef> {\n  return internalCreateApplication({rootComponent, ...createProvidersConfig(options)});\n}\n\n/**\n * Create an instance of an Angular application without bootstrapping any components. This is useful\n * for the situation where one wants to decouple application environment creation (a platform and\n * associated injectors) from rendering components on a screen. Components can be subsequently\n * bootstrapped on the returned `ApplicationRef`.\n *\n * @param options Extra configuration for the application environment, see `ApplicationConfig` for\n *     additional info.\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n *\n * @publicApi\n */\nexport function createApplication(options?: ApplicationConfig) {\n  return internalCreateApplication(createProvidersConfig(options));\n}\n\nfunction createProvidersConfig(options?: ApplicationConfig) {\n  return {\n    appProviders: [...BROWSER_MODULE_PROVIDERS, ...(options?.providers ?? [])],\n    platformProviders: INTERNAL_BROWSER_PLATFORM_PROVIDERS,\n  };\n}\n\n/**\n * Returns a set of providers required to setup [Testability](api/core/Testability) for an\n * application bootstrapped using the `bootstrapApplication` function. The set of providers is\n * needed to support testing an application with Protractor (which relies on the Testability APIs\n * to be present).\n *\n * @returns An array of providers required to setup Testability for an application and make it\n *     available for testing using Protractor.\n *\n * @publicApi\n */\nexport function provideProtractorTestingSupport(): Provider[] {\n  // Return a copy to prevent changes to the original array in case any in-place\n  // alterations are performed to the `provideProtractorTestingSupport` call results in app\n  // code.\n  return [...TESTABILITY_PROVIDERS];\n}\n\nexport function initDomAdapter() {\n  BrowserDomAdapter.makeCurrent();\n}\n\nexport function errorHandler(): ErrorHandler {\n  return new ErrorHandler();\n}\n\nexport function _document(): any {\n  // Tell ivy about the global document\n  ɵsetDocument(document);\n  return document;\n}\n\nconst INTERNAL_BROWSER_PLATFORM_PROVIDERS: StaticProvider[] = [\n  {provide: PLATFORM_ID, useValue: PLATFORM_BROWSER_ID},\n  {provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true},\n  {provide: DOCUMENT, useFactory: _document},\n];\n\n/**\n * A factory function that returns a `PlatformRef` instance associated with browser service\n * providers.\n *\n * @publicApi\n */\nexport const platformBrowser: (extraProviders?: StaticProvider[]) => PlatformRef =\n  createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n\n/**\n * Internal marker to signal whether providers from the `BrowserModule` are already present in DI.\n * This is needed to avoid loading `BrowserModule` providers twice. We can't rely on the\n * `BrowserModule` presence itself, since the standalone-based bootstrap just imports\n * `BrowserModule` providers without referencing the module itself.\n */\nconst BROWSER_MODULE_PROVIDERS_MARKER = new InjectionToken(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'BrowserModule Providers Marker' : '',\n);\n\nconst TESTABILITY_PROVIDERS = [\n  {\n    provide: TESTABILITY_GETTER,\n    useClass: BrowserGetTestability,\n  },\n  {\n    provide: TESTABILITY,\n    useClass: Testability,\n    deps: [NgZone, TestabilityRegistry, TESTABILITY_GETTER],\n  },\n  {\n    provide: Testability, // Also provide as `Testability` for backwards-compatibility.\n    useClass: Testability,\n    deps: [NgZone, TestabilityRegistry, TESTABILITY_GETTER],\n  },\n];\n\nconst BROWSER_MODULE_PROVIDERS: Provider[] = [\n  {provide: INJECTOR_SCOPE, useValue: 'root'},\n  {provide: ErrorHandler, useFactory: errorHandler},\n  {\n    provide: EVENT_MANAGER_PLUGINS,\n    useClass: DomEventsPlugin,\n    multi: true,\n    deps: [DOCUMENT],\n  },\n  {provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true, deps: [DOCUMENT]},\n  DomRendererFactory2,\n  SharedStylesHost,\n  EventManager,\n  {provide: RendererFactory2, useExisting: DomRendererFactory2},\n  {provide: XhrFactory, useClass: BrowserXhr},\n  typeof ngDevMode === 'undefined' || ngDevMode\n    ? {provide: BROWSER_MODULE_PROVIDERS_MARKER, useValue: true}\n    : [],\n];\n\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by default in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [...BROWSER_MODULE_PROVIDERS, ...TESTABILITY_PROVIDERS],\n  exports: [CommonModule, ApplicationModule],\n})\nexport class BrowserModule {\n  constructor() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      const providersAlreadyPresent = inject(BROWSER_MODULE_PROVIDERS_MARKER, {\n        optional: true,\n        skipSelf: true,\n      });\n\n      if (providersAlreadyPresent) {\n        throw new RuntimeError(\n          RuntimeErrorCode.BROWSER_MODULE_ALREADY_LOADED,\n          `Providers from the \\`BrowserModule\\` have already been loaded. If you need access ` +\n            `to common directives such as NgIf and NgFor, import the \\`CommonModule\\` instead.`,\n        );\n      }\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT, ɵDomAdapter as DomAdapter, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\n\n/**\n * Represents the attributes of an HTML `<meta>` element. The element itself is\n * represented by the internal `HTMLMetaElement`.\n *\n * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)\n * @see {@link Meta}\n *\n * @publicApi\n */\nexport type MetaDefinition = {\n  charset?: string;\n  content?: string;\n  httpEquiv?: string;\n  id?: string;\n  itemprop?: string;\n  name?: string;\n  property?: string;\n  scheme?: string;\n  url?: string;\n} & {\n  // TODO(IgorMinar): this type looks wrong\n  [prop: string]: string;\n};\n\n/**\n * A service for managing HTML `<meta>` tags.\n *\n * Properties of the `MetaDefinition` object match the attributes of the\n * HTML `<meta>` tag. These tags define document metadata that is important for\n * things like configuring a Content Security Policy, defining browser compatibility\n * and security settings, setting HTTP Headers, defining rich content for social sharing,\n * and Search Engine Optimization (SEO).\n *\n * To identify specific `<meta>` tags in a document, use an attribute selection\n * string in the format `\"tag_attribute='value string'\"`.\n * For example, an `attrSelector` value of `\"name='description'\"` matches a tag\n * whose `name` attribute has the value `\"description\"`.\n * Selectors are used with the `querySelector()` Document method,\n * in the format `meta[{attrSelector}]`.\n *\n * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)\n * @see [Document.querySelector()](https://developer.mozilla.org/docs/Web/API/Document/querySelector)\n *\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root'})\nexport class Meta {\n  private _dom: DomAdapter;\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    this._dom = getDOM();\n  }\n  /**\n   * Retrieves or creates a specific `<meta>` tag element in the current HTML document.\n   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n   * values in the provided tag definition, and verifies that all other attribute values are equal.\n   * If an existing element is found, it is returned and is not modified in any way.\n   * @param tag The definition of a `<meta>` element to match or create.\n   * @param forceCreation True to create a new element without checking whether one already exists.\n   * @returns The existing element with the same attributes and values if found,\n   * the new element if no match is found, or `null` if the tag parameter is not defined.\n   */\n  addTag(tag: MetaDefinition, forceCreation: boolean = false): HTMLMetaElement | null {\n    if (!tag) return null;\n    return this._getOrCreateElement(tag, forceCreation);\n  }\n\n  /**\n   * Retrieves or creates a set of `<meta>` tag elements in the current HTML document.\n   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n   * values in the provided tag definition, and verifies that all other attribute values are equal.\n   * @param tags An array of tag definitions to match or create.\n   * @param forceCreation True to create new elements without checking whether they already exist.\n   * @returns The matching elements if found, or the new elements.\n   */\n  addTags(tags: MetaDefinition[], forceCreation: boolean = false): HTMLMetaElement[] {\n    if (!tags) return [];\n    return tags.reduce((result: HTMLMetaElement[], tag: MetaDefinition) => {\n      if (tag) {\n        result.push(this._getOrCreateElement(tag, forceCreation));\n      }\n      return result;\n    }, []);\n  }\n\n  /**\n   * Retrieves a `<meta>` tag element in the current HTML document.\n   * @param attrSelector The tag attribute and value to match against, in the format\n   * `\"tag_attribute='value string'\"`.\n   * @returns The matching element, if any.\n   */\n  getTag(attrSelector: string): HTMLMetaElement | null {\n    if (!attrSelector) return null;\n    return this._doc.querySelector(`meta[${attrSelector}]`) || null;\n  }\n\n  /**\n   * Retrieves a set of `<meta>` tag elements in the current HTML document.\n   * @param attrSelector The tag attribute and value to match against, in the format\n   * `\"tag_attribute='value string'\"`.\n   * @returns The matching elements, if any.\n   */\n  getTags(attrSelector: string): HTMLMetaElement[] {\n    if (!attrSelector) return [];\n    const list /*NodeList*/ = this._doc.querySelectorAll(`meta[${attrSelector}]`);\n    return list ? [].slice.call(list) : [];\n  }\n\n  /**\n   * Modifies an existing `<meta>` tag element in the current HTML document.\n   * @param tag The tag description with which to replace the existing tag content.\n   * @param selector A tag attribute and value to match against, to identify\n   * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n   * If not supplied, matches a tag with the same `name` or `property` attribute value as the\n   * replacement tag.\n   * @return The modified element.\n   */\n  updateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement | null {\n    if (!tag) return null;\n    selector = selector || this._parseSelector(tag);\n    const meta: HTMLMetaElement = this.getTag(selector)!;\n    if (meta) {\n      return this._setMetaElementAttributes(tag, meta);\n    }\n    return this._getOrCreateElement(tag, true);\n  }\n\n  /**\n   * Removes an existing `<meta>` tag element from the current HTML document.\n   * @param attrSelector A tag attribute and value to match against, to identify\n   * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n   */\n  removeTag(attrSelector: string): void {\n    this.removeTagElement(this.getTag(attrSelector)!);\n  }\n\n  /**\n   * Removes an existing `<meta>` tag element from the current HTML document.\n   * @param meta The tag definition to match against to identify an existing tag.\n   */\n  removeTagElement(meta: HTMLMetaElement): void {\n    if (meta) {\n      this._dom.remove(meta);\n    }\n  }\n\n  private _getOrCreateElement(\n    meta: MetaDefinition,\n    forceCreation: boolean = false,\n  ): HTMLMetaElement {\n    if (!forceCreation) {\n      const selector: string = this._parseSelector(meta);\n      // It's allowed to have multiple elements with the same name so it's not enough to\n      // just check that element with the same name already present on the page. We also need to\n      // check if element has tag attributes\n      const elem = this.getTags(selector).filter((elem) => this._containsAttributes(meta, elem))[0];\n      if (elem !== undefined) return elem;\n    }\n    const element: HTMLMetaElement = this._dom.createElement('meta') as HTMLMetaElement;\n    this._setMetaElementAttributes(meta, element);\n    const head = this._doc.getElementsByTagName('head')[0];\n    head.appendChild(element);\n    return element;\n  }\n\n  private _setMetaElementAttributes(tag: MetaDefinition, el: HTMLMetaElement): HTMLMetaElement {\n    Object.keys(tag).forEach((prop: string) =>\n      el.setAttribute(this._getMetaKeyMap(prop), tag[prop]),\n    );\n    return el;\n  }\n\n  private _parseSelector(tag: MetaDefinition): string {\n    const attr: string = tag.name ? 'name' : 'property';\n    return `${attr}=\"${tag[attr]}\"`;\n  }\n\n  private _containsAttributes(tag: MetaDefinition, elem: HTMLMetaElement): boolean {\n    return Object.keys(tag).every(\n      (key: string) => elem.getAttribute(this._getMetaKeyMap(key)) === tag[key],\n    );\n  }\n\n  private _getMetaKeyMap(prop: string): string {\n    return META_KEYS_MAP[prop] || prop;\n  }\n}\n\n/**\n * Mapping for MetaDefinition properties with their correct meta attribute names\n */\nconst META_KEYS_MAP: {[prop: string]: string} = {\n  httpEquiv: 'http-equiv',\n};\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\n\n/**\n * A service that can be used to get and set the title of a current HTML document.\n *\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root'})\nexport class Title {\n  constructor(@Inject(DOCUMENT) private _doc: any) {}\n  /**\n   * Get the title of the current HTML document.\n   */\n  getTitle(): string {\n    return this._doc.title;\n  }\n\n  /**\n   * Set the title of the current HTML document.\n   * @param newTitle\n   */\n  setTitle(newTitle: string) {\n    this._doc.title = newTitle || '';\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/// <reference path=\"../../../goog.d.ts\" />\n\nimport {ɵglobal as global} from '@angular/core';\n\n/**\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\n * `name` is `'probe'`.\n * @param name Name under which it will be exported. Keep in mind this will be a property of the\n * global `ng` object.\n * @param value The value to export.\n */\nexport function exportNgVar(name: string, value: any): void {\n  if (typeof COMPILED === 'undefined' || !COMPILED) {\n    // Note: we can't export `ng` when using closure enhanced optimization as:\n    // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n    // - we can't declare a closure extern as the namespace `ng` is already used within Google\n    //   for typings for angularJS (via `goog.provide('ng....')`).\n    const ng = (global['ng'] = (global['ng'] as {[key: string]: any} | undefined) || {});\n    ng[name] = value;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ApplicationRef, ComponentRef} from '@angular/core';\n\nexport class ChangeDetectionPerfRecord {\n  constructor(\n    public msPerTick: number,\n    public numTicks: number,\n  ) {}\n}\n\n/**\n * Entry point for all Angular profiling-related debug tools. This object\n * corresponds to the `ng.profiler` in the dev console.\n */\nexport class AngularProfiler {\n  appRef: ApplicationRef;\n\n  constructor(ref: ComponentRef<any>) {\n    this.appRef = ref.injector.get(ApplicationRef);\n  }\n\n  // tslint:disable:no-console\n  /**\n   * Exercises change detection in a loop and then prints the average amount of\n   * time in milliseconds how long a single round of change detection takes for\n   * the current state of the UI. It runs a minimum of 5 rounds for a minimum\n   * of 500 milliseconds.\n   *\n   * Optionally, a user may pass a `config` parameter containing a map of\n   * options. Supported options are:\n   *\n   * `record` (boolean) - causes the profiler to record a CPU profile while\n   * it exercises the change detector. Example:\n   *\n   * ```ts\n   * ng.profiler.timeChangeDetection({record: true})\n   * ```\n   */\n  timeChangeDetection(config: any): ChangeDetectionPerfRecord {\n    const record = config && config['record'];\n    const profileName = 'Change Detection';\n    // Profiler is not available in Android browsers without dev tools opened\n    if (record && 'profile' in console && typeof console.profile === 'function') {\n      console.profile(profileName);\n    }\n    const start = performance.now();\n    let numTicks = 0;\n    while (numTicks < 5 || performance.now() - start < 500) {\n      this.appRef.tick();\n      numTicks++;\n    }\n    const end = performance.now();\n    if (record && 'profileEnd' in console && typeof console.profileEnd === 'function') {\n      console.profileEnd(profileName);\n    }\n    const msPerTick = (end - start) / numTicks;\n    console.log(`ran ${numTicks} change detection cycles`);\n    console.log(`${msPerTick.toFixed(2)} ms per check`);\n\n    return new ChangeDetectionPerfRecord(msPerTick, numTicks);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ComponentRef} from '@angular/core';\n\nimport {exportNgVar} from '../../dom/util';\n\nimport {AngularProfiler} from './common_tools';\n\nconst PROFILER_GLOBAL_NAME = 'profiler';\n\n/**\n * Enabled Angular debug tools that are accessible via your browser's\n * developer console.\n *\n * Usage:\n *\n * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\n * 1. Type `ng.` (usually the console will show auto-complete suggestion)\n * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\n *    then hit Enter.\n *\n * @publicApi\n */\nexport function enableDebugTools<T>(ref: ComponentRef<T>): ComponentRef<T> {\n  exportNgVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));\n  return ref;\n}\n\n/**\n * Disables Angular tools.\n *\n * @publicApi\n */\nexport function disableDebugTools(): void {\n  exportNgVar(PROFILER_GLOBAL_NAME, null);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ɵgetDOM as getDOM} from '@angular/common';\nimport {DebugElement, DebugNode, Predicate, Type} from '@angular/core';\n\n/**\n * Predicates for use with {@link DebugElement}'s query functions.\n *\n * @publicApi\n */\nexport class By {\n  /**\n   * Match all nodes.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\n   */\n  static all(): Predicate<DebugNode> {\n    return () => true;\n  }\n\n  /**\n   * Match elements by the given CSS selector.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\n   */\n  static css(selector: string): Predicate<DebugElement> {\n    return (debugElement) => {\n      return debugElement.nativeElement != null\n        ? elementMatches(debugElement.nativeElement, selector)\n        : false;\n    };\n  }\n\n  /**\n   * Match nodes that have the given directive present.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\n   */\n  static directive(type: Type<any>): Predicate<DebugNode> {\n    return (debugNode) => debugNode.providerTokens!.indexOf(type) !== -1;\n  }\n}\n\nfunction elementMatches(n: any, selector: string): boolean {\n  if (getDOM().isElementNode(n)) {\n    return (\n      (n.matches && n.matches(selector)) ||\n      (n.msMatchesSelector && n.msMatchesSelector(selector)) ||\n      (n.webkitMatchesSelector && n.webkitMatchesSelector(selector))\n    );\n  }\n\n  return false;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/// <reference types=\"hammerjs\" />\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  NgModule,\n  Optional,\n  ɵConsole as Console,\n} from '@angular/core';\n\nimport {EVENT_MANAGER_PLUGINS, EventManagerPlugin} from './event_manager';\n\n/**\n * Supported HammerJS recognizer event names.\n */\nconst EVENT_NAMES = {\n  // pan\n  'pan': true,\n  'panstart': true,\n  'panmove': true,\n  'panend': true,\n  'pancancel': true,\n  'panleft': true,\n  'panright': true,\n  'panup': true,\n  'pandown': true,\n  // pinch\n  'pinch': true,\n  'pinchstart': true,\n  'pinchmove': true,\n  'pinchend': true,\n  'pinchcancel': true,\n  'pinchin': true,\n  'pinchout': true,\n  // press\n  'press': true,\n  'pressup': true,\n  // rotate\n  'rotate': true,\n  'rotatestart': true,\n  'rotatemove': true,\n  'rotateend': true,\n  'rotatecancel': true,\n  // swipe\n  'swipe': true,\n  'swipeleft': true,\n  'swiperight': true,\n  'swipeup': true,\n  'swipedown': true,\n  // tap\n  'tap': true,\n  'doubletap': true,\n};\n\n/**\n * DI token for providing [HammerJS](https://hammerjs.github.io/) support to Angular.\n * @see {@link HammerGestureConfig}\n *\n * @ngModule HammerModule\n * @publicApi\n */\nexport const HAMMER_GESTURE_CONFIG = new InjectionToken<HammerGestureConfig>(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'HammerGestureConfig' : '',\n);\n\n/**\n * Function that loads HammerJS, returning a promise that is resolved once HammerJs is loaded.\n *\n * @publicApi\n */\nexport type HammerLoader = () => Promise<void>;\n\n/**\n * Injection token used to provide a HammerLoader to Angular.\n *\n * @see {@link HammerLoader}\n *\n * @publicApi\n */\nexport const HAMMER_LOADER = new InjectionToken<HammerLoader>(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'HammerLoader' : '',\n);\n\nexport interface HammerInstance {\n  on(eventName: string, callback?: Function): void;\n  off(eventName: string, callback?: Function): void;\n  destroy?(): void;\n}\n\n/**\n * An injectable [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n * for gesture recognition. Configures specific event recognition.\n * @publicApi\n */\n@Injectable()\nexport class HammerGestureConfig {\n  /**\n   * A set of supported event names for gestures to be used in Angular.\n   * Angular supports all built-in recognizers, as listed in\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   */\n  events: string[] = [];\n\n  /**\n   * Maps gesture event names to a set of configuration options\n   * that specify overrides to the default values for specific properties.\n   *\n   * The key is a supported event name to be configured,\n   * and the options object contains a set of properties, with override values\n   * to be applied to the named recognizer event.\n   * For example, to disable recognition of the rotate event, specify\n   *  `{\"rotate\": {\"enable\": false}}`.\n   *\n   * Properties that are not present take the HammerJS default values.\n   * For information about which properties are supported for which events,\n   * and their allowed and default values, see\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   *\n   */\n  overrides: {[key: string]: Object} = {};\n\n  /**\n   * Properties whose default values can be overridden for a given event.\n   * Different sets of properties apply to different events.\n   * For information about which properties are supported for which events,\n   * and their allowed and default values, see\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   */\n  options?: {\n    cssProps?: any;\n    domEvents?: boolean;\n    enable?: boolean | ((manager: any) => boolean);\n    preset?: any[];\n    touchAction?: string;\n    recognizers?: any[];\n    inputClass?: any;\n    inputTarget?: EventTarget;\n  };\n\n  /**\n   * Creates a [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n   * and attaches it to a given HTML element.\n   * @param element The element that will recognize gestures.\n   * @returns A HammerJS event-manager object.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new Hammer!(element, this.options);\n\n    mc.get('pinch').set({enable: true});\n    mc.get('rotate').set({enable: true});\n\n    for (const eventName in this.overrides) {\n      mc.get(eventName).set(this.overrides[eventName]);\n    }\n\n    return mc;\n  }\n}\n\n/**\n * Event plugin that adds Hammer support to an application.\n *\n * @ngModule HammerModule\n */\n@Injectable()\nexport class HammerGesturesPlugin extends EventManagerPlugin {\n  private _loaderPromise: Promise<void> | null = null;\n\n  constructor(\n    @Inject(DOCUMENT) doc: any,\n    @Inject(HAMMER_GESTURE_CONFIG) private _config: HammerGestureConfig,\n    private _injector: Injector,\n    @Optional() @Inject(HAMMER_LOADER) private loader?: HammerLoader | null,\n  ) {\n    super(doc);\n  }\n\n  override supports(eventName: string): boolean {\n    if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n      return false;\n    }\n\n    if (!(window as any).Hammer && !this.loader) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        // Get a `Console` through an injector to tree-shake the\n        // class when it is unused in production.\n        const _console = this._injector.get(Console);\n        _console.warn(\n          `The \"${eventName}\" event cannot be bound because Hammer.JS is not ` +\n            `loaded and no custom loader has been specified.`,\n        );\n      }\n      return false;\n    }\n\n    return true;\n  }\n\n  override addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const zone = this.manager.getZone();\n    eventName = eventName.toLowerCase();\n\n    // If Hammer is not present but a loader is specified, we defer adding the event listener\n    // until Hammer is loaded.\n    if (!(window as any).Hammer && this.loader) {\n      this._loaderPromise = this._loaderPromise || zone.runOutsideAngular(() => this.loader!());\n      // This `addEventListener` method returns a function to remove the added listener.\n      // Until Hammer is loaded, the returned function needs to *cancel* the registration rather\n      // than remove anything.\n      let cancelRegistration = false;\n      let deregister: Function = () => {\n        cancelRegistration = true;\n      };\n\n      zone.runOutsideAngular(() =>\n        this._loaderPromise!.then(() => {\n          // If Hammer isn't actually loaded when the custom loader resolves, give up.\n          if (!(window as any).Hammer) {\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n              const _console = this._injector.get(Console);\n              _console.warn(`The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);\n            }\n            deregister = () => {};\n            return;\n          }\n\n          if (!cancelRegistration) {\n            // Now that Hammer is loaded and the listener is being loaded for real,\n            // the deregistration function changes from canceling registration to\n            // removal.\n            deregister = this.addEventListener(element, eventName, handler);\n          }\n        }).catch(() => {\n          if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const _console = this._injector.get(Console);\n            _console.warn(\n              `The \"${eventName}\" event cannot be bound because the custom ` +\n                `Hammer.JS loader failed.`,\n            );\n          }\n          deregister = () => {};\n        }),\n      );\n\n      // Return a function that *executes* `deregister` (and not `deregister` itself) so that we\n      // can change the behavior of `deregister` once the listener is added. Using a closure in\n      // this way allows us to avoid any additional data structures to track listener removal.\n      return () => {\n        deregister();\n      };\n    }\n\n    return zone.runOutsideAngular(() => {\n      // Creating the manager bind events, must be done outside of angular\n      const mc = this._config.buildHammer(element);\n      const callback = function (eventObj: HammerInput) {\n        zone.runGuarded(function () {\n          handler(eventObj);\n        });\n      };\n      mc.on(eventName, callback);\n      return () => {\n        mc.off(eventName, callback);\n        // destroy mc to prevent memory leak\n        if (typeof mc.destroy === 'function') {\n          mc.destroy();\n        }\n      };\n    });\n  }\n\n  isCustomEvent(eventName: string): boolean {\n    return this._config.events.indexOf(eventName) > -1;\n  }\n}\n\n/**\n * Adds support for HammerJS.\n *\n * Import this module at the root of your application so that Angular can work with\n * HammerJS to detect gesture events.\n *\n * Note that applications still need to include the HammerJS script itself. This module\n * simply sets up the coordination layer between HammerJS and Angular's `EventManager`.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [\n    {\n      provide: EVENT_MANAGER_PLUGINS,\n      useClass: HammerGesturesPlugin,\n      multi: true,\n      deps: [DOCUMENT, HAMMER_GESTURE_CONFIG, Injector, [new Optional(), HAMMER_LOADER]],\n    },\n    {provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig},\n  ],\n})\nexport class HammerModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  forwardRef,\n  Inject,\n  Injectable,\n  Sanitizer,\n  SecurityContext,\n  ɵ_sanitizeHtml as _sanitizeHtml,\n  ɵ_sanitizeUrl as _sanitizeUrl,\n  ɵallowSanitizationBypassAndThrow as allowSanitizationBypassOrThrow,\n  ɵbypassSanitizationTrustHtml as bypassSanitizationTrustHtml,\n  ɵbypassSanitizationTrustResourceUrl as bypassSanitizationTrustResourceUrl,\n  ɵbypassSanitizationTrustScript as bypassSanitizationTrustScript,\n  ɵbypassSanitizationTrustStyle as bypassSanitizationTrustStyle,\n  ɵbypassSanitizationTrustUrl as bypassSanitizationTrustUrl,\n  ɵBypassType as BypassType,\n  ɵRuntimeError as RuntimeError,\n  ɵunwrapSafeValue as unwrapSafeValue,\n  ɵXSS_SECURITY_URL as XSS_SECURITY_URL,\n} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\nexport {SecurityContext};\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * @publicApi\n */\nexport interface SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * @publicApi\n */\nexport interface SafeHtml extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * @publicApi\n */\nexport interface SafeStyle extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * @publicApi\n */\nexport interface SafeScript extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * @publicApi\n */\nexport interface SafeUrl extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * @publicApi\n */\nexport interface SafeResourceUrl extends SafeValue {}\n\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useExisting: forwardRef(() => DomSanitizerImpl)})\nexport abstract class DomSanitizer implements Sanitizer {\n  /**\n   * Gets a safe value from either a known safe value or a value with unknown safety.\n   *\n   * If the given value is already a `SafeValue`, this method returns the unwrapped value.\n   * If the security context is HTML and the given value is a plain string, this method\n   * sanitizes the string, removing any potentially unsafe content.\n   * For any other security context, this method throws an error if provided\n   * with a plain string.\n   */\n  abstract sanitize(context: SecurityContext, value: SafeValue | string | null): string | null;\n\n  /**\n   * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n   * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\n   * leave safe HTML intact, so in most situations this method should not be used.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustHtml(value: string): SafeHtml;\n\n  /**\n   * Bypass security and trust the given value to be safe style value (CSS).\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustStyle(value: string): SafeStyle;\n\n  /**\n   * Bypass security and trust the given value to be safe JavaScript.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustScript(value: string): SafeScript;\n\n  /**\n   * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n   * in hyperlinks or `<img src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustUrl(value: string): SafeUrl;\n\n  /**\n   * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n   * be used to load executable code from, like `<script src>`, or `<iframe src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n}\n\n@Injectable({providedIn: 'root'})\nexport class DomSanitizerImpl extends DomSanitizer {\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n  }\n\n  override sanitize(ctx: SecurityContext, value: SafeValue | string | null): string | null {\n    if (value == null) return null;\n    switch (ctx) {\n      case SecurityContext.NONE:\n        return value as string;\n      case SecurityContext.HTML:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Html)) {\n          return unwrapSafeValue(value);\n        }\n        return _sanitizeHtml(this._doc, String(value)).toString();\n      case SecurityContext.STYLE:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Style)) {\n          return unwrapSafeValue(value);\n        }\n        return value as string;\n      case SecurityContext.SCRIPT:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Script)) {\n          return unwrapSafeValue(value);\n        }\n        throw new RuntimeError(\n          RuntimeErrorCode.SANITIZATION_UNSAFE_SCRIPT,\n          (typeof ngDevMode === 'undefined' || ngDevMode) &&\n            'unsafe value used in a script context',\n        );\n      case SecurityContext.URL:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Url)) {\n          return unwrapSafeValue(value);\n        }\n        return _sanitizeUrl(String(value));\n      case SecurityContext.RESOURCE_URL:\n        if (allowSanitizationBypassOrThrow(value, BypassType.ResourceUrl)) {\n          return unwrapSafeValue(value);\n        }\n        throw new RuntimeError(\n          RuntimeErrorCode.SANITIZATION_UNSAFE_RESOURCE_URL,\n          (typeof ngDevMode === 'undefined' || ngDevMode) &&\n            `unsafe value used in a resource URL context (see ${XSS_SECURITY_URL})`,\n        );\n      default:\n        throw new RuntimeError(\n          RuntimeErrorCode.SANITIZATION_UNEXPECTED_CTX,\n          (typeof ngDevMode === 'undefined' || ngDevMode) &&\n            `Unexpected SecurityContext ${ctx} (see ${XSS_SECURITY_URL})`,\n        );\n    }\n  }\n\n  override bypassSecurityTrustHtml(value: string): SafeHtml {\n    return bypassSanitizationTrustHtml(value);\n  }\n  override bypassSecurityTrustStyle(value: string): SafeStyle {\n    return bypassSanitizationTrustStyle(value);\n  }\n  override bypassSecurityTrustScript(value: string): SafeScript {\n    return bypassSanitizationTrustScript(value);\n  }\n  override bypassSecurityTrustUrl(value: string): SafeUrl {\n    return bypassSanitizationTrustUrl(value);\n  }\n  override bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl {\n    return bypassSanitizationTrustResourceUrl(value);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {HttpTransferCacheOptions, ɵwithHttpTransferCache} from '@angular/common/http';\nimport {\n  ENVIRONMENT_INITIALIZER,\n  EnvironmentProviders,\n  inject,\n  makeEnvironmentProviders,\n  NgZone,\n  Provider,\n  ɵConsole as Console,\n  ɵformatRuntimeError as formatRuntimeError,\n  ɵwithDomHydration as withDomHydration,\n  ɵwithEventReplay,\n  ɵwithI18nSupport,\n  ɵZONELESS_ENABLED as ZONELESS_ENABLED,\n  ɵwithIncrementalHydration,\n} from '@angular/core';\n\nimport {RuntimeErrorCode} from './errors';\n\n/**\n * The list of features as an enum to uniquely type each `HydrationFeature`.\n * @see {@link HydrationFeature}\n *\n * @publicApi\n */\nexport enum HydrationFeatureKind {\n  NoHttpTransferCache,\n  HttpTransferCacheOptions,\n  I18nSupport,\n  EventReplay,\n  IncrementalHydration,\n}\n\n/**\n * Helper type to represent a Hydration feature.\n *\n * @publicApi\n */\nexport interface HydrationFeature<FeatureKind extends HydrationFeatureKind> {\n  ɵkind: FeatureKind;\n  ɵproviders: Provider[];\n}\n\n/**\n * Helper function to create an object that represents a Hydration feature.\n */\nfunction hydrationFeature<FeatureKind extends HydrationFeatureKind>(\n  ɵkind: FeatureKind,\n  ɵproviders: Provider[] = [],\n  ɵoptions: unknown = {},\n): HydrationFeature<FeatureKind> {\n  return {ɵkind, ɵproviders};\n}\n\n/**\n * Disables HTTP transfer cache. Effectively causes HTTP requests to be performed twice: once on the\n * server and other one on the browser.\n *\n * @publicApi\n */\nexport function withNoHttpTransferCache(): HydrationFeature<HydrationFeatureKind.NoHttpTransferCache> {\n  // This feature has no providers and acts as a flag that turns off\n  // HTTP transfer cache (which otherwise is turned on by default).\n  return hydrationFeature(HydrationFeatureKind.NoHttpTransferCache);\n}\n\n/**\n * The function accepts an object, which allows to configure cache parameters,\n * such as which headers should be included (no headers are included by default),\n * whether POST requests should be cached or a callback function to determine if a\n * particular request should be cached.\n *\n * @publicApi\n */\nexport function withHttpTransferCacheOptions(\n  options: HttpTransferCacheOptions,\n): HydrationFeature<HydrationFeatureKind.HttpTransferCacheOptions> {\n  // This feature has no providers and acts as a flag to pass options to the HTTP transfer cache.\n  return hydrationFeature(\n    HydrationFeatureKind.HttpTransferCacheOptions,\n    ɵwithHttpTransferCache(options),\n  );\n}\n\n/**\n * Enables support for hydrating i18n blocks.\n *\n * @developerPreview\n * @publicApi\n */\nexport function withI18nSupport(): HydrationFeature<HydrationFeatureKind.I18nSupport> {\n  return hydrationFeature(HydrationFeatureKind.I18nSupport, ɵwithI18nSupport());\n}\n\n/**\n * Enables support for replaying user events (e.g. `click`s) that happened on a page\n * before hydration logic has completed. Once an application is hydrated, all captured\n * events are replayed and relevant event listeners are executed.\n *\n * @usageNotes\n *\n * Basic example of how you can enable event replay in your application when\n * `bootstrapApplication` function is used:\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [provideClientHydration(withEventReplay())]\n * });\n * ```\n * @publicApi\n * @see {@link provideClientHydration}\n */\nexport function withEventReplay(): HydrationFeature<HydrationFeatureKind.EventReplay> {\n  return hydrationFeature(HydrationFeatureKind.EventReplay, ɵwithEventReplay());\n}\n\n/**\n * Enables support for incremental hydration using the `hydrate` trigger syntax.\n *\n * @usageNotes\n *\n * Basic example of how you can enable incremental hydration in your application when\n * the `bootstrapApplication` function is used:\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [provideClientHydration(withIncrementalHydration())]\n * });\n * ```\n * @experimental\n * @publicApi\n * @see {@link provideClientHydration}\n */\nexport function withIncrementalHydration(): HydrationFeature<HydrationFeatureKind.IncrementalHydration> {\n  return hydrationFeature(HydrationFeatureKind.IncrementalHydration, ɵwithIncrementalHydration());\n}\n\n/**\n * Returns an `ENVIRONMENT_INITIALIZER` token setup with a function\n * that verifies whether compatible ZoneJS was used in an application\n * and logs a warning in a console if it's not the case.\n */\nfunction provideZoneJsCompatibilityDetector(): Provider[] {\n  return [\n    {\n      provide: ENVIRONMENT_INITIALIZER,\n      useValue: () => {\n        const ngZone = inject(NgZone);\n        const isZoneless = inject(ZONELESS_ENABLED);\n        // Checking `ngZone instanceof NgZone` would be insufficient here,\n        // because custom implementations might use NgZone as a base class.\n        if (!isZoneless && ngZone.constructor !== NgZone) {\n          const console = inject(Console);\n          const message = formatRuntimeError(\n            RuntimeErrorCode.UNSUPPORTED_ZONEJS_INSTANCE,\n            'Angular detected that hydration was enabled for an application ' +\n              'that uses a custom or a noop Zone.js implementation. ' +\n              'This is not yet a fully supported configuration.',\n          );\n          console.warn(message);\n        }\n      },\n      multi: true,\n    },\n  ];\n}\n\n/**\n * Sets up providers necessary to enable hydration functionality for the application.\n *\n * By default, the function enables the recommended set of features for the optimal\n * performance for most of the applications. It includes the following features:\n *\n * * Reconciling DOM hydration. Learn more about it [here](guide/hydration).\n * * [`HttpClient`](api/common/http/HttpClient) response caching while running on the server and\n * transferring this cache to the client to avoid extra HTTP requests. Learn more about data caching\n * [here](guide/ssr#caching-data-when-using-httpclient).\n *\n * These functions allow you to disable some of the default features or enable new ones:\n *\n * * {@link withNoHttpTransferCache} to disable HTTP transfer cache\n * * {@link withHttpTransferCacheOptions} to configure some HTTP transfer cache options\n * * {@link withI18nSupport} to enable hydration support for i18n blocks\n * * {@link withEventReplay} to enable support for replaying user events\n *\n * @usageNotes\n *\n * Basic example of how you can enable hydration in your application when\n * `bootstrapApplication` function is used:\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [provideClientHydration()]\n * });\n * ```\n *\n * Alternatively if you are using NgModules, you would add `provideClientHydration`\n * to your root app module's provider list.\n * ```ts\n * @NgModule({\n *   declarations: [RootCmp],\n *   bootstrap: [RootCmp],\n *   providers: [provideClientHydration()],\n * })\n * export class AppModule {}\n * ```\n *\n * @see {@link withNoHttpTransferCache}\n * @see {@link withHttpTransferCacheOptions}\n * @see {@link withI18nSupport}\n * @see {@link withEventReplay}\n *\n * @param features Optional features to configure additional hydration behaviors.\n * @returns A set of providers to enable hydration.\n *\n * @publicApi\n */\nexport function provideClientHydration(\n  ...features: HydrationFeature<HydrationFeatureKind>[]\n): EnvironmentProviders {\n  const providers: Provider[] = [];\n  const featuresKind = new Set<HydrationFeatureKind>();\n\n  for (const {ɵproviders, ɵkind} of features) {\n    featuresKind.add(ɵkind);\n\n    if (ɵproviders.length) {\n      providers.push(ɵproviders);\n    }\n  }\n\n  const hasHttpTransferCacheOptions = featuresKind.has(\n    HydrationFeatureKind.HttpTransferCacheOptions,\n  );\n\n  if (\n    typeof ngDevMode !== 'undefined' &&\n    ngDevMode &&\n    featuresKind.has(HydrationFeatureKind.NoHttpTransferCache) &&\n    hasHttpTransferCacheOptions\n  ) {\n    // TODO: Make this a runtime error\n    throw new Error(\n      'Configuration error: found both withHttpTransferCacheOptions() and withNoHttpTransferCache() in the same call to provideClientHydration(), which is a contradiction.',\n    );\n  }\n\n  return makeEnvironmentProviders([\n    typeof ngDevMode !== 'undefined' && ngDevMode ? provideZoneJsCompatibilityDetector() : [],\n    withDomHydration(),\n    featuresKind.has(HydrationFeatureKind.NoHttpTransferCache) || hasHttpTransferCacheOptions\n      ? []\n      : ɵwithHttpTransferCache({}),\n    providers,\n  ]);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the platform-browser package.\n */\n\nimport {Version} from '@angular/core';\n\n/**\n * @publicApi\n */\nexport const VERSION = new Version('19.2.14');\n"],
  "mappings": "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",
  "names": ["EVENT_MANAGER_PLUGINS", "InjectionToken", "ngDevMode", "EventManager", "_zone", "_plugins", "_eventNameToPlugin", "Map", "constructor", "plugins", "forEach", "plugin", "manager", "slice", "reverse", "addEventListener", "element", "eventName", "handler", "options", "_findPluginFor", "getZone", "get", "find", "supports", "_RuntimeError", "set", "ɵfac", "EventManager_Factory", "__ngFactoryType__", "ɵɵinject", "NgZone", "ɵɵdefineInjectable", "token", "factory", "ɵsetClassMetadata", "Injectable", "Inject", "EventManagerPlugin", "_doc", "APP_ID_ATTRIBUTE_NAME", "removeElements", "elements", "remove", "createStyleElement", "style", "doc", "styleElement", "createElement", "textContent", "addServerStyles", "appId", "inline", "external", "head", "querySelectorAll", "removeAttribute", "HTMLLinkElement", "href", "lastIndexOf", "usage", "createLinkElement", "url", "linkElement", "setAttribute", "SharedStylesHost", "nonce", "hosts", "Set", "isServer", "platformId", "isPlatformServer", "add", "addStyles", "styles", "urls", "value", "addUsage", "removeStyles", "removeUsage", "usages", "creator", "record", "map", "host", "addElement", "delete", "ngOnDestroy", "clear", "addHost", "hostNode", "push", "removeHost", "appendChild", "SharedStylesHost_Factory", "DOCUMENT", "APP_ID", "CSP_NONCE", "PLATFORM_ID", "Optional", "NAMESPACE_URIS", "COMPONENT_REGEX", "SOURCEMAP_URL_REGEXP", "PROTOCOL_REGEXP", "COMPONENT_VARIABLE", "HOST_ATTR", "CONTENT_ATTR", "REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT", "REMOVE_STYLES_ON_COMPONENT_DESTROY", "providedIn", "shimContentAttribute", "componentShortId", "replace", "shimHostAttribute", "shimStylesContent", "compId", "s", "addBaseHrefToCssSourceMap", "baseHref", "absoluteBaseHrefUrl", "URL", "cssContent", "includes", "_", "sourceMapUrl", "startsWith", "test", "pathname", "resolvedSourceMapUrl", "DomRendererFactory2", "eventManager", "sharedStylesHost", "removeStylesOnCompDestroy", "ngZone", "tracingService", "rendererByCompId", "defaultRenderer", "platformIsServer", "DefaultDomRenderer2", "createRenderer", "type", "encapsulation", "ViewEncapsulation", "ShadowDom", "Emulated", "renderer", "getOrCreateRenderer", "EmulatedEncapsulationDomRenderer2", "applyToHost", "NoneEncapsulationDomRenderer", "applyStyles", "id", "ShadowDomRenderer", "componentReplaced", "componentId", "DomRendererFactory2_Factory", "_TracingService", "ɵprov", "undefined", "decorators", "args", "Document", "Object", "ɵTracingService", "data", "create", "throwOnSyntheticProps", "destroy", "destroyNode", "name", "namespace", "createElementNS", "createComment", "createText", "createTextNode", "parent", "newChild", "targetParent", "isTemplateNode", "content", "insertBefore", "refChild", "removeChild", "_parent", "oldChild", "selectRootElement", "selectorOrNode", "preserveContent", "el", "querySelector", "parentNode", "node", "nextSibling", "namespaceUri", "setAttributeNS", "removeAttributeNS", "addClass", "classList", "removeClass", "setStyle", "flags", "RendererStyleFlags2", "DashCase", "Important", "setProperty", "removeStyle", "removeProperty", "checkNoSyntheticProp", "setValue", "nodeValue", "listen", "target", "event", "callback", "_getDOM", "getGlobalEventTarget", "wrappedCallback", "decoratePreventDefault", "wrapEventListener", "eventHandler", "allowDefaultBehavior", "runGuarded", "preventDefault", "AT_CHARCODE", "charCodeAt", "nameKind", "tagName", "hostEl", "shadowRoot", "component", "attachShadow", "mode", "getBaseHref", "styleEl", "document", "styleUrls", "getExternalStyles", "styleUrl", "linkEl", "nodeOrShadowRoot", "contentAttr", "hostAttr", "BrowserDomAdapter", "_DomAdapter", "supportsDOMEvents", "makeCurrent", "_setRootDomAdapter", "onAndCancel", "el", "evt", "listener", "options", "addEventListener", "removeEventListener", "dispatchEvent", "remove", "node", "createElement", "tagName", "doc", "getDefaultDocument", "createHtmlDocument", "document", "implementation", "createHTMLDocument", "isElementNode", "nodeType", "Node", "ELEMENT_NODE", "isShadowRoot", "DocumentFragment", "getGlobalEventTarget", "target", "window", "body", "getBaseHref", "href", "getBaseElementHref", "relativePath", "resetBaseElement", "baseElement", "getUserAgent", "navigator", "userAgent", "getCookie", "name", "_parseCookieValue", "cookie", "head", "querySelector", "getAttribute", "url", "URL", "baseURI", "pathname", "BrowserGetTestability", "addToWindow", "registry", "_global", "elem", "findInAncestors", "testability", "findTestabilityInTree", "_RuntimeError", "ngDevMode", "getAllTestabilities", "getAllRootElements", "whenAllStable", "callback", "testabilities", "count", "length", "decrement", "forEach", "whenStable", "push", "t", "getTestability", "_getDOM", "host", "parentElement", "BrowserXhr", "build", "XMLHttpRequest", "factory", "ɵfac", "Injectable", "DomEventsPlugin", "EventManagerPlugin", "constructor", "supports", "eventName", "element", "handler", "DomEventsPlugin_Factory", "__ngFactoryType__", "DOCUMENT", "Inject", "MODIFIER_KEYS", "_keyMap", "MODIFIER_KEY_GETTERS", "event", "altKey", "ctrlKey", "metaKey", "shiftKey", "KeyEventsPlugin", "parseEventName", "parsedEvent", "outsideHandler", "eventCallback", "manager", "getZone", "runOutsideAngular", "parts", "toLowerCase", "split", "domEventName", "shift", "key", "_normalizeKey", "pop", "fullKey", "codeIX", "indexOf", "splice", "modifierName", "index", "result", "matchEventFullKeyCode", "fullKeyCode", "keycode", "code", "modifierGetter", "zone", "runGuarded", "keyName", "KeyEventsPlugin_Factory", "bootstrapApplication", "rootComponent", "_internalCreateApplication", "createProvidersConfig", "createApplication", "appProviders", "BROWSER_MODULE_PROVIDERS", "providers", "platformProviders", "INTERNAL_BROWSER_PLATFORM_PROVIDERS", "provideProtractorTestingSupport", "TESTABILITY_PROVIDERS", "initDomAdapter", "errorHandler", "ErrorHandler", "_document", "_setDocument", "provide", "PLATFORM_ID", "useValue", "_PLATFORM_BROWSER_ID", "PLATFORM_INITIALIZER", "multi", "useFactory", "platformBrowser", "createPlatformFactory", "platformCore", "BROWSER_MODULE_PROVIDERS_MARKER", "InjectionToken", "_TESTABILITY_GETTER", "useClass", "_TESTABILITY", "Testability", "deps", "NgZone", "TestabilityRegistry", "_INJECTOR_SCOPE", "EVENT_MANAGER_PLUGINS", "DomRendererFactory2", "SharedStylesHost", "EventManager", "RendererFactory2", "useExisting", "XhrFactory", "BrowserModule", "providersAlreadyPresent", "inject", "optional", "skipSelf", "exports", "CommonModule", "ApplicationModule", "imports", "NgModule", "args", "Meta", "_doc", "_dom", "constructor", "_getDOM", "addTag", "tag", "forceCreation", "_getOrCreateElement", "addTags", "tags", "reduce", "result", "push", "getTag", "attrSelector", "querySelector", "getTags", "list", "querySelectorAll", "slice", "call", "updateTag", "selector", "_parseSelector", "meta", "_setMetaElementAttributes", "removeTag", "removeTagElement", "remove", "elem", "filter", "_containsAttributes", "undefined", "element", "createElement", "head", "getElementsByTagName", "appendChild", "el", "Object", "keys", "forEach", "prop", "setAttribute", "_getMetaKeyMap", "attr", "name", "every", "key", "getAttribute", "META_KEYS_MAP", "ɵfac", "Meta_Factory", "__ngFactoryType__", "ɵɵinject", "DOCUMENT", "ɵprov", "ɵɵdefineInjectable", "token", "factory", "providedIn", "ɵsetClassMetadata", "Injectable", "Inject", "httpEquiv", "Title", "getTitle", "title", "setTitle", "newTitle", "Title_Factory", "exportNgVar", "value", "COMPILED", "ng", "_global", "ChangeDetectionPerfRecord", "msPerTick", "numTicks", "AngularProfiler", "appRef", "ref", "injector", "get", "ApplicationRef", "timeChangeDetection", "config", "record", "profileName", "console", "profile", "start", "performance", "now", "tick", "end", "profileEnd", "log", "toFixed", "PROFILER_GLOBAL_NAME", "enableDebugTools", "disableDebugTools", "By", "all", "css", "debugElement", "nativeElement", "elementMatches", "directive", "type", "debugNode", "providerTokens", "indexOf", "n", "isElementNode", "matches", "msMatchesSelector", "webkitMatchesSelector", "EVENT_NAMES", "HAMMER_GESTURE_CONFIG", "InjectionToken", "ngDevMode", "HAMMER_LOADER", "HammerGestureConfig", "events", "overrides", "options", "buildHammer", "mc", "Hammer", "set", "enable", "eventName", "HammerGesturesPlugin", "EventManagerPlugin", "_config", "_injector", "loader", "_loaderPromise", "doc", "supports", "hasOwnProperty", "toLowerCase", "isCustomEvent", "window", "_console", "_Console", "warn", "addEventListener", "handler", "zone", "manager", "getZone", "runOutsideAngular", "cancelRegistration", "deregister", "then", "catch", "callback", "eventObj", "runGuarded", "on", "off", "destroy", "HammerGesturesPlugin_Factory", "Injector", "Optional", "HammerModule", "ɵɵdefineNgModule", "ɵinj", "ɵɵdefineInjector", "providers", "provide", "EVENT_MANAGER_PLUGINS", "useClass", "multi", "deps", "NgModule", "args", "DomSanitizer", "DomSanitizer_Factory", "__ngConditionalFactory__", "DomSanitizerImpl", "useExisting", "forwardRef", "sanitize", "ctx", "SecurityContext", "NONE", "HTML", "_allowSanitizationBypassAndThrow", "_unwrapSafeValue", "__sanitizeHtml", "String", "toString", "STYLE", "SCRIPT", "_RuntimeError", "URL", "__sanitizeUrl", "RESOURCE_URL", "_XSS_SECURITY_URL", "bypassSecurityTrustHtml", "_bypassSanitizationTrustHtml", "bypassSecurityTrustStyle", "_bypassSanitizationTrustStyle", "bypassSecurityTrustScript", "_bypassSanitizationTrustScript", "bypassSecurityTrustUrl", "_bypassSanitizationTrustUrl", "bypassSecurityTrustResourceUrl", "_bypassSanitizationTrustResourceUrl", "DomSanitizerImpl_Factory", "HydrationFeatureKind", "hydrationFeature", "ɵkind", "ɵproviders", "ɵoptions", "withNoHttpTransferCache", "NoHttpTransferCache", "withHttpTransferCacheOptions", "HttpTransferCacheOptions", "_withHttpTransferCache", "withI18nSupport", "I18nSupport", "_withI18nSupport", "withEventReplay", "EventReplay", "_withEventReplay", "withIncrementalHydration", "IncrementalHydration", "_withIncrementalHydration", "provideZoneJsCompatibilityDetector", "ENVIRONMENT_INITIALIZER", "useValue", "ngZone", "inject", "NgZone", "isZoneless", "_ZONELESS_ENABLED", "message", "_formatRuntimeError", "provideClientHydration", "features", "featuresKind", "Set", "add", "length", "hasHttpTransferCacheOptions", "has", "Error", "makeEnvironmentProviders", "_withDomHydration", "VERSION", "Version"]
}
