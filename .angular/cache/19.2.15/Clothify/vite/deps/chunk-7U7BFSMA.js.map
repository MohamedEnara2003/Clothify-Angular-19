{
  "version": 3,
  "sources": ["../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/common/src/dom_tokens.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/common/src/cookie.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/common/src/platform_id.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/common/src/xhr.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * A DI Token representing the main rendering context.\n * In a browser and SSR this is the DOM Document.\n * When using SSR, that document is created by [Domino](https://github.com/angular/domino).\n *\n * @publicApi\n */\nexport const DOCUMENT = new InjectionToken<Document>(ngDevMode ? 'DocumentToken' : '');\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nexport function parseCookieValue(cookieStr: string, name: string): string | null {\n  name = encodeURIComponent(name);\n  for (const cookie of cookieStr.split(';')) {\n    const eqIndex = cookie.indexOf('=');\n    const [cookieName, cookieValue]: string[] =\n      eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)];\n    if (cookieName.trim() === name) {\n      return decodeURIComponent(cookieValue);\n    }\n  }\n  return null;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nexport const PLATFORM_BROWSER_ID = 'browser';\nexport const PLATFORM_SERVER_ID = 'server';\n\n/**\n * Returns whether a platform id represents a browser platform.\n * @publicApi\n */\nexport function isPlatformBrowser(platformId: Object): boolean {\n  return platformId === PLATFORM_BROWSER_ID;\n}\n\n/**\n * Returns whether a platform id represents a server platform.\n * @publicApi\n */\nexport function isPlatformServer(platformId: Object): boolean {\n  return platformId === PLATFORM_SERVER_ID;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n */\nexport abstract class XhrFactory {\n  abstract build(): XMLHttpRequest;\n}\n"],
  "mappings": ";;;;;AAiBa,IAAAA,WAAW,IAAIC,eAAyBC,YAAY,kBAAkB,EAAE;;;ACTrE,SAAAC,iBAAiBC,WAAmBC,MAAY;AAC9DA,SAAOC,mBAAmBD,IAAI;AAC9B,aAAWE,UAAUH,UAAUI,MAAM,GAAG,GAAG;AACzC,UAAMC,UAAUF,OAAOG,QAAQ,GAAG;AAClC,UAAM,CAACC,YAAYC,WAAW,IAC5BH,WAAW,KAAK,CAACF,QAAQ,EAAE,IAAI,CAACA,OAAOM,MAAM,GAAGJ,OAAO,GAAGF,OAAOM,MAAMJ,UAAU,CAAC,CAAC;AACrF,QAAIE,WAAWG,KAAI,MAAOT,MAAM;AAC9B,aAAOU,mBAAmBH,WAAW;;;AAGzC,SAAO;AACT;ACXO,IAAMI,sBAAsB;AAC5B,IAAMC,qBAAqB;AAM5B,SAAUC,kBAAkBC,YAAkB;AAClD,SAAOA,eAAeH;AACxB;AAMM,SAAUI,iBAAiBD,YAAkB;AACjD,SAAOA,eAAeF;AACxB;ICZsBI,mBAAU;AAAA;",
  "names": ["DOCUMENT", "InjectionToken", "ngDevMode", "parseCookieValue", "cookieStr", "name", "encodeURIComponent", "cookie", "split", "eqIndex", "indexOf", "cookieName", "cookieValue", "slice", "trim", "decodeURIComponent", "PLATFORM_BROWSER_ID", "PLATFORM_SERVER_ID", "isPlatformBrowser", "platformId", "isPlatformServer", "XhrFactory"]
}
