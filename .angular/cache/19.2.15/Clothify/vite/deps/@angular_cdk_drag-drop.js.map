{
  "version": 3,
  "sources": ["../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/platform/features/shadow-dom.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/a11y/fake-event-detection.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/coercion/number-property.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/coercion/element.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/platform/features/backwards-compatibility.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/private/style-loader.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/platform/platform.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/bidi/dir-document-token.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/bidi/directionality.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/platform/features/scrolling.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/bidi/dir.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/bidi/bidi-module.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/collections/data-source.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/collections/array-data-source.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/collections/view-repeater.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/collections/recycle-view-repeater-strategy.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/scrolling/virtual-scroll-strategy.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/scrolling/fixed-size-virtual-scroll.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/scrolling/scroll-dispatcher.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/scrolling/scrollable.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/scrolling/viewport-ruler.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/scrolling/virtual-scrollable.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/scrolling/virtual-scroll-viewport.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/scrolling/virtual-scroll-viewport.html", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/scrolling/virtual-for-of.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/scrolling/virtual-scrollable-element.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/scrolling/virtual-scrollable-window.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/scrolling/scrolling-module.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/a11y/id-generator.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/coercion/array.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/drag-drop/dom/clone-node.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/drag-drop/dom/dom-rect.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/drag-drop/dom/parent-position-tracker.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/drag-drop/dom/root-node.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/drag-drop/dom/styling.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/drag-drop/dom/transition-duration.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/drag-drop/preview-ref.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/drag-drop/drag-ref.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/drag-drop/drag-utils.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/drag-drop/sorting/single-axis-sort-strategy.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/drag-drop/sorting/mixed-sort-strategy.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/drag-drop/drop-list-ref.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/drag-drop/drag-drop-registry.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/drag-drop/drag-drop.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/drag-drop/drag-parent.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/drag-drop/directives/assertions.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/drag-drop/directives/drag-handle.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/drag-drop/directives/config.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/drag-drop/directives/drag.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/drag-drop/directives/drop-list-group.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/drag-drop/directives/drop-list.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/drag-drop/directives/drag-preview.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/drag-drop/directives/drag-placeholder.ts", "../../../../../../../darwin_arm64-fastbuild-ST-46c76129e412/bin/src/cdk/drag-drop/drag-drop-module.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nlet shadowDomIsSupported: boolean;\n\n/** Checks whether the user's browser support Shadow DOM. */\nexport function _supportsShadowDom(): boolean {\n  if (shadowDomIsSupported == null) {\n    const head = typeof document !== 'undefined' ? document.head : null;\n    shadowDomIsSupported = !!(head && ((head as any).createShadowRoot || head.attachShadow));\n  }\n\n  return shadowDomIsSupported;\n}\n\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nexport function _getShadowRoot(element: HTMLElement): ShadowRoot | null {\n  if (_supportsShadowDom()) {\n    const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n    // Note that this should be caught by `_supportsShadowDom`, but some\n    // teams have been able to hit this code path on unsupported browsers.\n    if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {\n      return rootNode;\n    }\n  }\n\n  return null;\n}\n\n/**\n * Gets the currently-focused element on the page while\n * also piercing through Shadow DOM boundaries.\n */\nexport function _getFocusedElementPierceShadowDom(): HTMLElement | null {\n  let activeElement =\n    typeof document !== 'undefined' && document\n      ? (document.activeElement as HTMLElement | null)\n      : null;\n\n  while (activeElement && activeElement.shadowRoot) {\n    const newActiveElement = activeElement.shadowRoot.activeElement as HTMLElement | null;\n    if (newActiveElement === activeElement) {\n      break;\n    } else {\n      activeElement = newActiveElement;\n    }\n  }\n\n  return activeElement;\n}\n\n/** Gets the target of an event while accounting for Shadow DOM. */\nexport function _getEventTarget<T extends EventTarget>(event: Event): T | null {\n  // If an event is bound outside the Shadow DOM, the `event.target` will\n  // point to the shadow root so we have to use `composedPath` instead.\n  return (event.composedPath ? event.composedPath()[0] : event.target) as T | null;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/** Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. */\nexport function isFakeMousedownFromScreenReader(event: MouseEvent): boolean {\n  // Some screen readers will dispatch a fake `mousedown` event when pressing enter or space on\n  // a clickable element. We can distinguish these events when `event.buttons` is zero, or\n  // `event.detail` is zero depending on the browser:\n  // - `event.buttons` works on Firefox, but fails on Chrome.\n  // - `detail` works on Chrome, but fails on Firefox.\n  return event.buttons === 0 || event.detail === 0;\n}\n\n/** Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. */\nexport function isFakeTouchstartFromScreenReader(event: TouchEvent): boolean {\n  const touch: Touch | undefined =\n    (event.touches && event.touches[0]) || (event.changedTouches && event.changedTouches[0]);\n\n  // A fake `touchstart` can be distinguished from a real one by looking at the `identifier`\n  // which is typically >= 0 on a real device versus -1 from a screen reader. Just to be safe,\n  // we can also look at `radiusX` and `radiusY`. This behavior was observed against a Windows 10\n  // device with a touch screen running NVDA v2020.4 and Firefox 85 or Chrome 88.\n  return (\n    !!touch &&\n    touch.identifier === -1 &&\n    (touch.radiusX == null || touch.radiusX === 1) &&\n    (touch.radiusY == null || touch.radiusY === 1)\n  );\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * Type describing the allowed values for a number input\n * @docs-private\n */\nexport type NumberInput = string | number | null | undefined;\n\n/** Coerces a data-bound value (typically a string) to a number. */\nexport function coerceNumberProperty(value: any): number;\nexport function coerceNumberProperty<D>(value: any, fallback: D): number | D;\nexport function coerceNumberProperty(value: any, fallbackValue = 0) {\n  if (_isNumberValue(value)) {\n    return Number(value);\n  }\n  return arguments.length === 2 ? fallbackValue : 0;\n}\n\n/**\n * Whether the provided value is considered a number.\n * @docs-private\n */\nexport function _isNumberValue(value: any): boolean {\n  // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n  // and other non-number values as NaN, where Number just uses 0) but it considers the string\n  // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n  return !isNaN(parseFloat(value as any)) && !isNaN(Number(value));\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ElementRef} from '@angular/core';\n\n/**\n * Coerces an ElementRef or an Element into an element.\n * Useful for APIs that can accept either a ref or the native element itself.\n */\nexport function coerceElement<T>(elementOrRef: ElementRef<T> | T): T {\n  return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Renderer2, VERSION} from '@angular/core';\n\n// TODO(crisbeto): replace interface with the one from core when making breaking changes for v20.\n/** Options when binding events manually. */\nexport interface _ListenerOptions {\n  capture?: boolean;\n  once?: boolean;\n  passive?: boolean;\n}\n\n// TODO(crisbeto): remove this function when making breaking changes for v20.\n/**\n * Binds an event listener with specific options in a backwards-compatible way.\n * This function is necessary, because `Renderer2.listen` only supports listener options\n * after 19.1 and during the v19 period we support any 19.x version.\n * @docs-private\n */\nexport function _bindEventWithOptions(\n  renderer: Renderer2,\n  target: EventTarget,\n  eventName: string,\n  callback: (event: any) => boolean | void,\n  options: _ListenerOptions,\n): () => void {\n  const major = parseInt(VERSION.major);\n  const minor = parseInt(VERSION.minor);\n\n  // Event options in `listen` are only supported in 19.1 and beyond.\n  // We also allow 0.0.x, because that indicates a build at HEAD.\n  if (major > 19 || (major === 19 && minor > 0) || (major === 0 && minor === 0)) {\n    return renderer.listen(target, eventName, callback, options);\n  }\n\n  target.addEventListener(eventName, callback, options);\n\n  return () => {\n    target.removeEventListener(eventName, callback, options);\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ApplicationRef,\n  ComponentRef,\n  createComponent,\n  EnvironmentInjector,\n  inject,\n  Injectable,\n  Injector,\n  Type,\n} from '@angular/core';\n\n/** Apps in which we've loaded styles. */\nconst appsWithLoaders = new WeakMap<\n  ApplicationRef,\n  {\n    /** Style loaders that have been added. */\n    loaders: Set<Type<unknown>>;\n\n    /** References to the instantiated loaders. */\n    refs: ComponentRef<unknown>[];\n  }\n>();\n\n/**\n * Service that loads structural styles dynamically\n * and ensures that they're only loaded once per app.\n */\n@Injectable({providedIn: 'root'})\nexport class _CdkPrivateStyleLoader {\n  private _appRef: ApplicationRef | undefined;\n  private _injector = inject(Injector);\n  private _environmentInjector = inject(EnvironmentInjector);\n\n  /**\n   * Loads a set of styles.\n   * @param loader Component which will be instantiated to load the styles.\n   */\n  load(loader: Type<unknown>): void {\n    // Resolve the app ref lazily to avoid circular dependency errors if this is called too early.\n    const appRef = (this._appRef = this._appRef || this._injector.get(ApplicationRef));\n    let data = appsWithLoaders.get(appRef);\n\n    // If we haven't loaded for this app before, we have to initialize it.\n    if (!data) {\n      data = {loaders: new Set(), refs: []};\n      appsWithLoaders.set(appRef, data);\n\n      // When the app is destroyed, we need to clean up all the related loaders.\n      appRef.onDestroy(() => {\n        appsWithLoaders.get(appRef)?.refs.forEach(ref => ref.destroy());\n        appsWithLoaders.delete(appRef);\n      });\n    }\n\n    // If the loader hasn't been loaded before, we need to instatiate it.\n    if (!data.loaders.has(loader)) {\n      data.loaders.add(loader);\n      data.refs.push(createComponent(loader, {environmentInjector: this._environmentInjector}));\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {inject, Injectable, PLATFORM_ID} from '@angular/core';\nimport {isPlatformBrowser} from '@angular/common';\n\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nlet hasV8BreakIterator: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n  hasV8BreakIterator = typeof Intl !== 'undefined' && (Intl as any).v8BreakIterator;\n} catch {\n  hasV8BreakIterator = false;\n}\n\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\n@Injectable({providedIn: 'root'})\nexport class Platform {\n  private _platformId = inject(PLATFORM_ID);\n\n  // We want to use the Angular platform check because if the Document is shimmed\n  // without the navigator, the following checks will fail. This is preferred because\n  // sometimes the Document may be shimmed without the user's knowledge or intention\n  /** Whether the Angular application is being rendered in the browser. */\n  isBrowser: boolean = this._platformId\n    ? isPlatformBrowser(this._platformId)\n    : typeof document === 'object' && !!document;\n\n  /** Whether the current browser is Microsoft Edge. */\n  EDGE: boolean = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n\n  /** Whether the current rendering engine is Microsoft Trident. */\n  TRIDENT: boolean = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n\n  // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n  /** Whether the current rendering engine is Blink. */\n  BLINK: boolean =\n    this.isBrowser &&\n    !!((window as any).chrome || hasV8BreakIterator) &&\n    typeof CSS !== 'undefined' &&\n    !this.EDGE &&\n    !this.TRIDENT;\n\n  // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n  // ensure that Webkit runs standalone and is not used as another engine's base.\n  /** Whether the current rendering engine is WebKit. */\n  WEBKIT: boolean =\n    this.isBrowser &&\n    /AppleWebKit/i.test(navigator.userAgent) &&\n    !this.BLINK &&\n    !this.EDGE &&\n    !this.TRIDENT;\n\n  /** Whether the current platform is Apple iOS. */\n  IOS: boolean =\n    this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window);\n\n  // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n  // them self as Gecko-like browsers and modify the userAgent's according to that.\n  // Since we only cover one explicit Firefox case, we can simply check for Firefox\n  // instead of having an unstable check for Gecko.\n  /** Whether the current browser is Firefox. */\n  FIREFOX: boolean = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n\n  /** Whether the current platform is Android. */\n  // Trident on mobile adds the android platform to the userAgent to trick detections.\n  ANDROID: boolean = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n\n  // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n  // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n  // Safari browser should also use Webkit as its layout engine.\n  /** Whether the current browser is Safari. */\n  SAFARI: boolean = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n\n  /** Backwards-compatible constructor. */\n  constructor(..._args: unknown[]);\n\n  constructor() {}\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {inject, InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-browser because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * @docs-private\n */\nexport const DIR_DOCUMENT = new InjectionToken<Document>('cdk-dir-doc', {\n  providedIn: 'root',\n  factory: DIR_DOCUMENT_FACTORY,\n});\n\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nexport function DIR_DOCUMENT_FACTORY(): Document {\n  return inject(DOCUMENT);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {EventEmitter, Injectable, OnDestroy, inject} from '@angular/core';\nimport {DIR_DOCUMENT} from './dir-document-token';\n\nexport type Direction = 'ltr' | 'rtl';\n\n/** Regex that matches locales with an RTL script. Taken from `goog.i18n.bidi.isRtlLanguage`. */\nconst RTL_LOCALE_PATTERN =\n  /^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;\n\n/** Resolves a string value to a specific direction. */\nexport function _resolveDirectionality(rawValue: string): Direction {\n  const value = rawValue?.toLowerCase() || '';\n\n  if (value === 'auto' && typeof navigator !== 'undefined' && navigator?.language) {\n    return RTL_LOCALE_PATTERN.test(navigator.language) ? 'rtl' : 'ltr';\n  }\n\n  return value === 'rtl' ? 'rtl' : 'ltr';\n}\n\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\n@Injectable({providedIn: 'root'})\nexport class Directionality implements OnDestroy {\n  /** The current 'ltr' or 'rtl' value. */\n  readonly value: Direction = 'ltr';\n\n  /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n  readonly change = new EventEmitter<Direction>();\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const _document = inject(DIR_DOCUMENT, {optional: true});\n\n    if (_document) {\n      const bodyDir = _document.body ? _document.body.dir : null;\n      const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n      this.value = _resolveDirectionality(bodyDir || htmlDir || 'ltr');\n    }\n  }\n\n  ngOnDestroy() {\n    this.change.complete();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/** The possible ways the browser may handle the horizontal scroll axis in RTL languages. */\nexport enum RtlScrollAxisType {\n  /**\n   * scrollLeft is 0 when scrolled all the way left and (scrollWidth - clientWidth) when scrolled\n   * all the way right.\n   */\n  NORMAL,\n  /**\n   * scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n   * all the way right.\n   */\n  NEGATED,\n  /**\n   * scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n   * all the way right.\n   */\n  INVERTED,\n}\n\n/** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */\nlet rtlScrollAxisType: RtlScrollAxisType | undefined;\n\n/** Cached result of the check that indicates whether the browser supports scroll behaviors. */\nlet scrollBehaviorSupported: boolean | undefined;\n\n/** Check whether the browser supports scroll behaviors. */\nexport function supportsScrollBehavior(): boolean {\n  if (scrollBehaviorSupported == null) {\n    // If we're not in the browser, it can't be supported. Also check for `Element`, because\n    // some projects stub out the global `document` during SSR which can throw us off.\n    if (typeof document !== 'object' || !document || typeof Element !== 'function' || !Element) {\n      scrollBehaviorSupported = false;\n      return scrollBehaviorSupported;\n    }\n\n    // If the element can have a `scrollBehavior` style, we can be sure that it's supported.\n    if ('scrollBehavior' in document.documentElement!.style) {\n      scrollBehaviorSupported = true;\n    } else {\n      // At this point we have 3 possibilities: `scrollTo` isn't supported at all, it's\n      // supported but it doesn't handle scroll behavior, or it has been polyfilled.\n      const scrollToFunction: Function | undefined = Element.prototype.scrollTo;\n\n      if (scrollToFunction) {\n        // We can detect if the function has been polyfilled by calling `toString` on it. Native\n        // functions are obfuscated using `[native code]`, whereas if it was overwritten we'd get\n        // the actual function source. Via https://davidwalsh.name/detect-native-function. Consider\n        // polyfilled functions as supporting scroll behavior.\n        scrollBehaviorSupported = !/\\{\\s*\\[native code\\]\\s*\\}/.test(scrollToFunction.toString());\n      } else {\n        scrollBehaviorSupported = false;\n      }\n    }\n  }\n\n  return scrollBehaviorSupported;\n}\n\n/**\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\n */\nexport function getRtlScrollAxisType(): RtlScrollAxisType {\n  // We can't check unless we're on the browser. Just assume 'normal' if we're not.\n  if (typeof document !== 'object' || !document) {\n    return RtlScrollAxisType.NORMAL;\n  }\n\n  if (rtlScrollAxisType == null) {\n    // Create a 1px wide scrolling container and a 2px wide content element.\n    const scrollContainer = document.createElement('div');\n    const containerStyle = scrollContainer.style;\n    scrollContainer.dir = 'rtl';\n    containerStyle.width = '1px';\n    containerStyle.overflow = 'auto';\n    containerStyle.visibility = 'hidden';\n    containerStyle.pointerEvents = 'none';\n    containerStyle.position = 'absolute';\n\n    const content = document.createElement('div');\n    const contentStyle = content.style;\n    contentStyle.width = '2px';\n    contentStyle.height = '1px';\n\n    scrollContainer.appendChild(content);\n    document.body.appendChild(scrollContainer);\n\n    rtlScrollAxisType = RtlScrollAxisType.NORMAL;\n\n    // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\n    // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\n    // dealing with one of the other two types of browsers.\n    if (scrollContainer.scrollLeft === 0) {\n      // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\n      // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\n      // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\n      // return 0 when we read it again.\n      scrollContainer.scrollLeft = 1;\n      rtlScrollAxisType =\n        scrollContainer.scrollLeft === 0 ? RtlScrollAxisType.NEGATED : RtlScrollAxisType.INVERTED;\n    }\n\n    scrollContainer.remove();\n  }\n  return rtlScrollAxisType;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, Output, Input, EventEmitter, AfterContentInit, OnDestroy} from '@angular/core';\n\nimport {Direction, Directionality, _resolveDirectionality} from './directionality';\n\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\n@Directive({\n  selector: '[dir]',\n  providers: [{provide: Directionality, useExisting: Dir}],\n  host: {'[attr.dir]': '_rawDir'},\n  exportAs: 'dir',\n})\nexport class Dir implements Directionality, AfterContentInit, OnDestroy {\n  /** Normalized direction that accounts for invalid/unsupported values. */\n  private _dir: Direction = 'ltr';\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Direction as passed in by the consumer. */\n  _rawDir: string;\n\n  /** Event emitted when the direction changes. */\n  @Output('dirChange') readonly change = new EventEmitter<Direction>();\n\n  /** @docs-private */\n  @Input()\n  get dir(): Direction {\n    return this._dir;\n  }\n  set dir(value: Direction | 'auto') {\n    const previousValue = this._dir;\n\n    // Note: `_resolveDirectionality` resolves the language based on the browser's language,\n    // whereas the browser does it based on the content of the element. Since doing so based\n    // on the content can be expensive, for now we're doing the simpler matching.\n    this._dir = _resolveDirectionality(value);\n    this._rawDir = value;\n\n    if (previousValue !== this._dir && this._isInitialized) {\n      this.change.emit(this._dir);\n    }\n  }\n\n  /** Current layout direction of the element. */\n  get value(): Direction {\n    return this.dir;\n  }\n\n  /** Initialize once default value has been set. */\n  ngAfterContentInit() {\n    this._isInitialized = true;\n  }\n\n  ngOnDestroy() {\n    this.change.complete();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {Dir} from './dir';\n\n@NgModule({\n  imports: [Dir],\n  exports: [Dir],\n})\nexport class BidiModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ConnectableObservable, Observable} from 'rxjs';\nimport {CollectionViewer} from './collection-viewer';\n\nexport abstract class DataSource<T> {\n  /**\n   * Connects a collection viewer (such as a data-table) to this data source. Note that\n   * the stream provided will be accessed during change detection and should not directly change\n   * values that are bound in template views.\n   * @param collectionViewer The component that exposes a view over the data provided by this\n   *     data source.\n   * @returns Observable that emits a new value when the data changes.\n   */\n  abstract connect(collectionViewer: CollectionViewer): Observable<readonly T[]>;\n\n  /**\n   * Disconnects a collection viewer (such as a data-table) from this data source. Can be used\n   * to perform any clean-up or tear-down operations when a view is being destroyed.\n   *\n   * @param collectionViewer The component that exposes a view over the data provided by this\n   *     data source.\n   */\n  abstract disconnect(collectionViewer: CollectionViewer): void;\n}\n\n/** Checks whether an object is a data source. */\nexport function isDataSource(value: any): value is DataSource<any> {\n  // Check if the value is a DataSource by observing if it has a connect function. Cannot\n  // be checked as an `instanceof DataSource` since people could create their own sources\n  // that match the interface, but don't extend DataSource. We also can't use `isObservable`\n  // here, because of some internal apps.\n  return value && typeof value.connect === 'function' && !(value instanceof ConnectableObservable);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Observable, isObservable, of as observableOf} from 'rxjs';\nimport {DataSource} from './data-source';\n\n/** DataSource wrapper for a native array. */\nexport class ArrayDataSource<T> extends DataSource<T> {\n  constructor(private _data: readonly T[] | Observable<readonly T[]>) {\n    super();\n  }\n\n  connect(): Observable<readonly T[]> {\n    return isObservable(this._data) ? this._data : observableOf(this._data);\n  }\n\n  disconnect() {}\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  InjectionToken,\n  IterableChangeRecord,\n  IterableChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * The context for an embedded view in the repeater's view container.\n *\n * @template T The type for the embedded view's $implicit property.\n */\nexport interface _ViewRepeaterItemContext<T> {\n  $implicit?: T;\n}\n\n/**\n * The arguments needed to construct an embedded view for an item in a view\n * container.\n *\n * @template C The type for the context passed to each embedded view.\n */\nexport interface _ViewRepeaterItemInsertArgs<C> {\n  templateRef: TemplateRef<C>;\n  context?: C;\n  index?: number;\n}\n\n/**\n * A factory that derives the embedded view context for an item in a view\n * container.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport type _ViewRepeaterItemContextFactory<T, R, C extends _ViewRepeaterItemContext<T>> = (\n  record: IterableChangeRecord<R>,\n  adjustedPreviousIndex: number | null,\n  currentIndex: number | null,\n) => _ViewRepeaterItemInsertArgs<C>;\n\n/**\n * Extracts the value of an item from an {@link IterableChangeRecord}.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n */\nexport type _ViewRepeaterItemValueResolver<T, R> = (record: IterableChangeRecord<R>) => T;\n\n/** Indicates how a view was changed by a {@link _ViewRepeater}. */\nexport enum _ViewRepeaterOperation {\n  /** The content of an existing view was replaced with another item. */\n  REPLACED,\n  /** A new view was created with `createEmbeddedView`. */\n  INSERTED,\n  /** The position of a view changed, but the content remains the same. */\n  MOVED,\n  /** A view was detached from the view container. */\n  REMOVED,\n}\n\n/**\n * Meta data describing the state of a view after it was updated by a\n * {@link _ViewRepeater}.\n *\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport interface _ViewRepeaterItemChange<R, C> {\n  /** The view's context after it was changed. */\n  context?: C;\n  /** Indicates how the view was changed. */\n  operation: _ViewRepeaterOperation;\n  /** The view's corresponding change record. */\n  record: IterableChangeRecord<R>;\n}\n\n/**\n * Type for a callback to be executed after a view has changed.\n *\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport type _ViewRepeaterItemChanged<R, C> = (change: _ViewRepeaterItemChange<R, C>) => void;\n\n/**\n * Describes a strategy for rendering items in a {@link ViewContainerRef}.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport interface _ViewRepeater<T, R, C extends _ViewRepeaterItemContext<T>> {\n  applyChanges(\n    changes: IterableChanges<R>,\n    viewContainerRef: ViewContainerRef,\n    itemContextFactory: _ViewRepeaterItemContextFactory<T, R, C>,\n    itemValueResolver: _ViewRepeaterItemValueResolver<T, R>,\n    itemViewChanged?: _ViewRepeaterItemChanged<R, C>,\n  ): void;\n\n  detach(): void;\n}\n\n/**\n * Injection token for {@link _ViewRepeater}. This token is for use by Angular Material only.\n * @docs-private\n */\nexport const _VIEW_REPEATER_STRATEGY = new InjectionToken<\n  _ViewRepeater<unknown, unknown, _ViewRepeaterItemContext<unknown>>\n>('_ViewRepeater');\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  EmbeddedViewRef,\n  IterableChangeRecord,\n  IterableChanges,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  _ViewRepeater,\n  _ViewRepeaterItemChanged,\n  _ViewRepeaterItemContext,\n  _ViewRepeaterItemContextFactory,\n  _ViewRepeaterItemInsertArgs,\n  _ViewRepeaterItemValueResolver,\n  _ViewRepeaterOperation,\n} from './view-repeater';\n\n/**\n * A repeater that caches views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will reuse one of the cached views instead of creating a new\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\n * inserts.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport class _RecycleViewRepeaterStrategy<T, R, C extends _ViewRepeaterItemContext<T>>\n  implements _ViewRepeater<T, R, C>\n{\n  /**\n   * The size of the cache used to store unused views.\n   * Setting the cache size to `0` will disable caching. Defaults to 20 views.\n   */\n  viewCacheSize: number = 20;\n\n  /**\n   * View cache that stores embedded view instances that have been previously stamped out,\n   * but don't are not currently rendered. The view repeater will reuse these views rather than\n   * creating brand new ones.\n   *\n   * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\n   */\n  private _viewCache: EmbeddedViewRef<C>[] = [];\n\n  /** Apply changes to the DOM. */\n  applyChanges(\n    changes: IterableChanges<R>,\n    viewContainerRef: ViewContainerRef,\n    itemContextFactory: _ViewRepeaterItemContextFactory<T, R, C>,\n    itemValueResolver: _ViewRepeaterItemValueResolver<T, R>,\n    itemViewChanged?: _ViewRepeaterItemChanged<R, C>,\n  ) {\n    // Rearrange the views to put them in the right location.\n    changes.forEachOperation(\n      (\n        record: IterableChangeRecord<R>,\n        adjustedPreviousIndex: number | null,\n        currentIndex: number | null,\n      ) => {\n        let view: EmbeddedViewRef<C> | undefined;\n        let operation: _ViewRepeaterOperation;\n        if (record.previousIndex == null) {\n          // Item added.\n          const viewArgsFactory = () =>\n            itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n          view = this._insertView(\n            viewArgsFactory,\n            currentIndex!,\n            viewContainerRef,\n            itemValueResolver(record),\n          );\n          operation = view ? _ViewRepeaterOperation.INSERTED : _ViewRepeaterOperation.REPLACED;\n        } else if (currentIndex == null) {\n          // Item removed.\n          this._detachAndCacheView(adjustedPreviousIndex!, viewContainerRef);\n          operation = _ViewRepeaterOperation.REMOVED;\n        } else {\n          // Item moved.\n          view = this._moveView(\n            adjustedPreviousIndex!,\n            currentIndex!,\n            viewContainerRef,\n            itemValueResolver(record),\n          );\n          operation = _ViewRepeaterOperation.MOVED;\n        }\n\n        if (itemViewChanged) {\n          itemViewChanged({\n            context: view?.context,\n            operation,\n            record,\n          });\n        }\n      },\n    );\n  }\n\n  detach() {\n    for (const view of this._viewCache) {\n      view.destroy();\n    }\n    this._viewCache = [];\n  }\n\n  /**\n   * Inserts a view for a new item, either from the cache or by creating a new\n   * one. Returns `undefined` if the item was inserted into a cached view.\n   */\n  private _insertView(\n    viewArgsFactory: () => _ViewRepeaterItemInsertArgs<C>,\n    currentIndex: number,\n    viewContainerRef: ViewContainerRef,\n    value: T,\n  ): EmbeddedViewRef<C> | undefined {\n    const cachedView = this._insertViewFromCache(currentIndex!, viewContainerRef);\n    if (cachedView) {\n      cachedView.context.$implicit = value;\n      return undefined;\n    }\n\n    const viewArgs = viewArgsFactory();\n    return viewContainerRef.createEmbeddedView(\n      viewArgs.templateRef,\n      viewArgs.context,\n      viewArgs.index,\n    );\n  }\n\n  /** Detaches the view at the given index and inserts into the view cache. */\n  private _detachAndCacheView(index: number, viewContainerRef: ViewContainerRef) {\n    const detachedView = viewContainerRef.detach(index) as EmbeddedViewRef<C>;\n    this._maybeCacheView(detachedView, viewContainerRef);\n  }\n\n  /** Moves view at the previous index to the current index. */\n  private _moveView(\n    adjustedPreviousIndex: number,\n    currentIndex: number,\n    viewContainerRef: ViewContainerRef,\n    value: T,\n  ): EmbeddedViewRef<C> {\n    const view = viewContainerRef.get(adjustedPreviousIndex!) as EmbeddedViewRef<C>;\n    viewContainerRef.move(view, currentIndex);\n    view.context.$implicit = value;\n    return view;\n  }\n\n  /**\n   * Cache the given detached view. If the cache is full, the view will be\n   * destroyed.\n   */\n  private _maybeCacheView(view: EmbeddedViewRef<C>, viewContainerRef: ViewContainerRef) {\n    if (this._viewCache.length < this.viewCacheSize) {\n      this._viewCache.push(view);\n    } else {\n      const index = viewContainerRef.indexOf(view);\n\n      // The host component could remove views from the container outside of\n      // the view repeater. It's unlikely this will occur, but just in case,\n      // destroy the view on its own, otherwise destroy it through the\n      // container to ensure that all the references are removed.\n      if (index === -1) {\n        view.destroy();\n      } else {\n        viewContainerRef.remove(index);\n      }\n    }\n  }\n\n  /** Inserts a recycled view from the cache at the given index. */\n  private _insertViewFromCache(\n    index: number,\n    viewContainerRef: ViewContainerRef,\n  ): EmbeddedViewRef<C> | null {\n    const cachedView = this._viewCache.pop();\n    if (cachedView) {\n      viewContainerRef.insert(cachedView, index);\n    }\n    return cachedView || null;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport type {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n/** The injection token used to specify the virtual scrolling strategy. */\nexport const VIRTUAL_SCROLL_STRATEGY = new InjectionToken<VirtualScrollStrategy>(\n  'VIRTUAL_SCROLL_STRATEGY',\n);\n\n/** A strategy that dictates which items should be rendered in the viewport. */\nexport interface VirtualScrollStrategy {\n  /** Emits when the index of the first element visible in the viewport changes. */\n  scrolledIndexChange: Observable<number>;\n\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param viewport The viewport to attach this strategy to.\n   */\n  attach(viewport: CdkVirtualScrollViewport): void;\n\n  /** Detaches this scroll strategy from the currently attached viewport. */\n  detach(): void;\n\n  /** Called when the viewport is scrolled (debounced using requestAnimationFrame). */\n  onContentScrolled(): void;\n\n  /** Called when the length of the data changes. */\n  onDataLengthChanged(): void;\n\n  /** Called when the range of items rendered in the DOM has changed. */\n  onContentRendered(): void;\n\n  /** Called when the offset of the rendered items changed. */\n  onRenderedOffsetChanged(): void;\n\n  /**\n   * Scroll to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling.\n   */\n  scrollToIndex(index: number, behavior: ScrollBehavior): void;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {coerceNumberProperty, NumberInput} from '../coercion';\nimport {Directive, forwardRef, Input, OnChanges} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {distinctUntilChanged} from 'rxjs/operators';\nimport {VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy} from './virtual-scroll-strategy';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nexport class FixedSizeVirtualScrollStrategy implements VirtualScrollStrategy {\n  private readonly _scrolledIndexChange = new Subject<number>();\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  scrolledIndexChange: Observable<number> = this._scrolledIndexChange.pipe(distinctUntilChanged());\n\n  /** The attached viewport. */\n  private _viewport: CdkVirtualScrollViewport | null = null;\n\n  /** The size of the items in the virtually scrolling list. */\n  private _itemSize: number;\n\n  /** The minimum amount of buffer rendered beyond the viewport (in pixels). */\n  private _minBufferPx: number;\n\n  /** The number of buffer items to render beyond the edge of the viewport (in pixels). */\n  private _maxBufferPx: number;\n\n  /**\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  constructor(itemSize: number, minBufferPx: number, maxBufferPx: number) {\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n  }\n\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param viewport The viewport to attach this strategy to.\n   */\n  attach(viewport: CdkVirtualScrollViewport) {\n    this._viewport = viewport;\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** Detaches this scroll strategy from the currently attached viewport. */\n  detach() {\n    this._scrolledIndexChange.complete();\n    this._viewport = null;\n  }\n\n  /**\n   * Update the item size and buffer size.\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  updateItemAndBufferSize(itemSize: number, minBufferPx: number, maxBufferPx: number) {\n    if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n    }\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onContentScrolled() {\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onDataLengthChanged() {\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onContentRendered() {\n    /* no-op */\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onRenderedOffsetChanged() {\n    /* no-op */\n  }\n\n  /**\n   * Scroll to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling.\n   */\n  scrollToIndex(index: number, behavior: ScrollBehavior): void {\n    if (this._viewport) {\n      this._viewport.scrollToOffset(index * this._itemSize, behavior);\n    }\n  }\n\n  /** Update the viewport's total content size. */\n  private _updateTotalContentSize() {\n    if (!this._viewport) {\n      return;\n    }\n\n    this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n  }\n\n  /** Update the viewport's rendered range. */\n  private _updateRenderedRange() {\n    if (!this._viewport) {\n      return;\n    }\n\n    const renderedRange = this._viewport.getRenderedRange();\n    const newRange = {start: renderedRange.start, end: renderedRange.end};\n    const viewportSize = this._viewport.getViewportSize();\n    const dataLength = this._viewport.getDataLength();\n    let scrollOffset = this._viewport.measureScrollOffset();\n    // Prevent NaN as result when dividing by zero.\n    let firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0;\n\n    // If user scrolls to the bottom of the list and data changes to a smaller list\n    if (newRange.end > dataLength) {\n      // We have to recalculate the first visible index based on new data length and viewport size.\n      const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n      const newVisibleIndex = Math.max(\n        0,\n        Math.min(firstVisibleIndex, dataLength - maxVisibleItems),\n      );\n\n      // If first visible index changed we must update scroll offset to handle start/end buffers\n      // Current range must also be adjusted to cover the new position (bottom of new list).\n      if (firstVisibleIndex != newVisibleIndex) {\n        firstVisibleIndex = newVisibleIndex;\n        scrollOffset = newVisibleIndex * this._itemSize;\n        newRange.start = Math.floor(firstVisibleIndex);\n      }\n\n      newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n    }\n\n    const startBuffer = scrollOffset - newRange.start * this._itemSize;\n    if (startBuffer < this._minBufferPx && newRange.start != 0) {\n      const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n      newRange.start = Math.max(0, newRange.start - expandStart);\n      newRange.end = Math.min(\n        dataLength,\n        Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize),\n      );\n    } else {\n      const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n      if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n        const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n        if (expandEnd > 0) {\n          newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n          newRange.start = Math.max(\n            0,\n            Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize),\n          );\n        }\n      }\n    }\n\n    this._viewport.setRenderedRange(newRange);\n    this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n    this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n  }\n}\n\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nexport function _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir: CdkFixedSizeVirtualScroll) {\n  return fixedSizeDir._scrollStrategy;\n}\n\n/** A virtual scroll strategy that supports fixed-size items. */\n@Directive({\n  selector: 'cdk-virtual-scroll-viewport[itemSize]',\n  providers: [\n    {\n      provide: VIRTUAL_SCROLL_STRATEGY,\n      useFactory: _fixedSizeVirtualScrollStrategyFactory,\n      deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n    },\n  ],\n})\nexport class CdkFixedSizeVirtualScroll implements OnChanges {\n  /** The size of the items in the list (in pixels). */\n  @Input()\n  get itemSize(): number {\n    return this._itemSize;\n  }\n  set itemSize(value: NumberInput) {\n    this._itemSize = coerceNumberProperty(value);\n  }\n  _itemSize = 20;\n\n  /**\n   * The minimum amount of buffer rendered beyond the viewport (in pixels).\n   * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n   */\n  @Input()\n  get minBufferPx(): number {\n    return this._minBufferPx;\n  }\n  set minBufferPx(value: NumberInput) {\n    this._minBufferPx = coerceNumberProperty(value);\n  }\n  _minBufferPx = 100;\n\n  /**\n   * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n   */\n  @Input()\n  get maxBufferPx(): number {\n    return this._maxBufferPx;\n  }\n  set maxBufferPx(value: NumberInput) {\n    this._maxBufferPx = coerceNumberProperty(value);\n  }\n  _maxBufferPx = 200;\n\n  /** The scroll strategy used by this directive. */\n  _scrollStrategy = new FixedSizeVirtualScrollStrategy(\n    this.itemSize,\n    this.minBufferPx,\n    this.maxBufferPx,\n  );\n\n  ngOnChanges() {\n    this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {coerceElement} from '../coercion';\nimport {Platform} from '../platform';\nimport {ElementRef, Injectable, NgZone, OnDestroy, RendererFactory2, inject} from '@angular/core';\nimport {of as observableOf, Subject, Subscription, Observable, Observer} from 'rxjs';\nimport {auditTime, filter} from 'rxjs/operators';\nimport type {CdkScrollable} from './scrollable';\n\n/** Time in ms to throttle the scrolling events by default. */\nexport const DEFAULT_SCROLL_TIME = 20;\n\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollDispatcher implements OnDestroy {\n  private _ngZone = inject(NgZone);\n  private _platform = inject(Platform);\n  private _renderer = inject(RendererFactory2).createRenderer(null, null);\n  private _cleanupGlobalListener: (() => void) | undefined;\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n  private readonly _scrolled = new Subject<CdkScrollable | void>();\n\n  /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n  private _scrolledCount = 0;\n\n  /**\n   * Map of all the scrollable references that are registered with the service and their\n   * scroll event subscriptions.\n   */\n  scrollContainers: Map<CdkScrollable, Subscription> = new Map();\n\n  /**\n   * Registers a scrollable instance with the service and listens for its scrolled events. When the\n   * scrollable is scrolled, the service emits the event to its scrolled observable.\n   * @param scrollable Scrollable instance to be registered.\n   */\n  register(scrollable: CdkScrollable): void {\n    if (!this.scrollContainers.has(scrollable)) {\n      this.scrollContainers.set(\n        scrollable,\n        scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable)),\n      );\n    }\n  }\n\n  /**\n   * De-registers a Scrollable reference and unsubscribes from its scroll event observable.\n   * @param scrollable Scrollable instance to be deregistered.\n   */\n  deregister(scrollable: CdkScrollable): void {\n    const scrollableReference = this.scrollContainers.get(scrollable);\n\n    if (scrollableReference) {\n      scrollableReference.unsubscribe();\n      this.scrollContainers.delete(scrollable);\n    }\n  }\n\n  /**\n   * Returns an observable that emits an event whenever any of the registered Scrollable\n   * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n   * to override the default \"throttle\" time.\n   *\n   * **Note:** in order to avoid hitting change detection for every scroll event,\n   * all of the events emitted from this stream will be run outside the Angular zone.\n   * If you need to update any data bindings as a result of a scroll event, you have\n   * to run the callback using `NgZone.run`.\n   */\n  scrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME): Observable<CdkScrollable | void> {\n    if (!this._platform.isBrowser) {\n      return observableOf<void>();\n    }\n\n    return new Observable((observer: Observer<CdkScrollable | void>) => {\n      if (!this._cleanupGlobalListener) {\n        this._cleanupGlobalListener = this._ngZone.runOutsideAngular(() =>\n          this._renderer.listen('document', 'scroll', () => this._scrolled.next()),\n        );\n      }\n\n      // In the case of a 0ms delay, use an observable without auditTime\n      // since it does add a perceptible delay in processing overhead.\n      const subscription =\n        auditTimeInMs > 0\n          ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer)\n          : this._scrolled.subscribe(observer);\n\n      this._scrolledCount++;\n\n      return () => {\n        subscription.unsubscribe();\n        this._scrolledCount--;\n\n        if (!this._scrolledCount) {\n          this._cleanupGlobalListener?.();\n          this._cleanupGlobalListener = undefined;\n        }\n      };\n    });\n  }\n\n  ngOnDestroy() {\n    this._cleanupGlobalListener?.();\n    this._cleanupGlobalListener = undefined;\n    this.scrollContainers.forEach((_, container) => this.deregister(container));\n    this._scrolled.complete();\n  }\n\n  /**\n   * Returns an observable that emits whenever any of the\n   * scrollable ancestors of an element are scrolled.\n   * @param elementOrElementRef Element whose ancestors to listen for.\n   * @param auditTimeInMs Time to throttle the scroll events.\n   */\n  ancestorScrolled(\n    elementOrElementRef: ElementRef | HTMLElement,\n    auditTimeInMs?: number,\n  ): Observable<CdkScrollable | void> {\n    const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n\n    return this.scrolled(auditTimeInMs).pipe(\n      filter(target => !target || ancestors.indexOf(target) > -1),\n    );\n  }\n\n  /** Returns all registered Scrollables that contain the provided element. */\n  getAncestorScrollContainers(elementOrElementRef: ElementRef | HTMLElement): CdkScrollable[] {\n    const scrollingContainers: CdkScrollable[] = [];\n\n    this.scrollContainers.forEach((_subscription: Subscription, scrollable: CdkScrollable) => {\n      if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n\n    return scrollingContainers;\n  }\n\n  /** Returns true if the element is contained within the provided Scrollable. */\n  private _scrollableContainsElement(\n    scrollable: CdkScrollable,\n    elementOrElementRef: ElementRef | HTMLElement,\n  ): boolean {\n    let element: HTMLElement | null = coerceElement(elementOrElementRef);\n    let scrollableElement = scrollable.getElementRef().nativeElement;\n\n    // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n    do {\n      if (element == scrollableElement) {\n        return true;\n      }\n    } while ((element = element!.parentElement));\n\n    return false;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directionality} from '../bidi';\nimport {getRtlScrollAxisType, RtlScrollAxisType, supportsScrollBehavior} from '../platform';\nimport {Directive, ElementRef, NgZone, OnDestroy, OnInit, Renderer2, inject} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n\nexport type _Without<T> = {[P in keyof T]?: never};\nexport type _XOR<T, U> = (_Without<T> & U) | (_Without<U> & T);\nexport type _Top = {top?: number};\nexport type _Bottom = {bottom?: number};\nexport type _Left = {left?: number};\nexport type _Right = {right?: number};\nexport type _Start = {start?: number};\nexport type _End = {end?: number};\nexport type _XAxis = _XOR<_XOR<_Left, _Right>, _XOR<_Start, _End>>;\nexport type _YAxis = _XOR<_Top, _Bottom>;\n\n/**\n * An extended version of ScrollToOptions that allows expressing scroll offsets relative to the\n * top, bottom, left, right, start, or end of the viewport rather than just the top and left.\n * Please note: the top and bottom properties are mutually exclusive, as are the left, right,\n * start, and end properties.\n */\nexport type ExtendedScrollToOptions = _XAxis & _YAxis & ScrollOptions;\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\n@Directive({\n  selector: '[cdk-scrollable], [cdkScrollable]',\n})\nexport class CdkScrollable implements OnInit, OnDestroy {\n  protected elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  protected scrollDispatcher = inject(ScrollDispatcher);\n  protected ngZone = inject(NgZone);\n  protected dir? = inject(Directionality, {optional: true});\n  protected _scrollElement: EventTarget = this.elementRef.nativeElement;\n  protected readonly _destroyed = new Subject<void>();\n  private _renderer = inject(Renderer2);\n  private _cleanupScroll: (() => void) | undefined;\n  private _elementScrolled = new Subject<Event>();\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngOnInit() {\n    this._cleanupScroll = this.ngZone.runOutsideAngular(() =>\n      this._renderer.listen(this._scrollElement, 'scroll', event =>\n        this._elementScrolled.next(event),\n      ),\n    );\n    this.scrollDispatcher.register(this);\n  }\n\n  ngOnDestroy() {\n    this._cleanupScroll?.();\n    this._elementScrolled.complete();\n    this.scrollDispatcher.deregister(this);\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Returns observable that emits when a scroll event is fired on the host element. */\n  elementScrolled(): Observable<Event> {\n    return this._elementScrolled;\n  }\n\n  /** Gets the ElementRef for the viewport. */\n  getElementRef(): ElementRef<HTMLElement> {\n    return this.elementRef;\n  }\n\n  /**\n   * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n   * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n   * left and right always refer to the left and right side of the scrolling container irrespective\n   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n   * in an RTL context.\n   * @param options specified the offsets to scroll to.\n   */\n  scrollTo(options: ExtendedScrollToOptions): void {\n    const el = this.elementRef.nativeElement;\n    const isRtl = this.dir && this.dir.value == 'rtl';\n\n    // Rewrite start & end offsets as right or left offsets.\n    if (options.left == null) {\n      options.left = isRtl ? options.end : options.start;\n    }\n\n    if (options.right == null) {\n      options.right = isRtl ? options.start : options.end;\n    }\n\n    // Rewrite the bottom offset as a top offset.\n    if (options.bottom != null) {\n      (options as _Without<_Bottom> & _Top).top =\n        el.scrollHeight - el.clientHeight - options.bottom;\n    }\n\n    // Rewrite the right offset as a left offset.\n    if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n      if (options.left != null) {\n        (options as _Without<_Left> & _Right).right =\n          el.scrollWidth - el.clientWidth - options.left;\n      }\n\n      if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n        options.left = options.right;\n      } else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n        options.left = options.right ? -options.right : options.right;\n      }\n    } else {\n      if (options.right != null) {\n        (options as _Without<_Right> & _Left).left =\n          el.scrollWidth - el.clientWidth - options.right;\n      }\n    }\n\n    this._applyScrollToOptions(options);\n  }\n\n  private _applyScrollToOptions(options: ScrollToOptions): void {\n    const el = this.elementRef.nativeElement;\n\n    if (supportsScrollBehavior()) {\n      el.scrollTo(options);\n    } else {\n      if (options.top != null) {\n        el.scrollTop = options.top;\n      }\n      if (options.left != null) {\n        el.scrollLeft = options.left;\n      }\n    }\n  }\n\n  /**\n   * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n   * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n   * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n   * left and right always refer to the left and right side of the scrolling container irrespective\n   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n   * in an RTL context.\n   * @param from The edge to measure from.\n   */\n  measureScrollOffset(from: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end'): number {\n    const LEFT = 'left';\n    const RIGHT = 'right';\n    const el = this.elementRef.nativeElement;\n    if (from == 'top') {\n      return el.scrollTop;\n    }\n    if (from == 'bottom') {\n      return el.scrollHeight - el.clientHeight - el.scrollTop;\n    }\n\n    // Rewrite start & end as left or right offsets.\n    const isRtl = this.dir && this.dir.value == 'rtl';\n    if (from == 'start') {\n      from = isRtl ? RIGHT : LEFT;\n    } else if (from == 'end') {\n      from = isRtl ? LEFT : RIGHT;\n    }\n\n    if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n      // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n      // 0 when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollWidth - el.clientWidth - el.scrollLeft;\n      } else {\n        return el.scrollLeft;\n      }\n    } else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n      // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n      // 0 when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollLeft + el.scrollWidth - el.clientWidth;\n      } else {\n        return -el.scrollLeft;\n      }\n    } else {\n      // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n      // (scrollWidth - clientWidth) when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollLeft;\n      } else {\n        return el.scrollWidth - el.clientWidth - el.scrollLeft;\n      }\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Platform} from '../platform';\nimport {Injectable, NgZone, OnDestroy, RendererFactory2, inject} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {auditTime} from 'rxjs/operators';\nimport {DOCUMENT} from '@angular/common';\n\n/** Time in ms to throttle the resize events by default. */\nexport const DEFAULT_RESIZE_TIME = 20;\n\n/** Object that holds the scroll position of the viewport in each direction. */\nexport interface ViewportScrollPosition {\n  top: number;\n  left: number;\n}\n\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class ViewportRuler implements OnDestroy {\n  private _platform = inject(Platform);\n  private _listeners: (() => void)[] | undefined;\n\n  /** Cached viewport dimensions. */\n  private _viewportSize: {width: number; height: number} | null;\n\n  /** Stream of viewport change events. */\n  private readonly _change = new Subject<Event>();\n\n  /** Used to reference correct document/window */\n  protected _document = inject(DOCUMENT, {optional: true})!;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const ngZone = inject(NgZone);\n    const renderer = inject(RendererFactory2).createRenderer(null, null);\n\n    ngZone.runOutsideAngular(() => {\n      if (this._platform.isBrowser) {\n        const changeListener = (event: Event) => this._change.next(event);\n        this._listeners = [\n          renderer.listen('window', 'resize', changeListener),\n          renderer.listen('window', 'orientationchange', changeListener),\n        ];\n      }\n\n      // Clear the cached position so that the viewport is re-measured next time it is required.\n      // We don't need to keep track of the subscription, because it is completed on destroy.\n      this.change().subscribe(() => (this._viewportSize = null));\n    });\n  }\n\n  ngOnDestroy() {\n    this._listeners?.forEach(cleanup => cleanup());\n    this._change.complete();\n  }\n\n  /** Returns the viewport's width and height. */\n  getViewportSize(): Readonly<{width: number; height: number}> {\n    if (!this._viewportSize) {\n      this._updateViewportSize();\n    }\n\n    const output = {width: this._viewportSize!.width, height: this._viewportSize!.height};\n\n    // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n    if (!this._platform.isBrowser) {\n      this._viewportSize = null!;\n    }\n\n    return output;\n  }\n\n  /** Gets a DOMRect for the viewport's bounds. */\n  getViewportRect() {\n    // Use the document element's bounding rect rather than the window scroll properties\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n    // We use the documentElement instead of the body because, by default (without a css reset)\n    // browsers typically give the document body an 8px margin, which is not included in\n    // getBoundingClientRect().\n    const scrollPosition = this.getViewportScrollPosition();\n    const {width, height} = this.getViewportSize();\n\n    return {\n      top: scrollPosition.top,\n      left: scrollPosition.left,\n      bottom: scrollPosition.top + height,\n      right: scrollPosition.left + width,\n      height,\n      width,\n    };\n  }\n\n  /** Gets the (top, left) scroll position of the viewport. */\n  getViewportScrollPosition(): ViewportScrollPosition {\n    // While we can get a reference to the fake document\n    // during SSR, it doesn't have getBoundingClientRect.\n    if (!this._platform.isBrowser) {\n      return {top: 0, left: 0};\n    }\n\n    // The top-left-corner of the viewport is determined by the scroll position of the document\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n    // `document.documentElement` works consistently, where the `top` and `left` values will\n    // equal negative the scroll position.\n    const document = this._document;\n    const window = this._getWindow();\n    const documentElement = document.documentElement!;\n    const documentRect = documentElement.getBoundingClientRect();\n\n    const top =\n      -documentRect.top ||\n      document.body.scrollTop ||\n      window.scrollY ||\n      documentElement.scrollTop ||\n      0;\n\n    const left =\n      -documentRect.left ||\n      document.body.scrollLeft ||\n      window.scrollX ||\n      documentElement.scrollLeft ||\n      0;\n\n    return {top, left};\n  }\n\n  /**\n   * Returns a stream that emits whenever the size of the viewport changes.\n   * This stream emits outside of the Angular zone.\n   * @param throttleTime Time in milliseconds to throttle the stream.\n   */\n  change(throttleTime: number = DEFAULT_RESIZE_TIME): Observable<Event> {\n    return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    return this._document.defaultView || window;\n  }\n\n  /** Updates the cached viewport size. */\n  private _updateViewportSize() {\n    const window = this._getWindow();\n    this._viewportSize = this._platform.isBrowser\n      ? {width: window.innerWidth, height: window.innerHeight}\n      : {width: 0, height: 0};\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, InjectionToken} from '@angular/core';\nimport {CdkScrollable} from './scrollable';\n\nexport const VIRTUAL_SCROLLABLE = new InjectionToken<CdkVirtualScrollable>('VIRTUAL_SCROLLABLE');\n\n/**\n * Extending the {@link CdkScrollable} to be used as scrolling container for virtual scrolling.\n */\n@Directive()\nexport abstract class CdkVirtualScrollable extends CdkScrollable {\n  constructor(...args: unknown[]);\n  constructor() {\n    super();\n  }\n\n  /**\n   * Measure the viewport size for the provided orientation.\n   *\n   * @param orientation The orientation to measure the size from.\n   */\n  measureViewportSize(orientation: 'horizontal' | 'vertical') {\n    const viewportEl = this.elementRef.nativeElement;\n    return orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n  }\n\n  /**\n   * Measure the bounding DOMRect size including the scroll offset.\n   *\n   * @param from The edge to measure from.\n   */\n  abstract measureBoundingClientRectWithScrollOffset(\n    from: 'left' | 'top' | 'right' | 'bottom',\n  ): number;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ListRange} from '../collections';\nimport {Platform} from '../platform';\nimport {\n  afterNextRender,\n  booleanAttribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  inject,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  animationFrameScheduler,\n  asapScheduler,\n  Observable,\n  Observer,\n  Subject,\n  Subscription,\n} from 'rxjs';\nimport {auditTime, startWith, takeUntil} from 'rxjs/operators';\nimport {CdkScrollable, ExtendedScrollToOptions} from './scrollable';\nimport {ViewportRuler} from './viewport-ruler';\nimport {CdkVirtualScrollRepeater} from './virtual-scroll-repeater';\nimport {VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy} from './virtual-scroll-strategy';\nimport {CdkVirtualScrollable, VIRTUAL_SCROLLABLE} from './virtual-scrollable';\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1: ListRange, r2: ListRange): boolean {\n  return r1.start == r2.start && r1.end == r2.end;\n}\n\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER =\n  typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\n@Component({\n  selector: 'cdk-virtual-scroll-viewport',\n  templateUrl: 'virtual-scroll-viewport.html',\n  styleUrl: 'virtual-scroll-viewport.css',\n  host: {\n    'class': 'cdk-virtual-scroll-viewport',\n    '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n    '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {\n      provide: CdkScrollable,\n      useFactory: (\n        virtualScrollable: CdkVirtualScrollable | null,\n        viewport: CdkVirtualScrollViewport,\n      ) => virtualScrollable || viewport,\n      deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport],\n    },\n  ],\n})\nexport class CdkVirtualScrollViewport extends CdkVirtualScrollable implements OnInit, OnDestroy {\n  override elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  private _changeDetectorRef = inject(ChangeDetectorRef);\n  private _scrollStrategy = inject<VirtualScrollStrategy>(VIRTUAL_SCROLL_STRATEGY, {\n    optional: true,\n  })!;\n  scrollable = inject<CdkVirtualScrollable>(VIRTUAL_SCROLLABLE, {optional: true})!;\n\n  private _platform = inject(Platform);\n\n  /** Emits when the viewport is detached from a CdkVirtualForOf. */\n  private readonly _detachedSubject = new Subject<void>();\n\n  /** Emits when the rendered range changes. */\n  private readonly _renderedRangeSubject = new Subject<ListRange>();\n\n  /** The direction the viewport scrolls. */\n  @Input()\n  get orientation() {\n    return this._orientation;\n  }\n\n  set orientation(orientation: 'horizontal' | 'vertical') {\n    if (this._orientation !== orientation) {\n      this._orientation = orientation;\n      this._calculateSpacerSize();\n    }\n  }\n  private _orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /**\n   * Whether rendered items should persist in the DOM after scrolling out of view. By default, items\n   * will be removed.\n   */\n  @Input({transform: booleanAttribute}) appendOnly: boolean = false;\n\n  // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n  // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n  // depending on how the strategy calculates the scrolled index, it may come at a cost to\n  // performance.\n  /** Emits when the index of the first element visible in the viewport changes. */\n  @Output()\n  readonly scrolledIndexChange: Observable<number> = new Observable((observer: Observer<number>) =>\n    this._scrollStrategy.scrolledIndexChange.subscribe(index =>\n      Promise.resolve().then(() => this.ngZone.run(() => observer.next(index))),\n    ),\n  );\n\n  /** The element that wraps the rendered content. */\n  @ViewChild('contentWrapper', {static: true}) _contentWrapper: ElementRef<HTMLElement>;\n\n  /** A stream that emits whenever the rendered range changes. */\n  readonly renderedRangeStream: Observable<ListRange> = this._renderedRangeSubject;\n\n  /**\n   * The total size of all content (in pixels), including content that is not currently rendered.\n   */\n  private _totalContentSize = 0;\n\n  /** A string representing the `style.width` property value to be used for the spacer element. */\n  _totalContentWidth = '';\n\n  /** A string representing the `style.height` property value to be used for the spacer element. */\n  _totalContentHeight = '';\n\n  /**\n   * The CSS transform applied to the rendered subset of items so that they appear within the bounds\n   * of the visible viewport.\n   */\n  private _renderedContentTransform: string;\n\n  /** The currently rendered range of indices. */\n  private _renderedRange: ListRange = {start: 0, end: 0};\n\n  /** The length of the data bound to this viewport (in number of items). */\n  private _dataLength = 0;\n\n  /** The size of the viewport (in pixels). */\n  private _viewportSize = 0;\n\n  /** the currently attached CdkVirtualScrollRepeater. */\n  private _forOf: CdkVirtualScrollRepeater<any> | null;\n\n  /** The last rendered content offset that was set. */\n  private _renderedContentOffset = 0;\n\n  /**\n   * Whether the last rendered content offset was to the end of the content (and therefore needs to\n   * be rewritten as an offset to the start of the content).\n   */\n  private _renderedContentOffsetNeedsRewrite = false;\n\n  /** Whether there is a pending change detection cycle. */\n  private _isChangeDetectionPending = false;\n\n  /** A list of functions to run after the next change detection cycle. */\n  private _runAfterChangeDetection: Function[] = [];\n\n  /** Subscription to changes in the viewport size. */\n  private _viewportChanges = Subscription.EMPTY;\n\n  private _injector = inject(Injector);\n\n  private _isDestroyed = false;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    super();\n    const viewportRuler = inject(ViewportRuler);\n\n    if (!this._scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n    }\n\n    this._viewportChanges = viewportRuler.change().subscribe(() => {\n      this.checkViewportSize();\n    });\n\n    if (!this.scrollable) {\n      // No scrollable is provided, so the virtual-scroll-viewport needs to become a scrollable\n      this.elementRef.nativeElement.classList.add('cdk-virtual-scrollable');\n      this.scrollable = this;\n    }\n  }\n\n  override ngOnInit() {\n    // Scrolling depends on the element dimensions which we can't get during SSR.\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    if (this.scrollable === this) {\n      super.ngOnInit();\n    }\n    // It's still too early to measure the viewport at this point. Deferring with a promise allows\n    // the Viewport to be rendered with the correct size before we measure. We run this outside the\n    // zone to avoid causing more change detection cycles. We handle the change detection loop\n    // ourselves instead.\n    this.ngZone.runOutsideAngular(() =>\n      Promise.resolve().then(() => {\n        this._measureViewportSize();\n        this._scrollStrategy.attach(this);\n\n        this.scrollable\n          .elementScrolled()\n          .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(null),\n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER),\n            // Usually `elementScrolled` is completed when the scrollable is destroyed, but\n            // that may not be the case if a `CdkVirtualScrollableElement` is used so we have\n            // to unsubscribe here just in case.\n            takeUntil(this._destroyed),\n          )\n          .subscribe(() => this._scrollStrategy.onContentScrolled());\n\n        this._markChangeDetectionNeeded();\n      }),\n    );\n  }\n\n  override ngOnDestroy() {\n    this.detach();\n    this._scrollStrategy.detach();\n\n    // Complete all subjects\n    this._renderedRangeSubject.complete();\n    this._detachedSubject.complete();\n    this._viewportChanges.unsubscribe();\n\n    this._isDestroyed = true;\n\n    super.ngOnDestroy();\n  }\n\n  /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n  attach(forOf: CdkVirtualScrollRepeater<any>) {\n    if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('CdkVirtualScrollViewport is already attached.');\n    }\n\n    // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n    // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n    // change detection loop ourselves.\n    this.ngZone.runOutsideAngular(() => {\n      this._forOf = forOf;\n      this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n        const newLength = data.length;\n        if (newLength !== this._dataLength) {\n          this._dataLength = newLength;\n          this._scrollStrategy.onDataLengthChanged();\n        }\n        this._doChangeDetection();\n      });\n    });\n  }\n\n  /** Detaches the current `CdkVirtualForOf`. */\n  detach() {\n    this._forOf = null;\n    this._detachedSubject.next();\n  }\n\n  /** Gets the length of the data bound to this viewport (in number of items). */\n  getDataLength(): number {\n    return this._dataLength;\n  }\n\n  /** Gets the size of the viewport (in pixels). */\n  getViewportSize(): number {\n    return this._viewportSize;\n  }\n\n  // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n  // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n  // setting it to something else, but its error prone and should probably be split into\n  // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n\n  /** Get the current rendered range of items. */\n  getRenderedRange(): ListRange {\n    return this._renderedRange;\n  }\n\n  measureBoundingClientRectWithScrollOffset(from: 'left' | 'top' | 'right' | 'bottom'): number {\n    return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n  }\n\n  /**\n   * Sets the total size of all content (in pixels), including content that is not currently\n   * rendered.\n   */\n  setTotalContentSize(size: number) {\n    if (this._totalContentSize !== size) {\n      this._totalContentSize = size;\n      this._calculateSpacerSize();\n      this._markChangeDetectionNeeded();\n    }\n  }\n\n  /** Sets the currently rendered range of indices. */\n  setRenderedRange(range: ListRange) {\n    if (!rangesEqual(this._renderedRange, range)) {\n      if (this.appendOnly) {\n        range = {start: 0, end: Math.max(this._renderedRange.end, range.end)};\n      }\n      this._renderedRangeSubject.next((this._renderedRange = range));\n      this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n    }\n  }\n\n  /**\n   * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n   */\n  getOffsetToRenderedContentStart(): number | null {\n    return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n  }\n\n  /**\n   * Sets the offset from the start of the viewport to either the start or end of the rendered data\n   * (in pixels).\n   */\n  setRenderedContentOffset(offset: number, to: 'to-start' | 'to-end' = 'to-start') {\n    // In appendOnly, we always start from the top\n    offset = this.appendOnly && to === 'to-start' ? 0 : offset;\n\n    // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n    // in the negative direction.\n    const isRtl = this.dir && this.dir.value == 'rtl';\n    const isHorizontal = this.orientation == 'horizontal';\n    const axis = isHorizontal ? 'X' : 'Y';\n    const axisDirection = isHorizontal && isRtl ? -1 : 1;\n    let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n    this._renderedContentOffset = offset;\n    if (to === 'to-end') {\n      transform += ` translate${axis}(-100%)`;\n      // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n      // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n      // expand upward).\n      this._renderedContentOffsetNeedsRewrite = true;\n    }\n    if (this._renderedContentTransform != transform) {\n      // We know this value is safe because we parse `offset` with `Number()` before passing it\n      // into the string.\n      this._renderedContentTransform = transform;\n      this._markChangeDetectionNeeded(() => {\n        if (this._renderedContentOffsetNeedsRewrite) {\n          this._renderedContentOffset -= this.measureRenderedContentSize();\n          this._renderedContentOffsetNeedsRewrite = false;\n          this.setRenderedContentOffset(this._renderedContentOffset);\n        } else {\n          this._scrollStrategy.onRenderedOffsetChanged();\n        }\n      });\n    }\n  }\n\n  /**\n   * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n   * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n   * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n   * @param offset The offset to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n   */\n  scrollToOffset(offset: number, behavior: ScrollBehavior = 'auto') {\n    const options: ExtendedScrollToOptions = {behavior};\n    if (this.orientation === 'horizontal') {\n      options.start = offset;\n    } else {\n      options.top = offset;\n    }\n    this.scrollable.scrollTo(options);\n  }\n\n  /**\n   * Scrolls to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n   */\n  scrollToIndex(index: number, behavior: ScrollBehavior = 'auto') {\n    this._scrollStrategy.scrollToIndex(index, behavior);\n  }\n\n  /**\n   * Gets the current scroll offset from the start of the scrollable (in pixels).\n   * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n   *     in horizontal mode.\n   */\n  override measureScrollOffset(\n    from?: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end',\n  ): number {\n    // This is to break the call cycle\n    let measureScrollOffset: InstanceType<typeof CdkVirtualScrollable>['measureScrollOffset'];\n    if (this.scrollable == this) {\n      measureScrollOffset = (_from: NonNullable<typeof from>) => super.measureScrollOffset(_from);\n    } else {\n      measureScrollOffset = (_from: NonNullable<typeof from>) =>\n        this.scrollable.measureScrollOffset(_from);\n    }\n\n    return Math.max(\n      0,\n      measureScrollOffset(from ?? (this.orientation === 'horizontal' ? 'start' : 'top')) -\n        this.measureViewportOffset(),\n    );\n  }\n\n  /**\n   * Measures the offset of the viewport from the scrolling container\n   * @param from The edge to measure from.\n   */\n  measureViewportOffset(from?: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end') {\n    let fromRect: 'left' | 'top' | 'right' | 'bottom';\n    const LEFT = 'left';\n    const RIGHT = 'right';\n    const isRtl = this.dir?.value == 'rtl';\n    if (from == 'start') {\n      fromRect = isRtl ? RIGHT : LEFT;\n    } else if (from == 'end') {\n      fromRect = isRtl ? LEFT : RIGHT;\n    } else if (from) {\n      fromRect = from;\n    } else {\n      fromRect = this.orientation === 'horizontal' ? 'left' : 'top';\n    }\n\n    const scrollerClientRect = this.scrollable.measureBoundingClientRectWithScrollOffset(fromRect);\n    const viewportClientRect = this.elementRef.nativeElement.getBoundingClientRect()[fromRect];\n\n    return viewportClientRect - scrollerClientRect;\n  }\n\n  /** Measure the combined size of all of the rendered items. */\n  measureRenderedContentSize(): number {\n    const contentEl = this._contentWrapper.nativeElement;\n    return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n  }\n\n  /**\n   * Measure the total combined size of the given range. Throws if the range includes items that are\n   * not rendered.\n   */\n  measureRangeSize(range: ListRange): number {\n    if (!this._forOf) {\n      return 0;\n    }\n    return this._forOf.measureRangeSize(range, this.orientation);\n  }\n\n  /** Update the viewport dimensions and re-render. */\n  checkViewportSize() {\n    // TODO: Cleanup later when add logic for handling content resize\n    this._measureViewportSize();\n    this._scrollStrategy.onDataLengthChanged();\n  }\n\n  /** Measure the viewport size. */\n  private _measureViewportSize() {\n    this._viewportSize = this.scrollable.measureViewportSize(this.orientation);\n  }\n\n  /** Queue up change detection to run. */\n  private _markChangeDetectionNeeded(runAfter?: Function) {\n    if (runAfter) {\n      this._runAfterChangeDetection.push(runAfter);\n    }\n\n    // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n    // properties sequentially we only have to run `_doChangeDetection` once at the end.\n    if (!this._isChangeDetectionPending) {\n      this._isChangeDetectionPending = true;\n      this.ngZone.runOutsideAngular(() =>\n        Promise.resolve().then(() => {\n          this._doChangeDetection();\n        }),\n      );\n    }\n  }\n\n  /** Run change detection. */\n  private _doChangeDetection() {\n    if (this._isDestroyed) {\n      return;\n    }\n\n    this.ngZone.run(() => {\n      // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n      // from the root, since the repeated items are content projected in. Calling `detectChanges`\n      // instead does not properly check the projected content.\n      this._changeDetectorRef.markForCheck();\n\n      // Apply the content transform. The transform can't be set via an Angular binding because\n      // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n      // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n      // the `Number` function first to coerce it to a numeric value.\n      this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n\n      afterNextRender(\n        () => {\n          this._isChangeDetectionPending = false;\n          const runAfterChangeDetection = this._runAfterChangeDetection;\n          this._runAfterChangeDetection = [];\n          for (const fn of runAfterChangeDetection) {\n            fn();\n          }\n        },\n        {injector: this._injector},\n      );\n    });\n  }\n\n  /** Calculates the `style.width` and `style.height` for the spacer element. */\n  private _calculateSpacerSize() {\n    this._totalContentHeight =\n      this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n    this._totalContentWidth =\n      this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n  }\n}\n", "<!--\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\n  position.\n-->\n<div #contentWrapper class=\"cdk-virtual-scroll-content-wrapper\">\n  <ng-content></ng-content>\n</div>\n<!--\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\n  so that the scrollbar captures the size of the entire data set.\n-->\n<div class=\"cdk-virtual-scroll-spacer\"\n     [style.width]=\"_totalContentWidth\" [style.height]=\"_totalContentHeight\"></div>\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ArrayDataSource,\n  CollectionViewer,\n  DataSource,\n  ListRange,\n  isDataSource,\n  _RecycleViewRepeaterStrategy,\n  _VIEW_REPEATER_STRATEGY,\n  _ViewRepeaterItemInsertArgs,\n} from '../collections';\nimport {\n  Directive,\n  DoCheck,\n  EmbeddedViewRef,\n  Input,\n  IterableChangeRecord,\n  IterableChanges,\n  IterableDiffer,\n  IterableDiffers,\n  NgIterable,\n  NgZone,\n  OnDestroy,\n  TemplateRef,\n  TrackByFunction,\n  ViewContainerRef,\n  inject,\n} from '@angular/core';\nimport {NumberInput, coerceNumberProperty} from '../coercion';\nimport {Observable, Subject, of as observableOf, isObservable} from 'rxjs';\nimport {pairwise, shareReplay, startWith, switchMap, takeUntil} from 'rxjs/operators';\nimport {CdkVirtualScrollRepeater} from './virtual-scroll-repeater';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n/** The context for an item rendered by `CdkVirtualForOf` */\nexport type CdkVirtualForOfContext<T> = {\n  /** The item value. */\n  $implicit: T;\n  /** The DataSource, Observable, or NgIterable that was passed to *cdkVirtualFor. */\n  cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T>;\n  /** The index of the item in the DataSource. */\n  index: number;\n  /** The number of items in the DataSource. */\n  count: number;\n  /** Whether this is the first item in the DataSource. */\n  first: boolean;\n  /** Whether this is the last item in the DataSource. */\n  last: boolean;\n  /** Whether the index is even. */\n  even: boolean;\n  /** Whether the index is odd. */\n  odd: boolean;\n};\n\n/** Helper to extract the offset of a DOM Node in a certain direction. */\nfunction getOffset(orientation: 'horizontal' | 'vertical', direction: 'start' | 'end', node: Node) {\n  const el = node as Element;\n  if (!el.getBoundingClientRect) {\n    return 0;\n  }\n  const rect = el.getBoundingClientRect();\n\n  if (orientation === 'horizontal') {\n    return direction === 'start' ? rect.left : rect.right;\n  }\n\n  return direction === 'start' ? rect.top : rect.bottom;\n}\n\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\n@Directive({\n  selector: '[cdkVirtualFor][cdkVirtualForOf]',\n  providers: [{provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy}],\n})\nexport class CdkVirtualForOf<T>\n  implements CdkVirtualScrollRepeater<T>, CollectionViewer, DoCheck, OnDestroy\n{\n  private _viewContainerRef = inject(ViewContainerRef);\n  private _template = inject<TemplateRef<CdkVirtualForOfContext<T>>>(TemplateRef);\n  private _differs = inject(IterableDiffers);\n  private _viewRepeater =\n    inject<_RecycleViewRepeaterStrategy<T, T, CdkVirtualForOfContext<T>>>(_VIEW_REPEATER_STRATEGY);\n  private _viewport = inject(CdkVirtualScrollViewport, {skipSelf: true});\n\n  /** Emits when the rendered view of the data changes. */\n  readonly viewChange = new Subject<ListRange>();\n\n  /** Subject that emits when a new DataSource instance is given. */\n  private readonly _dataSourceChanges = new Subject<DataSource<T>>();\n\n  /** The DataSource to display. */\n  @Input()\n  get cdkVirtualForOf(): DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined {\n    return this._cdkVirtualForOf;\n  }\n  set cdkVirtualForOf(value: DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined) {\n    this._cdkVirtualForOf = value;\n    if (isDataSource(value)) {\n      this._dataSourceChanges.next(value);\n    } else {\n      // If value is an an NgIterable, convert it to an array.\n      this._dataSourceChanges.next(\n        new ArrayDataSource<T>(isObservable(value) ? value : Array.from(value || [])),\n      );\n    }\n  }\n\n  _cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined;\n\n  /**\n   * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n   * the item and produces a value to be used as the item's identity when tracking changes.\n   */\n  @Input()\n  get cdkVirtualForTrackBy(): TrackByFunction<T> | undefined {\n    return this._cdkVirtualForTrackBy;\n  }\n  set cdkVirtualForTrackBy(fn: TrackByFunction<T> | undefined) {\n    this._needsUpdate = true;\n    this._cdkVirtualForTrackBy = fn\n      ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item)\n      : undefined;\n  }\n  private _cdkVirtualForTrackBy: TrackByFunction<T> | undefined;\n\n  /** The template used to stamp out new elements. */\n  @Input()\n  set cdkVirtualForTemplate(value: TemplateRef<CdkVirtualForOfContext<T>>) {\n    if (value) {\n      this._needsUpdate = true;\n      this._template = value;\n    }\n  }\n\n  /**\n   * The size of the cache used to store templates that are not being used for re-use later.\n   * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n   */\n  @Input()\n  get cdkVirtualForTemplateCacheSize(): number {\n    return this._viewRepeater.viewCacheSize;\n  }\n  set cdkVirtualForTemplateCacheSize(size: NumberInput) {\n    this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n  }\n\n  /** Emits whenever the data in the current DataSource changes. */\n  readonly dataStream: Observable<readonly T[]> = this._dataSourceChanges.pipe(\n    // Start off with null `DataSource`.\n    startWith(null),\n    // Bundle up the previous and current data sources so we can work with both.\n    pairwise(),\n    // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n    // new one, passing back a stream of data changes which we run through `switchMap` to give\n    // us a data stream that emits the latest data from whatever the current `DataSource` is.\n    switchMap(([prev, cur]) => this._changeDataSource(prev, cur)),\n    // Replay the last emitted data when someone subscribes.\n    shareReplay(1),\n  );\n\n  /** The differ used to calculate changes to the data. */\n  private _differ: IterableDiffer<T> | null = null;\n\n  /** The most recent data emitted from the DataSource. */\n  private _data: readonly T[];\n\n  /** The currently rendered items. */\n  private _renderedItems: T[];\n\n  /** The currently rendered range of indices. */\n  private _renderedRange: ListRange;\n\n  /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n  private _needsUpdate = false;\n\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const ngZone = inject(NgZone);\n\n    this.dataStream.subscribe(data => {\n      this._data = data;\n      this._onRenderedDataChange();\n    });\n    this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n      this._renderedRange = range;\n      if (this.viewChange.observers.length) {\n        ngZone.run(() => this.viewChange.next(this._renderedRange));\n      }\n      this._onRenderedDataChange();\n    });\n    this._viewport.attach(this);\n  }\n\n  /**\n   * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n   * in the specified range. Throws an error if the range includes items that are not currently\n   * rendered.\n   */\n  measureRangeSize(range: ListRange, orientation: 'horizontal' | 'vertical'): number {\n    if (range.start >= range.end) {\n      return 0;\n    }\n    if (\n      (range.start < this._renderedRange.start || range.end > this._renderedRange.end) &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)\n    ) {\n      throw Error(`Error: attempted to measure an item that isn't rendered.`);\n    }\n\n    // The index into the list of rendered views for the first item in the range.\n    const renderedStartIndex = range.start - this._renderedRange.start;\n    // The length of the range we're measuring.\n    const rangeLen = range.end - range.start;\n\n    // Loop over all the views, find the first and land node and compute the size by subtracting\n    // the top of the first node from the bottom of the last one.\n    let firstNode: HTMLElement | undefined;\n    let lastNode: HTMLElement | undefined;\n\n    // Find the first node by starting from the beginning and going forwards.\n    for (let i = 0; i < rangeLen; i++) {\n      const view = this._viewContainerRef.get(i + renderedStartIndex) as EmbeddedViewRef<\n        CdkVirtualForOfContext<T>\n      > | null;\n      if (view && view.rootNodes.length) {\n        firstNode = lastNode = view.rootNodes[0];\n        break;\n      }\n    }\n\n    // Find the last node by starting from the end and going backwards.\n    for (let i = rangeLen - 1; i > -1; i--) {\n      const view = this._viewContainerRef.get(i + renderedStartIndex) as EmbeddedViewRef<\n        CdkVirtualForOfContext<T>\n      > | null;\n      if (view && view.rootNodes.length) {\n        lastNode = view.rootNodes[view.rootNodes.length - 1];\n        break;\n      }\n    }\n\n    return firstNode && lastNode\n      ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode)\n      : 0;\n  }\n\n  ngDoCheck() {\n    if (this._differ && this._needsUpdate) {\n      // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n      // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n      // changing (need to do this diff).\n      const changes = this._differ.diff(this._renderedItems);\n      if (!changes) {\n        this._updateContext();\n      } else {\n        this._applyChanges(changes);\n      }\n      this._needsUpdate = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._viewport.detach();\n\n    this._dataSourceChanges.next(undefined!);\n    this._dataSourceChanges.complete();\n    this.viewChange.complete();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._viewRepeater.detach();\n  }\n\n  /** React to scroll state changes in the viewport. */\n  private _onRenderedDataChange() {\n    if (!this._renderedRange) {\n      return;\n    }\n    this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n    if (!this._differ) {\n      // Use a wrapper function for the `trackBy` so any new values are\n      // picked up automatically without having to recreate the differ.\n      this._differ = this._differs.find(this._renderedItems).create((index, item) => {\n        return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;\n      });\n    }\n    this._needsUpdate = true;\n  }\n\n  /** Swap out one `DataSource` for another. */\n  private _changeDataSource(\n    oldDs: DataSource<T> | null,\n    newDs: DataSource<T> | null,\n  ): Observable<readonly T[]> {\n    if (oldDs) {\n      oldDs.disconnect(this);\n    }\n\n    this._needsUpdate = true;\n    return newDs ? newDs.connect(this) : observableOf();\n  }\n\n  /** Update the `CdkVirtualForOfContext` for all views. */\n  private _updateContext() {\n    const count = this._data.length;\n    let i = this._viewContainerRef.length;\n    while (i--) {\n      const view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n      view.context.index = this._renderedRange.start + i;\n      view.context.count = count;\n      this._updateComputedContextProperties(view.context);\n      view.detectChanges();\n    }\n  }\n\n  /** Apply changes to the DOM. */\n  private _applyChanges(changes: IterableChanges<T>) {\n    this._viewRepeater.applyChanges(\n      changes,\n      this._viewContainerRef,\n      (\n        record: IterableChangeRecord<T>,\n        _adjustedPreviousIndex: number | null,\n        currentIndex: number | null,\n      ) => this._getEmbeddedViewArgs(record, currentIndex!),\n      record => record.item,\n    );\n\n    // Update $implicit for any items that had an identity change.\n    changes.forEachIdentityChange((record: IterableChangeRecord<T>) => {\n      const view = this._viewContainerRef.get(record.currentIndex!) as EmbeddedViewRef<\n        CdkVirtualForOfContext<T>\n      >;\n      view.context.$implicit = record.item;\n    });\n\n    // Update the context variables on all items.\n    const count = this._data.length;\n    let i = this._viewContainerRef.length;\n    while (i--) {\n      const view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n      view.context.index = this._renderedRange.start + i;\n      view.context.count = count;\n      this._updateComputedContextProperties(view.context);\n    }\n  }\n\n  /** Update the computed properties on the `CdkVirtualForOfContext`. */\n  private _updateComputedContextProperties(context: CdkVirtualForOfContext<any>) {\n    context.first = context.index === 0;\n    context.last = context.index === context.count - 1;\n    context.even = context.index % 2 === 0;\n    context.odd = !context.even;\n  }\n\n  private _getEmbeddedViewArgs(\n    record: IterableChangeRecord<T>,\n    index: number,\n  ): _ViewRepeaterItemInsertArgs<CdkVirtualForOfContext<T>> {\n    // Note that it's important that we insert the item directly at the proper index,\n    // rather than inserting it and the moving it in place, because if there's a directive\n    // on the same node that injects the `ViewContainerRef`, Angular will insert another\n    // comment node which can throw off the move when it's being repeated for all items.\n    return {\n      templateRef: this._template,\n      context: {\n        $implicit: record.item,\n        // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n        // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n        cdkVirtualForOf: this._cdkVirtualForOf!,\n        index: -1,\n        count: -1,\n        first: false,\n        last: false,\n        odd: false,\n        even: false,\n      },\n      index,\n    };\n  }\n\n  static ngTemplateContextGuard<T>(\n    directive: CdkVirtualForOf<T>,\n    context: unknown,\n  ): context is CdkVirtualForOfContext<T> {\n    return true;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkVirtualScrollable, VIRTUAL_SCROLLABLE} from './virtual-scrollable';\n\n/**\n * Provides a virtual scrollable for the element it is attached to.\n */\n@Directive({\n  selector: '[cdkVirtualScrollingElement]',\n  providers: [{provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement}],\n  host: {\n    'class': 'cdk-virtual-scrollable',\n  },\n})\nexport class CdkVirtualScrollableElement extends CdkVirtualScrollable {\n  constructor(...args: unknown[]);\n\n  constructor() {\n    super();\n  }\n\n  override measureBoundingClientRectWithScrollOffset(\n    from: 'left' | 'top' | 'right' | 'bottom',\n  ): number {\n    return (\n      this.getElementRef().nativeElement.getBoundingClientRect()[from] -\n      this.measureScrollOffset(from)\n    );\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, ElementRef, inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CdkVirtualScrollable, VIRTUAL_SCROLLABLE} from './virtual-scrollable';\n\n/**\n * Provides as virtual scrollable for the global / window scrollbar.\n */\n@Directive({\n  selector: 'cdk-virtual-scroll-viewport[scrollWindow]',\n  providers: [{provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow}],\n})\nexport class CdkVirtualScrollableWindow extends CdkVirtualScrollable {\n  constructor(...args: unknown[]);\n\n  constructor() {\n    super();\n    const document = inject(DOCUMENT);\n    this.elementRef = new ElementRef(document.documentElement);\n    this._scrollElement = document;\n  }\n\n  override measureBoundingClientRectWithScrollOffset(\n    from: 'left' | 'top' | 'right' | 'bottom',\n  ): number {\n    return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {BidiModule} from '../bidi';\nimport {NgModule} from '@angular/core';\nimport {CdkFixedSizeVirtualScroll} from './fixed-size-virtual-scroll';\nimport {CdkScrollable} from './scrollable';\nimport {CdkVirtualForOf} from './virtual-for-of';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\nimport {CdkVirtualScrollableElement} from './virtual-scrollable-element';\nimport {CdkVirtualScrollableWindow} from './virtual-scrollable-window';\n\n@NgModule({\n  exports: [CdkScrollable],\n  imports: [CdkScrollable],\n})\nexport class CdkScrollableModule {}\n\n/**\n * @docs-primary-export\n */\n@NgModule({\n  imports: [\n    BidiModule,\n    CdkScrollableModule,\n    CdkVirtualScrollViewport,\n    CdkFixedSizeVirtualScroll,\n    CdkVirtualForOf,\n    CdkVirtualScrollableWindow,\n    CdkVirtualScrollableElement,\n  ],\n  exports: [\n    BidiModule,\n    CdkScrollableModule,\n    CdkFixedSizeVirtualScroll,\n    CdkVirtualForOf,\n    CdkVirtualScrollViewport,\n    CdkVirtualScrollableWindow,\n    CdkVirtualScrollableElement,\n  ],\n})\nexport class ScrollingModule {}\n\n// Re-export needed by the Angular compiler.\n// See: https://github.com/angular/components/issues/30663.\n// Note: These exports need to be stable and shouldn't be renamed unnecessarily because\n// consuming libraries might have references to them in their own partial compilation output.\nexport {Dir as ɵɵDir} from '../bidi';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {APP_ID, inject, Injectable} from '@angular/core';\n\n/**\n * Keeps track of the ID count per prefix. This helps us make the IDs a bit more deterministic\n * like they were before the service was introduced. Note that ideally we wouldn't have to do\n * this, but there are some internal tests that rely on the IDs.\n */\nconst counters: Record<string, number> = {};\n\n/** Service that generates unique IDs for DOM nodes. */\n@Injectable({providedIn: 'root'})\nexport class _IdGenerator {\n  private _appId = inject(APP_ID);\n\n  /**\n   * Generates a unique ID with a specific prefix.\n   * @param prefix Prefix to add to the ID.\n   */\n  getId(prefix: string): string {\n    // Omit the app ID if it's the default `ng`. Since the vast majority of pages have one\n    // Angular app on them, we can reduce the amount of breakages by not adding it.\n    if (this._appId !== 'ng') {\n      prefix += this._appId;\n    }\n\n    if (!counters.hasOwnProperty(prefix)) {\n      counters[prefix] = 0;\n    }\n\n    return `${prefix}${counters[prefix]++}`;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/** Wraps the provided value in an array, unless the provided value is an array. */\nexport function coerceArray<T>(value: T | T[]): T[];\nexport function coerceArray<T>(value: T | readonly T[]): readonly T[];\nexport function coerceArray<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value];\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/** Creates a deep clone of an element. */\nexport function deepCloneNode(node: HTMLElement): HTMLElement {\n  const clone = node.cloneNode(true) as HTMLElement;\n  const descendantsWithId = clone.querySelectorAll('[id]');\n  const nodeName = node.nodeName.toLowerCase();\n\n  // Remove the `id` to avoid having multiple elements with the same id on the page.\n  clone.removeAttribute('id');\n\n  for (let i = 0; i < descendantsWithId.length; i++) {\n    descendantsWithId[i].removeAttribute('id');\n  }\n\n  if (nodeName === 'canvas') {\n    transferCanvasData(node as HTMLCanvasElement, clone as HTMLCanvasElement);\n  } else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n    transferInputData(node as HTMLInputElement, clone as HTMLInputElement);\n  }\n\n  transferData('canvas', node, clone, transferCanvasData);\n  transferData('input, textarea, select', node, clone, transferInputData);\n  return clone;\n}\n\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData<T extends Element>(\n  selector: string,\n  node: HTMLElement,\n  clone: HTMLElement,\n  callback: (source: T, clone: T) => void,\n) {\n  const descendantElements = node.querySelectorAll<T>(selector);\n\n  if (descendantElements.length) {\n    const cloneElements = clone.querySelectorAll<T>(selector);\n\n    for (let i = 0; i < descendantElements.length; i++) {\n      callback(descendantElements[i], cloneElements[i]);\n    }\n  }\n}\n\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n\n/** Transfers the data of one input element to another. */\nfunction transferInputData(\n  source: Element & {value: string},\n  clone: Element & {value: string; name: string; type: string},\n) {\n  // Browsers throw an error when assigning the value of a file input programmatically.\n  if (clone.type !== 'file') {\n    clone.value = source.value;\n  }\n\n  // Radio button `name` attributes must be unique for radio button groups\n  // otherwise original radio buttons can lose their checked state\n  // once the clone is inserted in the DOM.\n  if (clone.type === 'radio' && clone.name) {\n    clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n  }\n}\n\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source: HTMLCanvasElement, clone: HTMLCanvasElement) {\n  const context = clone.getContext('2d');\n\n  if (context) {\n    // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n    // We can't do much about it so just ignore the error.\n    try {\n      context.drawImage(source, 0, 0);\n    } catch {}\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/** Gets a mutable version of an element's bounding `DOMRect`. */\nexport function getMutableClientRect(element: Element): DOMRect {\n  const rect = element.getBoundingClientRect();\n\n  // We need to clone the `clientRect` here, because all the values on it are readonly\n  // and we need to be able to update them. Also we can't use a spread here, because\n  // the values on a `DOMRect` aren't own properties. See:\n  // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n  return {\n    top: rect.top,\n    right: rect.right,\n    bottom: rect.bottom,\n    left: rect.left,\n    width: rect.width,\n    height: rect.height,\n    x: rect.x,\n    y: rect.y,\n  } as DOMRect;\n}\n\n/**\n * Checks whether some coordinates are within a `DOMRect`.\n * @param clientRect DOMRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nexport function isInsideClientRect(clientRect: DOMRect, x: number, y: number) {\n  const {top, bottom, left, right} = clientRect;\n  return y >= top && y <= bottom && x >= left && x <= right;\n}\n\n/**\n * Updates the top/left positions of a `DOMRect`, as well as their bottom/right counterparts.\n * @param domRect `DOMRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nexport function adjustDomRect(\n  domRect: {\n    top: number;\n    bottom: number;\n    left: number;\n    right: number;\n    width: number;\n    height: number;\n  },\n  top: number,\n  left: number,\n) {\n  domRect.top += top;\n  domRect.bottom = domRect.top + domRect.height;\n\n  domRect.left += left;\n  domRect.right = domRect.left + domRect.width;\n}\n\n/**\n * Checks whether the pointer coordinates are close to a DOMRect.\n * @param rect DOMRect to check against.\n * @param threshold Threshold around the DOMRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nexport function isPointerNearDomRect(\n  rect: DOMRect,\n  threshold: number,\n  pointerX: number,\n  pointerY: number,\n): boolean {\n  const {top, right, bottom, left, width, height} = rect;\n  const xThreshold = width * threshold;\n  const yThreshold = height * threshold;\n\n  return (\n    pointerY > top - yThreshold &&\n    pointerY < bottom + yThreshold &&\n    pointerX > left - xThreshold &&\n    pointerX < right + xThreshold\n  );\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {_getEventTarget} from '../../platform';\nimport {getMutableClientRect, adjustDomRect} from './dom-rect';\n\n/** Object holding the scroll position of something. */\ninterface ScrollPosition {\n  top: number;\n  left: number;\n}\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nexport class ParentPositionTracker {\n  /** Cached positions of the scrollable parent elements. */\n  readonly positions = new Map<\n    Document | HTMLElement,\n    {\n      scrollPosition: ScrollPosition;\n      clientRect?: DOMRect;\n    }\n  >();\n\n  constructor(private _document: Document) {}\n\n  /** Clears the cached positions. */\n  clear() {\n    this.positions.clear();\n  }\n\n  /** Caches the positions. Should be called at the beginning of a drag sequence. */\n  cache(elements: readonly HTMLElement[]) {\n    this.clear();\n    this.positions.set(this._document, {\n      scrollPosition: this.getViewportScrollPosition(),\n    });\n\n    elements.forEach(element => {\n      this.positions.set(element, {\n        scrollPosition: {top: element.scrollTop, left: element.scrollLeft},\n        clientRect: getMutableClientRect(element),\n      });\n    });\n  }\n\n  /** Handles scrolling while a drag is taking place. */\n  handleScroll(event: Event): ScrollPosition | null {\n    const target = _getEventTarget<HTMLElement | Document>(event)!;\n    const cachedPosition = this.positions.get(target);\n\n    if (!cachedPosition) {\n      return null;\n    }\n\n    const scrollPosition = cachedPosition.scrollPosition;\n    let newTop: number;\n    let newLeft: number;\n\n    if (target === this._document) {\n      const viewportScrollPosition = this.getViewportScrollPosition();\n      newTop = viewportScrollPosition.top;\n      newLeft = viewportScrollPosition.left;\n    } else {\n      newTop = (target as HTMLElement).scrollTop;\n      newLeft = (target as HTMLElement).scrollLeft;\n    }\n\n    const topDifference = scrollPosition.top - newTop;\n    const leftDifference = scrollPosition.left - newLeft;\n\n    // Go through and update the cached positions of the scroll\n    // parents that are inside the element that was scrolled.\n    this.positions.forEach((position, node) => {\n      if (position.clientRect && target !== node && target.contains(node)) {\n        adjustDomRect(position.clientRect, topDifference, leftDifference);\n      }\n    });\n\n    scrollPosition.top = newTop;\n    scrollPosition.left = newLeft;\n\n    return {top: topDifference, left: leftDifference};\n  }\n\n  /**\n   * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\n   * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\n   * the top/left offset of the `document.documentElement` which works for most cases, but breaks\n   * if the element is offset by something like the `BlockScrollStrategy`.\n   */\n  getViewportScrollPosition() {\n    return {top: window.scrollY, left: window.scrollX};\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {EmbeddedViewRef} from '@angular/core';\n\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nexport function getRootNode(viewRef: EmbeddedViewRef<any>, _document: Document): HTMLElement {\n  const rootNodes: Node[] = viewRef.rootNodes;\n\n  if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n    return rootNodes[0] as HTMLElement;\n  }\n\n  const wrapper = _document.createElement('div');\n  rootNodes.forEach(node => wrapper.appendChild(node));\n  return wrapper;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n */\nexport interface DragCSSStyleDeclaration extends CSSStyleDeclaration {\n  msScrollSnapType: string;\n  scrollSnapType: string;\n  webkitTapHighlightColor: string;\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nexport function extendStyles(\n  dest: CSSStyleDeclaration,\n  source: Record<string, string>,\n  importantProperties?: Set<string>,\n) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      const value = source[key];\n\n      if (value) {\n        dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n      } else {\n        dest.removeProperty(key);\n      }\n    }\n  }\n\n  return dest;\n}\n\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nexport function toggleNativeDragInteractions(element: HTMLElement, enable: boolean) {\n  const userSelect = enable ? '' : 'none';\n\n  extendStyles(element.style, {\n    'touch-action': enable ? '' : 'none',\n    '-webkit-user-drag': enable ? '' : 'none',\n    '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n    'user-select': userSelect,\n    '-ms-user-select': userSelect,\n    '-webkit-user-select': userSelect,\n    '-moz-user-select': userSelect,\n  });\n}\n\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nexport function toggleVisibility(\n  element: HTMLElement,\n  enable: boolean,\n  importantProperties?: Set<string>,\n) {\n  extendStyles(\n    element.style,\n    {\n      position: enable ? '' : 'fixed',\n      top: enable ? '' : '0',\n      opacity: enable ? '' : '0',\n      left: enable ? '' : '-999em',\n    },\n    importantProperties,\n  );\n}\n\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nexport function combineTransforms(transform: string, initialTransform?: string): string {\n  return initialTransform && initialTransform != 'none'\n    ? transform + ' ' + initialTransform\n    : transform;\n}\n\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nexport function matchElementSize(target: HTMLElement, sourceRect: DOMRect): void {\n  target.style.width = `${sourceRect.width}px`;\n  target.style.height = `${sourceRect.height}px`;\n  target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nexport function getTransform(x: number, y: number): string {\n  // Round the transforms since some browsers will\n  // blur the elements for sub-pixel transforms.\n  return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value: string): number {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nexport function getTransformTransitionDurationInMs(element: HTMLElement): number {\n  const computedStyle = getComputedStyle(element);\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n\n  // If there's no transition for `all` or `transform`, we shouldn't do anything.\n  if (!property) {\n    return 0;\n  }\n\n  // Get the index of the property that we're interested in and match\n  // it up to the same index in `transition-delay` and `transition-duration`.\n  const propertyIndex = transitionedProperties.indexOf(property);\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n\n  return (\n    parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n    parseCssTimeUnitsToMs(rawDelays[propertyIndex])\n  );\n}\n\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle: CSSStyleDeclaration, name: string): string[] {\n  const value = computedStyle.getPropertyValue(name);\n  return value.split(',').map(part => part.trim());\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {EmbeddedViewRef, Renderer2, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {Direction} from '../bidi';\nimport {\n  extendStyles,\n  getTransform,\n  matchElementSize,\n  toggleNativeDragInteractions,\n} from './dom/styling';\nimport {deepCloneNode} from './dom/clone-node';\nimport {getRootNode} from './dom/root-node';\nimport {getTransformTransitionDurationInMs} from './dom/transition-duration';\n\n/** Template that can be used to create a drag preview element. */\nexport interface DragPreviewTemplate<T = any> {\n  matchSize?: boolean;\n  template: TemplateRef<T> | null;\n  viewContainer: ViewContainerRef;\n  context: T;\n}\n\n/** Inline styles to be set as `!important` while dragging. */\nconst importantProperties = new Set([\n  // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n  'position',\n]);\n\nexport class PreviewRef {\n  /** Reference to the view of the preview element. */\n  private _previewEmbeddedView: EmbeddedViewRef<any> | null;\n\n  /** Reference to the preview element. */\n  private _preview: HTMLElement;\n\n  get element(): HTMLElement {\n    return this._preview;\n  }\n\n  constructor(\n    private _document: Document,\n    private _rootElement: HTMLElement,\n    private _direction: Direction,\n    private _initialDomRect: DOMRect,\n    private _previewTemplate: DragPreviewTemplate | null,\n    private _previewClass: string | string[] | null,\n    private _pickupPositionOnPage: {\n      x: number;\n      y: number;\n    },\n    private _initialTransform: string | null,\n    private _zIndex: number,\n    private _renderer: Renderer2,\n  ) {}\n\n  attach(parent: HTMLElement): void {\n    this._preview = this._createPreview();\n    parent.appendChild(this._preview);\n\n    // The null check is necessary for browsers that don't support the popover API.\n    // Note that we use a string access for compatibility with Closure.\n    if (supportsPopover(this._preview)) {\n      this._preview['showPopover']();\n    }\n  }\n\n  destroy(): void {\n    this._preview.remove();\n    this._previewEmbeddedView?.destroy();\n    this._preview = this._previewEmbeddedView = null!;\n  }\n\n  setTransform(value: string): void {\n    this._preview.style.transform = value;\n  }\n\n  getBoundingClientRect(): DOMRect {\n    return this._preview.getBoundingClientRect();\n  }\n\n  addClass(className: string): void {\n    this._preview.classList.add(className);\n  }\n\n  getTransitionDuration(): number {\n    return getTransformTransitionDurationInMs(this._preview);\n  }\n\n  addEventListener(name: string, handler: (event: any) => void): () => void {\n    return this._renderer.listen(this._preview, name, handler);\n  }\n\n  private _createPreview(): HTMLElement {\n    const previewConfig = this._previewTemplate;\n    const previewClass = this._previewClass;\n    const previewTemplate = previewConfig ? previewConfig.template : null;\n    let preview: HTMLElement;\n\n    if (previewTemplate && previewConfig) {\n      // Measure the element before we've inserted the preview\n      // since the insertion could throw off the measurement.\n      const rootRect = previewConfig.matchSize ? this._initialDomRect : null;\n      const viewRef = previewConfig.viewContainer.createEmbeddedView(\n        previewTemplate,\n        previewConfig.context,\n      );\n      viewRef.detectChanges();\n      preview = getRootNode(viewRef, this._document);\n      this._previewEmbeddedView = viewRef;\n      if (previewConfig.matchSize) {\n        matchElementSize(preview, rootRect!);\n      } else {\n        preview.style.transform = getTransform(\n          this._pickupPositionOnPage.x,\n          this._pickupPositionOnPage.y,\n        );\n      }\n    } else {\n      preview = deepCloneNode(this._rootElement);\n      matchElementSize(preview, this._initialDomRect!);\n\n      if (this._initialTransform) {\n        preview.style.transform = this._initialTransform;\n      }\n    }\n\n    extendStyles(\n      preview.style,\n      {\n        // It's important that we disable the pointer events on the preview, because\n        // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n        'pointer-events': 'none',\n        // If the preview has a margin, it can throw off our positioning so we reset it. The reset\n        // value for `margin-right` needs to be `auto` when opened as a popover, because our\n        // positioning is always top/left based, but native popover seems to position itself\n        // to the top/right if `<html>` or `<body>` have `dir=\"rtl\"` (see #29604). Setting it\n        // to `auto` pushed it to the top/left corner in RTL and is a noop in LTR.\n        'margin': supportsPopover(preview) ? '0 auto 0 0' : '0',\n        'position': 'fixed',\n        'top': '0',\n        'left': '0',\n        'z-index': this._zIndex + '',\n      },\n      importantProperties,\n    );\n\n    toggleNativeDragInteractions(preview, false);\n    preview.classList.add('cdk-drag-preview');\n    preview.setAttribute('popover', 'manual');\n    preview.setAttribute('dir', this._direction);\n\n    if (previewClass) {\n      if (Array.isArray(previewClass)) {\n        previewClass.forEach(className => preview.classList.add(className));\n      } else {\n        preview.classList.add(previewClass);\n      }\n    }\n\n    return preview;\n  }\n}\n\n/** Checks whether a specific element supports the popover API. */\nfunction supportsPopover(element: HTMLElement): boolean {\n  return 'showPopover' in element;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader} from '../a11y';\nimport {Direction} from '../bidi';\nimport {coerceElement} from '../coercion';\nimport {_getEventTarget, _getShadowRoot, _bindEventWithOptions} from '../platform';\nimport {ViewportRuler} from '../scrolling';\nimport {\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  Renderer2,\n  TemplateRef,\n  ViewContainerRef,\n  signal,\n} from '@angular/core';\nimport {Observable, Subject, Subscription} from 'rxjs';\nimport {deepCloneNode} from './dom/clone-node';\nimport {adjustDomRect, getMutableClientRect} from './dom/dom-rect';\nimport {ParentPositionTracker} from './dom/parent-position-tracker';\nimport {getRootNode} from './dom/root-node';\nimport {\n  DragCSSStyleDeclaration,\n  combineTransforms,\n  getTransform,\n  toggleNativeDragInteractions,\n  toggleVisibility,\n} from './dom/styling';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport type {DropListRef} from './drop-list-ref';\nimport {DragPreviewTemplate, PreviewRef} from './preview-ref';\n\n/** Object that can be used to configure the behavior of DragRef. */\nexport interface DragRefConfig {\n  /**\n   * Minimum amount of pixels that the user should\n   * drag, before the CDK initiates a drag sequence.\n   */\n  dragStartThreshold: number;\n\n  /**\n   * Amount the pixels the user should drag before the CDK\n   * considers them to have changed the drag direction.\n   */\n  pointerDirectionChangeThreshold: number;\n\n  /** `z-index` for the absolutely-positioned elements that are created by the drag item. */\n  zIndex?: number;\n\n  /** Ref that the current drag item is nested in. */\n  parentDragRef?: DragRef;\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = {passive: true};\n\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = {passive: false};\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = {\n  passive: false,\n  capture: true,\n};\n\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n\n// TODO(crisbeto): add an API for moving a draggable up/down the\n// list programmatically. Useful for keyboard controls.\n\n/** Template that can be used to create a drag helper element (e.g. a preview or a placeholder). */\ninterface DragHelperTemplate<T = any> {\n  template: TemplateRef<T> | null;\n  viewContainer: ViewContainerRef;\n  context: T;\n}\n\n/** Point on the page or within an element. */\nexport interface Point {\n  x: number;\n  y: number;\n}\n\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n  // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n  'position',\n]);\n\n/**\n * Possible places into which the preview of a drag item can be inserted.\n * - `global` - Preview will be inserted at the bottom of the `<body>`. The advantage is that\n * you don't have to worry about `overflow: hidden` or `z-index`, but the item won't retain\n * its inherited styles.\n * - `parent` - Preview will be inserted into the parent of the drag item. The advantage is that\n * inherited styles will be preserved, but it may be clipped by `overflow: hidden` or not be\n * visible due to `z-index`. Furthermore, the preview is going to have an effect over selectors\n * like `:nth-child` and some flexbox configurations.\n * - `ElementRef<HTMLElement> | HTMLElement` - Preview will be inserted into a specific element.\n * Same advantages and disadvantages as `parent`.\n */\nexport type PreviewContainer = 'global' | 'parent' | ElementRef<HTMLElement> | HTMLElement;\n\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nexport class DragRef<T = any> {\n  private _rootElementCleanups: (() => void)[] | undefined;\n  private _cleanupShadowRootSelectStart: (() => void) | undefined;\n\n  /** Element displayed next to the user's pointer while the element is dragged. */\n  private _preview: PreviewRef | null;\n\n  /** Container into which to insert the preview. */\n  private _previewContainer: PreviewContainer | undefined;\n\n  /** Reference to the view of the placeholder element. */\n  private _placeholderRef: EmbeddedViewRef<any> | null;\n\n  /** Element that is rendered instead of the draggable item while it is being sorted. */\n  private _placeholder: HTMLElement;\n\n  /** Coordinates within the element at which the user picked up the element. */\n  private _pickupPositionInElement: Point;\n\n  /** Coordinates on the page at which the user picked up the element. */\n  private _pickupPositionOnPage: Point;\n\n  /**\n   * Anchor node used to save the place in the DOM where the element was\n   * picked up so that it can be restored at the end of the drag sequence.\n   */\n  private _anchor: Comment;\n\n  /**\n   * CSS `transform` applied to the element when it isn't being dragged. We need a\n   * passive transform in order for the dragged element to retain its new position\n   * after the user has stopped dragging and because we need to know the relative\n   * position in case they start dragging again. This corresponds to `element.style.transform`.\n   */\n  private _passiveTransform: Point = {x: 0, y: 0};\n\n  /** CSS `transform` that is applied to the element while it's being dragged. */\n  private _activeTransform: Point = {x: 0, y: 0};\n\n  /** Inline `transform` value that the element had before the first dragging sequence. */\n  private _initialTransform?: string;\n\n  /**\n   * Whether the dragging sequence has been started. Doesn't\n   * necessarily mean that the element has been moved.\n   */\n  private _hasStartedDragging = signal(false);\n\n  /** Whether the element has moved since the user started dragging it. */\n  private _hasMoved: boolean;\n\n  /** Drop container in which the DragRef resided when dragging began. */\n  private _initialContainer: DropListRef;\n\n  /** Index at which the item started in its initial container. */\n  private _initialIndex: number;\n\n  /** Cached positions of scrollable parent elements. */\n  private _parentPositions: ParentPositionTracker;\n\n  /** Emits when the item is being moved. */\n  private readonly _moveEvents = new Subject<{\n    source: DragRef;\n    pointerPosition: {x: number; y: number};\n    event: MouseEvent | TouchEvent;\n    distance: Point;\n    delta: {x: -1 | 0 | 1; y: -1 | 0 | 1};\n  }>();\n\n  /** Keeps track of the direction in which the user is dragging along each axis. */\n  private _pointerDirectionDelta: {x: -1 | 0 | 1; y: -1 | 0 | 1};\n\n  /** Pointer position at which the last change in the delta occurred. */\n  private _pointerPositionAtLastDirectionChange: Point;\n\n  /** Position of the pointer at the last pointer event. */\n  private _lastKnownPointerPosition: Point;\n\n  /**\n   * Root DOM node of the drag instance. This is the element that will\n   * be moved around as the user is dragging.\n   */\n  private _rootElement: HTMLElement;\n\n  /**\n   * Nearest ancestor SVG, relative to which coordinates are calculated if dragging SVGElement\n   */\n  private _ownerSVGElement: SVGSVGElement | null;\n\n  /**\n   * Inline style value of `-webkit-tap-highlight-color` at the time the\n   * dragging was started. Used to restore the value once we're done dragging.\n   */\n  private _rootElementTapHighlight: string;\n\n  /** Subscription to pointer movement events. */\n  private _pointerMoveSubscription = Subscription.EMPTY;\n\n  /** Subscription to the event that is dispatched when the user lifts their pointer. */\n  private _pointerUpSubscription = Subscription.EMPTY;\n\n  /** Subscription to the viewport being scrolled. */\n  private _scrollSubscription = Subscription.EMPTY;\n\n  /** Subscription to the viewport being resized. */\n  private _resizeSubscription = Subscription.EMPTY;\n\n  /**\n   * Time at which the last touch event occurred. Used to avoid firing the same\n   * events multiple times on touch devices where the browser will fire a fake\n   * mouse event for each touch event, after a certain time.\n   */\n  private _lastTouchEventTime: number;\n\n  /** Time at which the last dragging sequence was started. */\n  private _dragStartTime: number;\n\n  /** Cached reference to the boundary element. */\n  private _boundaryElement: HTMLElement | null = null;\n\n  /** Whether the native dragging interactions have been enabled on the root element. */\n  private _nativeInteractionsEnabled = true;\n\n  /** Client rect of the root element when the dragging sequence has started. */\n  private _initialDomRect?: DOMRect;\n\n  /** Cached dimensions of the preview element. Should be read via `_getPreviewRect`. */\n  private _previewRect?: DOMRect;\n\n  /** Cached dimensions of the boundary element. */\n  private _boundaryRect?: DOMRect;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  private _previewTemplate?: DragPreviewTemplate | null;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  private _placeholderTemplate?: DragHelperTemplate | null;\n\n  /** Elements that can be used to drag the draggable item. */\n  private _handles: HTMLElement[] = [];\n\n  /** Registered handles that are currently disabled. */\n  private _disabledHandles = new Set<HTMLElement>();\n\n  /** Droppable container that the draggable is a part of. */\n  private _dropContainer?: DropListRef;\n\n  /** Layout direction of the item. */\n  private _direction: Direction = 'ltr';\n\n  /** Ref that the current drag item is nested in. */\n  private _parentDragRef: DragRef<unknown> | null;\n\n  /**\n   * Cached shadow root that the element is placed in. `null` means that the element isn't in\n   * the shadow DOM and `undefined` means that it hasn't been resolved yet. Should be read via\n   * `_getShadowRoot`, not directly.\n   */\n  private _cachedShadowRoot: ShadowRoot | null | undefined;\n\n  /** Axis along which dragging is locked. */\n  lockAxis: 'x' | 'y';\n\n  /**\n   * Amount of milliseconds to wait after the user has put their\n   * pointer down before starting to drag the element.\n   */\n  dragStartDelay: number | {touch: number; mouse: number} = 0;\n\n  /** Class to be added to the preview element. */\n  previewClass: string | string[] | undefined;\n\n  /**\n   * If the parent of the dragged element has a `scale` transform, it can throw off the\n   * positioning when the user starts dragging. Use this input to notify the CDK of the scale.\n   */\n  scale: number = 1;\n\n  /** Whether starting to drag this element is disabled. */\n  get disabled(): boolean {\n    return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    if (value !== this._disabled) {\n      this._disabled = value;\n      this._toggleNativeDragInteractions();\n      this._handles.forEach(handle => toggleNativeDragInteractions(handle, value));\n    }\n  }\n  private _disabled = false;\n\n  /** Emits as the drag sequence is being prepared. */\n  readonly beforeStarted = new Subject<void>();\n\n  /** Emits when the user starts dragging the item. */\n  readonly started = new Subject<{source: DragRef; event: MouseEvent | TouchEvent}>();\n\n  /** Emits when the user has released a drag item, before any animations have started. */\n  readonly released = new Subject<{source: DragRef; event: MouseEvent | TouchEvent}>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  readonly ended = new Subject<{\n    source: DragRef;\n    distance: Point;\n    dropPoint: Point;\n    event: MouseEvent | TouchEvent;\n  }>();\n\n  /** Emits when the user has moved the item into a new container. */\n  readonly entered = new Subject<{container: DropListRef; item: DragRef; currentIndex: number}>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  readonly exited = new Subject<{container: DropListRef; item: DragRef}>();\n\n  /** Emits when the user drops the item inside a container. */\n  readonly dropped = new Subject<{\n    previousIndex: number;\n    currentIndex: number;\n    item: DragRef;\n    container: DropListRef;\n    previousContainer: DropListRef;\n    distance: Point;\n    dropPoint: Point;\n    isPointerOverContainer: boolean;\n    event: MouseEvent | TouchEvent;\n  }>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  readonly moved: Observable<{\n    source: DragRef;\n    pointerPosition: {x: number; y: number};\n    event: MouseEvent | TouchEvent;\n    distance: Point;\n    delta: {x: -1 | 0 | 1; y: -1 | 0 | 1};\n  }> = this._moveEvents;\n\n  /** Arbitrary data that can be attached to the drag item. */\n  data: T;\n\n  /**\n   * Function that can be used to customize the logic of how the position of the drag item\n   * is limited while it's being dragged. Gets called with a point containing the current position\n   * of the user's pointer on the page, a reference to the item being dragged and its dimensions.\n   * Should return a point describing where the item should be rendered.\n   */\n  constrainPosition?: (\n    userPointerPosition: Point,\n    dragRef: DragRef,\n    dimensions: DOMRect,\n    pickupPositionInElement: Point,\n  ) => Point;\n\n  constructor(\n    element: ElementRef<HTMLElement> | HTMLElement,\n    private _config: DragRefConfig,\n    private _document: Document,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry,\n    private _renderer: Renderer2,\n  ) {\n    this.withRootElement(element).withParent(_config.parentDragRef || null);\n    this._parentPositions = new ParentPositionTracker(_document);\n    _dragDropRegistry.registerDragItem(this);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._placeholder;\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._rootElement;\n  }\n\n  /**\n   * Gets the currently-visible element that represents the drag item.\n   * While dragging this is the placeholder, otherwise it's the root element.\n   */\n  getVisibleElement(): HTMLElement {\n    return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n  }\n\n  /** Registers the handles that can be used to drag the element. */\n  withHandles(handles: (HTMLElement | ElementRef<HTMLElement>)[]): this {\n    this._handles = handles.map(handle => coerceElement(handle));\n    this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n    this._toggleNativeDragInteractions();\n\n    // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n    // the set, rather than iterate over it and filter out the destroyed handles, because while\n    // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n    // use an array internally which may throw an error.\n    const disabledHandles = new Set<HTMLElement>();\n    this._disabledHandles.forEach(handle => {\n      if (this._handles.indexOf(handle) > -1) {\n        disabledHandles.add(handle);\n      }\n    });\n    this._disabledHandles = disabledHandles;\n    return this;\n  }\n\n  /**\n   * Registers the template that should be used for the drag preview.\n   * @param template Template that from which to stamp out the preview.\n   */\n  withPreviewTemplate(template: DragPreviewTemplate | null): this {\n    this._previewTemplate = template;\n    return this;\n  }\n\n  /**\n   * Registers the template that should be used for the drag placeholder.\n   * @param template Template that from which to stamp out the placeholder.\n   */\n  withPlaceholderTemplate(template: DragHelperTemplate | null): this {\n    this._placeholderTemplate = template;\n    return this;\n  }\n\n  /**\n   * Sets an alternate drag root element. The root element is the element that will be moved as\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\n   * dragging on an element that you might not have access to.\n   */\n  withRootElement(rootElement: ElementRef<HTMLElement> | HTMLElement): this {\n    const element = coerceElement(rootElement);\n\n    if (element !== this._rootElement) {\n      this._removeRootElementListeners();\n      this._rootElementCleanups = this._ngZone.runOutsideAngular(() => [\n        _bindEventWithOptions(\n          this._renderer,\n          element,\n          'mousedown',\n          this._pointerDown,\n          activeEventListenerOptions,\n        ),\n        _bindEventWithOptions(\n          this._renderer,\n          element,\n          'touchstart',\n          this._pointerDown,\n          passiveEventListenerOptions,\n        ),\n        _bindEventWithOptions(\n          this._renderer,\n          element,\n          'dragstart',\n          this._nativeDragStart,\n          activeEventListenerOptions,\n        ),\n      ]);\n      this._initialTransform = undefined;\n      this._rootElement = element;\n    }\n\n    if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n      this._ownerSVGElement = this._rootElement.ownerSVGElement;\n    }\n\n    return this;\n  }\n\n  /**\n   * Element to which the draggable's position will be constrained.\n   */\n  withBoundaryElement(boundaryElement: ElementRef<HTMLElement> | HTMLElement | null): this {\n    this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n    this._resizeSubscription.unsubscribe();\n    if (boundaryElement) {\n      this._resizeSubscription = this._viewportRuler\n        .change(10)\n        .subscribe(() => this._containInsideBoundaryOnResize());\n    }\n    return this;\n  }\n\n  /** Sets the parent ref that the ref is nested in.  */\n  withParent(parent: DragRef<unknown> | null): this {\n    this._parentDragRef = parent;\n    return this;\n  }\n\n  /** Removes the dragging functionality from the DOM element. */\n  dispose() {\n    this._removeRootElementListeners();\n\n    // Do this check before removing from the registry since it'll\n    // stop being considered as dragged once it is removed.\n    if (this.isDragging()) {\n      // Since we move out the element to the end of the body while it's being\n      // dragged, we have to make sure that it's removed if it gets destroyed.\n      this._rootElement?.remove();\n    }\n\n    this._anchor?.remove();\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._dragDropRegistry.removeDragItem(this);\n    this._removeListeners();\n    this.beforeStarted.complete();\n    this.started.complete();\n    this.released.complete();\n    this.ended.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this._moveEvents.complete();\n    this._handles = [];\n    this._disabledHandles.clear();\n    this._dropContainer = undefined;\n    this._resizeSubscription.unsubscribe();\n    this._parentPositions.clear();\n    this._boundaryElement =\n      this._rootElement =\n      this._ownerSVGElement =\n      this._placeholderTemplate =\n      this._previewTemplate =\n      this._anchor =\n      this._parentDragRef =\n        null!;\n  }\n\n  /** Checks whether the element is currently being dragged. */\n  isDragging(): boolean {\n    return this._hasStartedDragging() && this._dragDropRegistry.isDragging(this);\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._rootElement.style.transform = this._initialTransform || '';\n    this._activeTransform = {x: 0, y: 0};\n    this._passiveTransform = {x: 0, y: 0};\n  }\n\n  /**\n   * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n   * @param handle Handle element that should be disabled.\n   */\n  disableHandle(handle: HTMLElement) {\n    if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n      this._disabledHandles.add(handle);\n      toggleNativeDragInteractions(handle, true);\n    }\n  }\n\n  /**\n   * Enables a handle, if it has been disabled.\n   * @param handle Handle element to be enabled.\n   */\n  enableHandle(handle: HTMLElement) {\n    if (this._disabledHandles.has(handle)) {\n      this._disabledHandles.delete(handle);\n      toggleNativeDragInteractions(handle, this.disabled);\n    }\n  }\n\n  /** Sets the layout direction of the draggable item. */\n  withDirection(direction: Direction): this {\n    this._direction = direction;\n    return this;\n  }\n\n  /** Sets the container that the item is part of. */\n  _withDropContainer(container: DropListRef) {\n    this._dropContainer = container;\n  }\n\n  /**\n   * Gets the current position in pixels the draggable outside of a drop container.\n   */\n  getFreeDragPosition(): Readonly<Point> {\n    const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n    return {x: position.x, y: position.y};\n  }\n\n  /**\n   * Sets the current position in pixels the draggable outside of a drop container.\n   * @param value New position to be set.\n   */\n  setFreeDragPosition(value: Point): this {\n    this._activeTransform = {x: 0, y: 0};\n    this._passiveTransform.x = value.x;\n    this._passiveTransform.y = value.y;\n\n    if (!this._dropContainer) {\n      this._applyRootElementTransform(value.x, value.y);\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the container into which to insert the preview element.\n   * @param value Container into which to insert the preview.\n   */\n  withPreviewContainer(value: PreviewContainer): this {\n    this._previewContainer = value;\n    return this;\n  }\n\n  /** Updates the item's sort order based on the last-known pointer position. */\n  _sortFromLastPointerPosition() {\n    const position = this._lastKnownPointerPosition;\n\n    if (position && this._dropContainer) {\n      this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n    }\n  }\n\n  /** Unsubscribes from the global subscriptions. */\n  private _removeListeners() {\n    this._pointerMoveSubscription.unsubscribe();\n    this._pointerUpSubscription.unsubscribe();\n    this._scrollSubscription.unsubscribe();\n    this._cleanupShadowRootSelectStart?.();\n    this._cleanupShadowRootSelectStart = undefined;\n  }\n\n  /** Destroys the preview element and its ViewRef. */\n  private _destroyPreview() {\n    this._preview?.destroy();\n    this._preview = null;\n  }\n\n  /** Destroys the placeholder element and its ViewRef. */\n  private _destroyPlaceholder() {\n    this._placeholder?.remove();\n    this._placeholderRef?.destroy();\n    this._placeholder = this._placeholderRef = null!;\n  }\n\n  /** Handler for the `mousedown`/`touchstart` events. */\n  private _pointerDown = (event: MouseEvent | TouchEvent) => {\n    this.beforeStarted.next();\n\n    // Delegate the event based on whether it started from a handle or the element itself.\n    if (this._handles.length) {\n      const targetHandle = this._getTargetHandle(event);\n\n      if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n        this._initializeDragSequence(targetHandle, event);\n      }\n    } else if (!this.disabled) {\n      this._initializeDragSequence(this._rootElement, event);\n    }\n  };\n\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\n    const pointerPosition = this._getPointerPositionOnPage(event);\n\n    if (!this._hasStartedDragging()) {\n      const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n      const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n      const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n\n      // Only start dragging after the user has moved more than the minimum distance in either\n      // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n      // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n      // per pixel of movement (e.g. if the user moves their pointer quickly).\n      if (isOverThreshold) {\n        const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n        const container = this._dropContainer;\n\n        if (!isDelayElapsed) {\n          this._endDragSequence(event);\n          return;\n        }\n\n        // Prevent other drag sequences from starting while something in the container is still\n        // being dragged. This can happen while we're waiting for the drop animation to finish\n        // and can cause errors, because some elements might still be moving around.\n        if (!container || (!container.isDragging() && !container.isReceiving())) {\n          // Prevent the default action as soon as the dragging sequence is considered as\n          // \"started\" since waiting for the next event can allow the device to begin scrolling.\n          if (event.cancelable) {\n            event.preventDefault();\n          }\n          this._hasStartedDragging.set(true);\n          this._ngZone.run(() => this._startDragSequence(event));\n        }\n      }\n\n      return;\n    }\n\n    // We prevent the default action down here so that we know that dragging has started. This is\n    // important for touch devices where doing this too early can unnecessarily block scrolling,\n    // if there's a dragging delay.\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n\n    const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n    this._hasMoved = true;\n    this._lastKnownPointerPosition = pointerPosition;\n    this._updatePointerDirectionDelta(constrainedPointerPosition);\n\n    if (this._dropContainer) {\n      this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n    } else {\n      // If there's a position constraint function, we want the element's top/left to be at the\n      // specific position on the page. Use the initial position as a reference if that's the case.\n      const offset = this.constrainPosition ? this._initialDomRect! : this._pickupPositionOnPage;\n      const activeTransform = this._activeTransform;\n      activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\n      activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\n      this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n    }\n\n    // Since this event gets fired for every pixel while dragging, we only\n    // want to fire it if the consumer opted into it. Also we have to\n    // re-enter the zone because we run all of the events on the outside.\n    if (this._moveEvents.observers.length) {\n      this._ngZone.run(() => {\n        this._moveEvents.next({\n          source: this,\n          pointerPosition: constrainedPointerPosition,\n          event,\n          distance: this._getDragDistance(constrainedPointerPosition),\n          delta: this._pointerDirectionDelta,\n        });\n      });\n    }\n  };\n\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n  private _pointerUp = (event: MouseEvent | TouchEvent) => {\n    this._endDragSequence(event);\n  };\n\n  /**\n   * Clears subscriptions and stops the dragging sequence.\n   * @param event Browser event object that ended the sequence.\n   */\n  private _endDragSequence(event: MouseEvent | TouchEvent) {\n    // Note that here we use `isDragging` from the service, rather than from `this`.\n    // The difference is that the one from the service reflects whether a dragging sequence\n    // has been initiated, whereas the one on `this` includes whether the user has passed\n    // the minimum dragging threshold.\n    if (!this._dragDropRegistry.isDragging(this)) {\n      return;\n    }\n\n    this._removeListeners();\n    this._dragDropRegistry.stopDragging(this);\n    this._toggleNativeDragInteractions();\n\n    if (this._handles) {\n      (this._rootElement.style as DragCSSStyleDeclaration).webkitTapHighlightColor =\n        this._rootElementTapHighlight;\n    }\n\n    if (!this._hasStartedDragging()) {\n      return;\n    }\n\n    this.released.next({source: this, event});\n\n    if (this._dropContainer) {\n      // Stop scrolling immediately, instead of waiting for the animation to finish.\n      this._dropContainer._stopScrolling();\n      this._animatePreviewToPlaceholder().then(() => {\n        this._cleanupDragArtifacts(event);\n        this._cleanupCachedDimensions();\n        this._dragDropRegistry.stopDragging(this);\n      });\n    } else {\n      // Convert the active transform into a passive one. This means that next time\n      // the user starts dragging the item, its position will be calculated relatively\n      // to the new passive transform.\n      this._passiveTransform.x = this._activeTransform.x;\n      const pointerPosition = this._getPointerPositionOnPage(event);\n      this._passiveTransform.y = this._activeTransform.y;\n      this._ngZone.run(() => {\n        this.ended.next({\n          source: this,\n          distance: this._getDragDistance(pointerPosition),\n          dropPoint: pointerPosition,\n          event,\n        });\n      });\n      this._cleanupCachedDimensions();\n      this._dragDropRegistry.stopDragging(this);\n    }\n  }\n\n  /** Starts the dragging sequence. */\n  private _startDragSequence(event: MouseEvent | TouchEvent) {\n    if (isTouchEvent(event)) {\n      this._lastTouchEventTime = Date.now();\n    }\n\n    this._toggleNativeDragInteractions();\n\n    // Needs to happen before the root element is moved.\n    const shadowRoot = this._getShadowRoot();\n    const dropContainer = this._dropContainer;\n\n    if (shadowRoot) {\n      // In some browsers the global `selectstart` that we maintain in the `DragDropRegistry`\n      // doesn't cross the shadow boundary so we have to prevent it at the shadow root (see #28792).\n      this._ngZone.runOutsideAngular(() => {\n        this._cleanupShadowRootSelectStart = _bindEventWithOptions(\n          this._renderer,\n          shadowRoot,\n          'selectstart',\n          shadowDomSelectStart,\n          activeCapturingEventOptions,\n        );\n      });\n    }\n\n    if (dropContainer) {\n      const element = this._rootElement;\n      const parent = element.parentNode as HTMLElement;\n      const placeholder = (this._placeholder = this._createPlaceholderElement());\n      const anchor = (this._anchor =\n        this._anchor ||\n        this._document.createComment(\n          typeof ngDevMode === 'undefined' || ngDevMode ? 'cdk-drag-anchor' : '',\n        ));\n\n      // Insert an anchor node so that we can restore the element's position in the DOM.\n      parent.insertBefore(anchor, element);\n\n      // There's no risk of transforms stacking when inside a drop container so\n      // we can keep the initial transform up to date any time dragging starts.\n      this._initialTransform = element.style.transform || '';\n\n      // Create the preview after the initial transform has\n      // been cached, because it can be affected by the transform.\n      this._preview = new PreviewRef(\n        this._document,\n        this._rootElement,\n        this._direction,\n        this._initialDomRect!,\n        this._previewTemplate || null,\n        this.previewClass || null,\n        this._pickupPositionOnPage,\n        this._initialTransform,\n        this._config.zIndex || 1000,\n        this._renderer,\n      );\n      this._preview.attach(this._getPreviewInsertionPoint(parent, shadowRoot));\n\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n      toggleVisibility(element, false, dragImportantProperties);\n      this._document.body.appendChild(parent.replaceChild(placeholder, element));\n      this.started.next({source: this, event}); // Emit before notifying the container.\n      dropContainer.start();\n      this._initialContainer = dropContainer;\n      this._initialIndex = dropContainer.getItemIndex(this);\n    } else {\n      this.started.next({source: this, event});\n      this._initialContainer = this._initialIndex = undefined!;\n    }\n\n    // Important to run after we've called `start` on the parent container\n    // so that it has had time to resolve its scrollable parents.\n    this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n  }\n\n  /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n  private _initializeDragSequence(referenceElement: HTMLElement, event: MouseEvent | TouchEvent) {\n    // Stop propagation if the item is inside another\n    // draggable so we don't start multiple drag sequences.\n    if (this._parentDragRef) {\n      event.stopPropagation();\n    }\n\n    const isDragging = this.isDragging();\n    const isTouchSequence = isTouchEvent(event);\n    const isAuxiliaryMouseButton = !isTouchSequence && (event as MouseEvent).button !== 0;\n    const rootElement = this._rootElement;\n    const target = _getEventTarget(event);\n    const isSyntheticEvent =\n      !isTouchSequence &&\n      this._lastTouchEventTime &&\n      this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n    const isFakeEvent = isTouchSequence\n      ? isFakeTouchstartFromScreenReader(event as TouchEvent)\n      : isFakeMousedownFromScreenReader(event as MouseEvent);\n\n    // If the event started from an element with the native HTML drag&drop, it'll interfere\n    // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n    // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n    // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n    // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n    // events from firing on touch devices.\n    if (target && (target as HTMLElement).draggable && event.type === 'mousedown') {\n      event.preventDefault();\n    }\n\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n      return;\n    }\n\n    // If we've got handles, we need to disable the tap highlight on the entire root element,\n    // otherwise iOS will still add it, even though all the drag interactions on the handle\n    // are disabled.\n    if (this._handles.length) {\n      const rootStyles = rootElement.style as DragCSSStyleDeclaration;\n      this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n      rootStyles.webkitTapHighlightColor = 'transparent';\n    }\n\n    this._hasMoved = false;\n    this._hasStartedDragging.set(this._hasMoved);\n\n    // Avoid multiple subscriptions and memory leaks when multi touch\n    // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n    this._removeListeners();\n    this._initialDomRect = this._rootElement.getBoundingClientRect();\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollSubscription = this._dragDropRegistry\n      .scrolled(this._getShadowRoot())\n      .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n\n    if (this._boundaryElement) {\n      this._boundaryRect = getMutableClientRect(this._boundaryElement);\n    }\n\n    // If we have a custom preview we can't know ahead of time how large it'll be so we position\n    // it next to the cursor. The exception is when the consumer has opted into making the preview\n    // the same size as the root element, in which case we do know the size.\n    const previewTemplate = this._previewTemplate;\n    this._pickupPositionInElement =\n      previewTemplate && previewTemplate.template && !previewTemplate.matchSize\n        ? {x: 0, y: 0}\n        : this._getPointerPositionInElement(this._initialDomRect, referenceElement, event);\n    const pointerPosition =\n      (this._pickupPositionOnPage =\n      this._lastKnownPointerPosition =\n        this._getPointerPositionOnPage(event));\n    this._pointerDirectionDelta = {x: 0, y: 0};\n    this._pointerPositionAtLastDirectionChange = {x: pointerPosition.x, y: pointerPosition.y};\n    this._dragStartTime = Date.now();\n    this._dragDropRegistry.startDragging(this, event);\n  }\n\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n  private _cleanupDragArtifacts(event: MouseEvent | TouchEvent) {\n    // Restore the element's visibility and insert it at its old position in the DOM.\n    // It's important that we maintain the position, because moving the element around in the DOM\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n    // while moving the existing elements in all other cases.\n    toggleVisibility(this._rootElement, true, dragImportantProperties);\n    this._anchor.parentNode!.replaceChild(this._rootElement, this._anchor);\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._initialDomRect =\n      this._boundaryRect =\n      this._previewRect =\n      this._initialTransform =\n        undefined;\n\n    // Re-enter the NgZone since we bound `document` events on the outside.\n    this._ngZone.run(() => {\n      const container = this._dropContainer!;\n      const currentIndex = container.getItemIndex(this);\n      const pointerPosition = this._getPointerPositionOnPage(event);\n      const distance = this._getDragDistance(pointerPosition);\n      const isPointerOverContainer = container._isOverContainer(\n        pointerPosition.x,\n        pointerPosition.y,\n      );\n\n      this.ended.next({source: this, distance, dropPoint: pointerPosition, event});\n      this.dropped.next({\n        item: this,\n        currentIndex,\n        previousIndex: this._initialIndex,\n        container: container,\n        previousContainer: this._initialContainer,\n        isPointerOverContainer,\n        distance,\n        dropPoint: pointerPosition,\n        event,\n      });\n      container.drop(\n        this,\n        currentIndex,\n        this._initialIndex,\n        this._initialContainer,\n        isPointerOverContainer,\n        distance,\n        pointerPosition,\n        event,\n      );\n      this._dropContainer = this._initialContainer;\n    });\n  }\n\n  /**\n   * Updates the item's position in its drop container, or moves it\n   * into a new one, depending on its current drag position.\n   */\n  private _updateActiveDropContainer({x, y}: Point, {x: rawX, y: rawY}: Point) {\n    // Drop container that draggable has been moved into.\n    let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n\n    // If we couldn't find a new container to move the item into, and the item has left its\n    // initial container, check whether the it's over the initial container. This handles the\n    // case where two containers are connected one way and the user tries to undo dragging an\n    // item into a new container.\n    if (\n      !newContainer &&\n      this._dropContainer !== this._initialContainer &&\n      this._initialContainer._isOverContainer(x, y)\n    ) {\n      newContainer = this._initialContainer;\n    }\n\n    if (newContainer && newContainer !== this._dropContainer) {\n      this._ngZone.run(() => {\n        // Notify the old container that the item has left.\n        this.exited.next({item: this, container: this._dropContainer!});\n        this._dropContainer!.exit(this);\n        // Notify the new container that the item has entered.\n        this._dropContainer = newContainer!;\n        this._dropContainer.enter(\n          this,\n          x,\n          y,\n          newContainer === this._initialContainer &&\n            // If we're re-entering the initial container and sorting is disabled,\n            // put item the into its starting index to begin with.\n            newContainer.sortingDisabled\n            ? this._initialIndex\n            : undefined,\n        );\n        this.entered.next({\n          item: this,\n          container: newContainer!,\n          currentIndex: newContainer!.getItemIndex(this),\n        });\n      });\n    }\n\n    // Dragging may have been interrupted as a result of the events above.\n    if (this.isDragging()) {\n      this._dropContainer!._startScrollingIfNecessary(rawX, rawY);\n      this._dropContainer!._sortItem(this, x, y, this._pointerDirectionDelta);\n\n      if (this.constrainPosition) {\n        this._applyPreviewTransform(x, y);\n      } else {\n        this._applyPreviewTransform(\n          x - this._pickupPositionInElement.x,\n          y - this._pickupPositionInElement.y,\n        );\n      }\n    }\n  }\n\n  /**\n   * Animates the preview element from its current position to the location of the drop placeholder.\n   * @returns Promise that resolves when the animation completes.\n   */\n  private _animatePreviewToPlaceholder(): Promise<void> {\n    // If the user hasn't moved yet, the transitionend event won't fire.\n    if (!this._hasMoved) {\n      return Promise.resolve();\n    }\n\n    const placeholderRect = this._placeholder.getBoundingClientRect();\n\n    // Apply the class that adds a transition to the preview.\n    this._preview!.addClass('cdk-drag-animating');\n\n    // Move the preview to the placeholder position.\n    this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n    // apply its style, we take advantage of the available info to figure out whether we need to\n    // bind the event in the first place.\n    const duration = this._preview!.getTransitionDuration();\n\n    if (duration === 0) {\n      return Promise.resolve();\n    }\n\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        const handler = (event: TransitionEvent) => {\n          if (\n            !event ||\n            (this._preview &&\n              _getEventTarget(event) === this._preview.element &&\n              event.propertyName === 'transform')\n          ) {\n            cleanupListener();\n            resolve();\n            clearTimeout(timeout);\n          }\n        };\n\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n        // fire if the transition hasn't completed when it was supposed to.\n        const timeout = setTimeout(handler as Function, duration * 1.5);\n        const cleanupListener = this._preview!.addEventListener('transitionend', handler);\n      });\n    });\n  }\n\n  /** Creates an element that will be shown instead of the current element while dragging. */\n  private _createPlaceholderElement(): HTMLElement {\n    const placeholderConfig = this._placeholderTemplate;\n    const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n    let placeholder: HTMLElement;\n\n    if (placeholderTemplate) {\n      this._placeholderRef = placeholderConfig!.viewContainer.createEmbeddedView(\n        placeholderTemplate,\n        placeholderConfig!.context,\n      );\n      this._placeholderRef.detectChanges();\n      placeholder = getRootNode(this._placeholderRef, this._document);\n    } else {\n      placeholder = deepCloneNode(this._rootElement);\n    }\n\n    // Stop pointer events on the preview so the user can't\n    // interact with it while the preview is animating.\n    placeholder.style.pointerEvents = 'none';\n    placeholder.classList.add('cdk-drag-placeholder');\n    return placeholder;\n  }\n\n  /**\n   * Figures out the coordinates at which an element was picked up.\n   * @param referenceElement Element that initiated the dragging.\n   * @param event Event that initiated the dragging.\n   */\n  private _getPointerPositionInElement(\n    elementRect: DOMRect,\n    referenceElement: HTMLElement,\n    event: MouseEvent | TouchEvent,\n  ): Point {\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n    const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n    const scrollPosition = this._getViewportScrollPosition();\n    const x = point.pageX - referenceRect.left - scrollPosition.left;\n    const y = point.pageY - referenceRect.top - scrollPosition.top;\n\n    return {\n      x: referenceRect.left - elementRect.left + x,\n      y: referenceRect.top - elementRect.top + y,\n    };\n  }\n\n  /** Determines the point of the page that was touched by the user. */\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\n    const scrollPosition = this._getViewportScrollPosition();\n    const point = isTouchEvent(event)\n      ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n        // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n        // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n        // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n        // throwing an error. The value returned here will be incorrect, but since this only\n        // breaks inside a developer tool and the value is only used for secondary information,\n        // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n        event.touches[0] || event.changedTouches[0] || {pageX: 0, pageY: 0}\n      : event;\n\n    const x = point.pageX - scrollPosition.left;\n    const y = point.pageY - scrollPosition.top;\n\n    // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n    // coordinate system\n    if (this._ownerSVGElement) {\n      const svgMatrix = this._ownerSVGElement.getScreenCTM();\n      if (svgMatrix) {\n        const svgPoint = this._ownerSVGElement.createSVGPoint();\n        svgPoint.x = x;\n        svgPoint.y = y;\n        return svgPoint.matrixTransform(svgMatrix.inverse());\n      }\n    }\n\n    return {x, y};\n  }\n\n  /** Gets the pointer position on the page, accounting for any position constraints. */\n  private _getConstrainedPointerPosition(point: Point): Point {\n    const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n    let {x, y} = this.constrainPosition\n      ? this.constrainPosition(point, this, this._initialDomRect!, this._pickupPositionInElement)\n      : point;\n\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n      y =\n        this._pickupPositionOnPage.y -\n        (this.constrainPosition ? this._pickupPositionInElement.y : 0);\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n      x =\n        this._pickupPositionOnPage.x -\n        (this.constrainPosition ? this._pickupPositionInElement.x : 0);\n    }\n\n    if (this._boundaryRect) {\n      // If not using a custom constrain we need to account for the pickup position in the element\n      // otherwise we do not need to do this, as it has already been accounted for\n      const {x: pickupX, y: pickupY} = !this.constrainPosition\n        ? this._pickupPositionInElement\n        : {x: 0, y: 0};\n\n      const boundaryRect = this._boundaryRect;\n      const {width: previewWidth, height: previewHeight} = this._getPreviewRect();\n      const minY = boundaryRect.top + pickupY;\n      const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n      const minX = boundaryRect.left + pickupX;\n      const maxX = boundaryRect.right - (previewWidth - pickupX);\n\n      x = clamp(x, minX, maxX);\n      y = clamp(y, minY, maxY);\n    }\n\n    return {x, y};\n  }\n\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\n  private _updatePointerDirectionDelta(pointerPositionOnPage: Point) {\n    const {x, y} = pointerPositionOnPage;\n    const delta = this._pointerDirectionDelta;\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n\n    // Amount of pixels the user has dragged since the last time the direction changed.\n    const changeX = Math.abs(x - positionSinceLastChange.x);\n    const changeY = Math.abs(y - positionSinceLastChange.y);\n\n    // Because we handle pointer events on a per-pixel basis, we don't want the delta\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\n    // To make the delta more consistent, we track how much the user has moved since the last\n    // delta change and we only update it after it has reached a certain threshold.\n    if (changeX > this._config.pointerDirectionChangeThreshold) {\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\n      positionSinceLastChange.x = x;\n    }\n\n    if (changeY > this._config.pointerDirectionChangeThreshold) {\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\n      positionSinceLastChange.y = y;\n    }\n\n    return delta;\n  }\n\n  /** Toggles the native drag interactions, based on how many handles are registered. */\n  private _toggleNativeDragInteractions() {\n    if (!this._rootElement || !this._handles) {\n      return;\n    }\n\n    const shouldEnable = this._handles.length > 0 || !this.isDragging();\n\n    if (shouldEnable !== this._nativeInteractionsEnabled) {\n      this._nativeInteractionsEnabled = shouldEnable;\n      toggleNativeDragInteractions(this._rootElement, shouldEnable);\n    }\n  }\n\n  /** Removes the manually-added event listeners from the root element. */\n  private _removeRootElementListeners() {\n    this._rootElementCleanups?.forEach(cleanup => cleanup());\n    this._rootElementCleanups = undefined;\n  }\n\n  /**\n   * Applies a `transform` to the root element, taking into account any existing transforms on it.\n   * @param x New transform value along the X axis.\n   * @param y New transform value along the Y axis.\n   */\n  private _applyRootElementTransform(x: number, y: number) {\n    const scale = 1 / this.scale;\n    const transform = getTransform(x * scale, y * scale);\n    const styles = this._rootElement.style;\n\n    // Cache the previous transform amount only after the first drag sequence, because\n    // we don't want our own transforms to stack on top of each other.\n    // Should be excluded none because none + translate3d(x, y, x) is invalid css\n    if (this._initialTransform == null) {\n      this._initialTransform =\n        styles.transform && styles.transform != 'none' ? styles.transform : '';\n    }\n\n    // Preserve the previous `transform` value, if there was one. Note that we apply our own\n    // transform before the user's, because things like rotation can affect which direction\n    // the element will be translated towards.\n    styles.transform = combineTransforms(transform, this._initialTransform);\n  }\n\n  /**\n   * Applies a `transform` to the preview, taking into account any existing transforms on it.\n   * @param x New transform value along the X axis.\n   * @param y New transform value along the Y axis.\n   */\n  private _applyPreviewTransform(x: number, y: number) {\n    // Only apply the initial transform if the preview is a clone of the original element, otherwise\n    // it could be completely different and the transform might not make sense anymore.\n    const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n    const transform = getTransform(x, y);\n    this._preview!.setTransform(combineTransforms(transform, initialTransform));\n  }\n\n  /**\n   * Gets the distance that the user has dragged during the current drag sequence.\n   * @param currentPosition Current position of the user's pointer.\n   */\n  private _getDragDistance(currentPosition: Point): Point {\n    const pickupPosition = this._pickupPositionOnPage;\n\n    if (pickupPosition) {\n      return {x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y};\n    }\n\n    return {x: 0, y: 0};\n  }\n\n  /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n  private _cleanupCachedDimensions() {\n    this._boundaryRect = this._previewRect = undefined;\n    this._parentPositions.clear();\n  }\n\n  /**\n   * Checks whether the element is still inside its boundary after the viewport has been resized.\n   * If not, the position is adjusted so that the element fits again.\n   */\n  private _containInsideBoundaryOnResize() {\n    let {x, y} = this._passiveTransform;\n\n    if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n      return;\n    }\n\n    // Note: don't use `_clientRectAtStart` here, because we want the latest position.\n    const elementRect = this._rootElement.getBoundingClientRect();\n    const boundaryRect = this._boundaryElement.getBoundingClientRect();\n\n    // It's possible that the element got hidden away after dragging (e.g. by switching to a\n    // different tab). Don't do anything in this case so we don't clear the user's position.\n    if (\n      (boundaryRect.width === 0 && boundaryRect.height === 0) ||\n      (elementRect.width === 0 && elementRect.height === 0)\n    ) {\n      return;\n    }\n\n    const leftOverflow = boundaryRect.left - elementRect.left;\n    const rightOverflow = elementRect.right - boundaryRect.right;\n    const topOverflow = boundaryRect.top - elementRect.top;\n    const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n\n    // If the element has become wider than the boundary, we can't\n    // do much to make it fit so we just anchor it to the left.\n    if (boundaryRect.width > elementRect.width) {\n      if (leftOverflow > 0) {\n        x += leftOverflow;\n      }\n\n      if (rightOverflow > 0) {\n        x -= rightOverflow;\n      }\n    } else {\n      x = 0;\n    }\n\n    // If the element has become taller than the boundary, we can't\n    // do much to make it fit so we just anchor it to the top.\n    if (boundaryRect.height > elementRect.height) {\n      if (topOverflow > 0) {\n        y += topOverflow;\n      }\n\n      if (bottomOverflow > 0) {\n        y -= bottomOverflow;\n      }\n    } else {\n      y = 0;\n    }\n\n    if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n      this.setFreeDragPosition({y, x});\n    }\n  }\n\n  /** Gets the drag start delay, based on the event type. */\n  private _getDragStartDelay(event: MouseEvent | TouchEvent): number {\n    const value = this.dragStartDelay;\n\n    if (typeof value === 'number') {\n      return value;\n    } else if (isTouchEvent(event)) {\n      return value.touch;\n    }\n\n    return value ? value.mouse : 0;\n  }\n\n  /** Updates the internal state of the draggable element when scrolling has occurred. */\n  private _updateOnScroll(event: Event) {\n    const scrollDifference = this._parentPositions.handleScroll(event);\n\n    if (scrollDifference) {\n      const target = _getEventTarget<HTMLElement | Document>(event)!;\n\n      // DOMRect dimensions are based on the scroll position of the page and its parent\n      // node so we have to update the cached boundary DOMRect if the user has scrolled.\n      if (\n        this._boundaryRect &&\n        target !== this._boundaryElement &&\n        target.contains(this._boundaryElement)\n      ) {\n        adjustDomRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n      }\n\n      this._pickupPositionOnPage.x += scrollDifference.left;\n      this._pickupPositionOnPage.y += scrollDifference.top;\n\n      // If we're in free drag mode, we have to update the active transform, because\n      // it isn't relative to the viewport like the preview inside a drop list.\n      if (!this._dropContainer) {\n        this._activeTransform.x -= scrollDifference.left;\n        this._activeTransform.y -= scrollDifference.top;\n        this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n      }\n    }\n  }\n\n  /** Gets the scroll position of the viewport. */\n  private _getViewportScrollPosition() {\n    return (\n      this._parentPositions.positions.get(this._document)?.scrollPosition ||\n      this._parentPositions.getViewportScrollPosition()\n    );\n  }\n\n  /**\n   * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n   * than saving it in property directly on init, because we want to resolve it as late as possible\n   * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n   * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n   */\n  private _getShadowRoot(): ShadowRoot | null {\n    if (this._cachedShadowRoot === undefined) {\n      this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n    }\n\n    return this._cachedShadowRoot;\n  }\n\n  /** Gets the element into which the drag preview should be inserted. */\n  private _getPreviewInsertionPoint(\n    initialParent: HTMLElement,\n    shadowRoot: ShadowRoot | null,\n  ): HTMLElement {\n    const previewContainer = this._previewContainer || 'global';\n\n    if (previewContainer === 'parent') {\n      return initialParent;\n    }\n\n    if (previewContainer === 'global') {\n      const documentRef = this._document;\n\n      // We can't use the body if the user is in fullscreen mode,\n      // because the preview will render under the fullscreen element.\n      // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n      return (\n        shadowRoot ||\n        documentRef.fullscreenElement ||\n        (documentRef as any).webkitFullscreenElement ||\n        (documentRef as any).mozFullScreenElement ||\n        (documentRef as any).msFullscreenElement ||\n        documentRef.body\n      );\n    }\n\n    return coerceElement(previewContainer);\n  }\n\n  /** Lazily resolves and returns the dimensions of the preview. */\n  private _getPreviewRect(): DOMRect {\n    // Cache the preview element rect if we haven't cached it already or if\n    // we cached it too early before the element dimensions were computed.\n    if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n      this._previewRect = this._preview\n        ? this._preview!.getBoundingClientRect()\n        : this._initialDomRect!;\n    }\n\n    return this._previewRect;\n  }\n\n  /** Handles a native `dragstart` event. */\n  private _nativeDragStart = (event: DragEvent) => {\n    if (this._handles.length) {\n      const targetHandle = this._getTargetHandle(event);\n\n      if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n        event.preventDefault();\n      }\n    } else if (!this.disabled) {\n      // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n      // but some cases like dragging of links can slip through (see #24403).\n      event.preventDefault();\n    }\n  };\n\n  /** Gets a handle that is the target of an event. */\n  private _getTargetHandle(event: Event): HTMLElement | undefined {\n    return this._handles.find(handle => {\n      return event.target && (event.target === handle || handle.contains(event.target as Node));\n    });\n  }\n}\n\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp(value: number, min: number, max: number) {\n  return Math.max(min, Math.min(max, value));\n}\n\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n  // This function is called for every pixel that the user has dragged so we need it to be\n  // as fast as possible. Since we only bind mouse events and touch events, we can assume\n  // that if the event's name starts with `t`, it's a touch event.\n  return event.type[0] === 't';\n}\n\n/** Callback invoked for `selectstart` events inside the shadow DOM. */\nfunction shadowDomSelectStart(event: Event) {\n  event.preventDefault();\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nexport function moveItemInArray<T = any>(array: T[], fromIndex: number, toIndex: number): void {\n  const from = clamp(fromIndex, array.length - 1);\n  const to = clamp(toIndex, array.length - 1);\n\n  if (from === to) {\n    return;\n  }\n\n  const target = array[from];\n  const delta = to < from ? -1 : 1;\n\n  for (let i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n\n  array[to] = target;\n}\n\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nexport function transferArrayItem<T = any>(\n  currentArray: T[],\n  targetArray: T[],\n  currentIndex: number,\n  targetIndex: number,\n): void {\n  const from = clamp(currentIndex, currentArray.length - 1);\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nexport function copyArrayItem<T = any>(\n  currentArray: T[],\n  targetArray: T[],\n  currentIndex: number,\n  targetIndex: number,\n): void {\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray[currentIndex]);\n  }\n}\n\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value: number, max: number): number {\n  return Math.max(0, Math.min(max, value));\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Direction} from '../../bidi';\nimport {DragDropRegistry} from '../drag-drop-registry';\nimport {moveItemInArray} from '../drag-utils';\nimport {combineTransforms} from '../dom/styling';\nimport {adjustDomRect, getMutableClientRect, isInsideClientRect} from '../dom/dom-rect';\nimport {DropListSortStrategy, SortPredicate} from './drop-list-sort-strategy';\nimport type {DragRef} from '../drag-ref';\n\n/**\n * Entry in the position cache for draggable items.\n * @docs-private\n */\ninterface CachedItemPosition<T> {\n  /** Instance of the drag item. */\n  drag: T;\n  /** Dimensions of the item. */\n  clientRect: DOMRect;\n  /** Amount by which the item has been moved since dragging started. */\n  offset: number;\n  /** Inline transform that the drag item had when dragging started. */\n  initialTransform: string;\n}\n\n/**\n * Strategy that only supports sorting along a single axis.\n * Items are reordered using CSS transforms which allows for sorting to be animated.\n * @docs-private\n */\nexport class SingleAxisSortStrategy implements DropListSortStrategy {\n  /** Root element container of the drop list. */\n  private _element: HTMLElement;\n\n  /** Function used to determine if an item can be sorted into a specific index. */\n  private _sortPredicate: SortPredicate<DragRef>;\n\n  /** Cache of the dimensions of all the items inside the container. */\n  private _itemPositions: CachedItemPosition<DragRef>[] = [];\n\n  /**\n   * Draggable items that are currently active inside the container. Includes the items\n   * that were there at the start of the sequence, as well as any items that have been dragged\n   * in, but haven't been dropped yet.\n   */\n  private _activeDraggables: DragRef[];\n\n  /** Direction in which the list is oriented. */\n  orientation: 'vertical' | 'horizontal' = 'vertical';\n\n  /** Layout direction of the drop list. */\n  direction: Direction;\n\n  constructor(private _dragDropRegistry: DragDropRegistry) {}\n\n  /**\n   * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n   * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n   * overlap with the swapped item after the swapping occurred.\n   */\n  private _previousSwap = {\n    drag: null as DragRef | null,\n    delta: 0,\n    overlaps: false,\n  };\n\n  /**\n   * To be called when the drag sequence starts.\n   * @param items Items that are currently in the list.\n   */\n  start(items: readonly DragRef[]) {\n    this.withItems(items);\n  }\n\n  /**\n   * To be called when an item is being sorted.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  sort(item: DragRef, pointerX: number, pointerY: number, pointerDelta: {x: number; y: number}) {\n    const siblings = this._itemPositions;\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n\n    if (newIndex === -1 && siblings.length > 0) {\n      return null;\n    }\n\n    const isHorizontal = this.orientation === 'horizontal';\n    const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n    const siblingAtNewPosition = siblings[newIndex];\n    const currentPosition = siblings[currentIndex].clientRect;\n    const newPosition = siblingAtNewPosition.clientRect;\n    const delta = currentIndex > newIndex ? 1 : -1;\n\n    // How many pixels the item's placeholder should be offset.\n    const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n\n    // How many pixels all the other items should be offset.\n    const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n\n    // Save the previous order of the items before moving the item to its new index.\n    // We use this to check whether an item has been moved as a result of the sorting.\n    const oldOrder = siblings.slice();\n\n    // Shuffle the array in place.\n    moveItemInArray(siblings, currentIndex, newIndex);\n\n    siblings.forEach((sibling, index) => {\n      // Don't do anything if the position hasn't changed.\n      if (oldOrder[index] === sibling) {\n        return;\n      }\n\n      const isDraggedItem = sibling.drag === item;\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\n      const elementToOffset = isDraggedItem\n        ? item.getPlaceholderElement()\n        : sibling.drag.getRootElement();\n\n      // Update the offset to reflect the new position.\n      sibling.offset += offset;\n\n      const transformAmount = Math.round(sibling.offset * (1 / sibling.drag.scale));\n\n      // Since we're moving the items with a `transform`, we need to adjust their cached\n      // client rects to reflect their new position, as well as swap their positions in the cache.\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n      // elements may be mid-animation which will give us a wrong result.\n      if (isHorizontal) {\n        // Round the transforms since some browsers will\n        // blur the elements, for sub-pixel transforms.\n        elementToOffset.style.transform = combineTransforms(\n          `translate3d(${transformAmount}px, 0, 0)`,\n          sibling.initialTransform,\n        );\n        adjustDomRect(sibling.clientRect, 0, offset);\n      } else {\n        elementToOffset.style.transform = combineTransforms(\n          `translate3d(0, ${transformAmount}px, 0)`,\n          sibling.initialTransform,\n        );\n        adjustDomRect(sibling.clientRect, offset, 0);\n      }\n    });\n\n    // Note that it's important that we do this after the client rects have been adjusted.\n    this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n    this._previousSwap.drag = siblingAtNewPosition.drag;\n    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n\n    return {previousIndex: currentIndex, currentIndex: newIndex};\n  }\n\n  /**\n   * Called when an item is being moved into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param index Index at which the item entered. If omitted, the container will try to figure it\n   *   out automatically.\n   */\n  enter(item: DragRef, pointerX: number, pointerY: number, index?: number): void {\n    const newIndex =\n      index == null || index < 0\n        ? // We use the coordinates of where the item entered the drop\n          // zone to figure out at which index it should be inserted.\n          this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n        : index;\n\n    const activeDraggables = this._activeDraggables;\n    const currentIndex = activeDraggables.indexOf(item);\n    const placeholder = item.getPlaceholderElement();\n    let newPositionReference: DragRef | undefined = activeDraggables[newIndex];\n\n    // If the item at the new position is the same as the item that is being dragged,\n    // it means that we're trying to restore the item to its initial position. In this\n    // case we should use the next item from the list as the reference.\n    if (newPositionReference === item) {\n      newPositionReference = activeDraggables[newIndex + 1];\n    }\n\n    // If we didn't find a new position reference, it means that either the item didn't start off\n    // in this container, or that the item requested to be inserted at the end of the list.\n    if (\n      !newPositionReference &&\n      (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) &&\n      this._shouldEnterAsFirstChild(pointerX, pointerY)\n    ) {\n      newPositionReference = activeDraggables[0];\n    }\n\n    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n    // into another container and back again), we have to ensure that it isn't duplicated.\n    if (currentIndex > -1) {\n      activeDraggables.splice(currentIndex, 1);\n    }\n\n    // Don't use items that are being dragged as a reference, because\n    // their element has been moved down to the bottom of the body.\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n      const element = newPositionReference.getRootElement();\n      element.parentElement!.insertBefore(placeholder, element);\n      activeDraggables.splice(newIndex, 0, item);\n    } else {\n      this._element.appendChild(placeholder);\n      activeDraggables.push(item);\n    }\n\n    // The transform needs to be cleared so it doesn't throw off the measurements.\n    placeholder.style.transform = '';\n\n    // Note that usually `start` is called together with `enter` when an item goes into a new\n    // container. This will cache item positions, but we need to refresh them since the amount\n    // of items has changed.\n    this._cacheItemPositions();\n  }\n\n  /** Sets the items that are currently part of the list. */\n  withItems(items: readonly DragRef[]): void {\n    this._activeDraggables = items.slice();\n    this._cacheItemPositions();\n  }\n\n  /** Assigns a sort predicate to the strategy. */\n  withSortPredicate(predicate: SortPredicate<DragRef>): void {\n    this._sortPredicate = predicate;\n  }\n\n  /** Resets the strategy to its initial state before dragging was started. */\n  reset() {\n    // TODO(crisbeto): may have to wait for the animations to finish.\n    this._activeDraggables?.forEach(item => {\n      const rootElement = item.getRootElement();\n\n      if (rootElement) {\n        const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\n        rootElement.style.transform = initialTransform || '';\n      }\n    });\n\n    this._itemPositions = [];\n    this._activeDraggables = [];\n    this._previousSwap.drag = null;\n    this._previousSwap.delta = 0;\n    this._previousSwap.overlaps = false;\n  }\n\n  /**\n   * Gets a snapshot of items currently in the list.\n   * Can include items that we dragged in from another list.\n   */\n  getActiveItemsSnapshot(): readonly DragRef[] {\n    return this._activeDraggables;\n  }\n\n  /** Gets the index of a specific item. */\n  getItemIndex(item: DragRef): number {\n    // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n    // The rest of the logic still stands no matter what orientation we're in, however\n    // we need to invert the array when determining the index.\n    const items =\n      this.orientation === 'horizontal' && this.direction === 'rtl'\n        ? this._itemPositions.slice().reverse()\n        : this._itemPositions;\n\n    return items.findIndex(currentItem => currentItem.drag === item);\n  }\n\n  /** Used to notify the strategy that the scroll position has changed. */\n  updateOnScroll(topDifference: number, leftDifference: number) {\n    // Since we know the amount that the user has scrolled we can shift all of the\n    // client rectangles ourselves. This is cheaper than re-measuring everything and\n    // we can avoid inconsistent behavior where we might be measuring the element before\n    // its position has changed.\n    this._itemPositions.forEach(({clientRect}) => {\n      adjustDomRect(clientRect, topDifference, leftDifference);\n    });\n\n    // We need two loops for this, because we want all of the cached\n    // positions to be up-to-date before we re-sort the item.\n    this._itemPositions.forEach(({drag}) => {\n      if (this._dragDropRegistry.isDragging(drag)) {\n        // We need to re-sort the item manually, because the pointer move\n        // events won't be dispatched while the user is scrolling.\n        drag._sortFromLastPointerPosition();\n      }\n    });\n  }\n\n  withElementContainer(container: HTMLElement): void {\n    this._element = container;\n  }\n\n  /** Refreshes the position cache of the items and sibling containers. */\n  private _cacheItemPositions() {\n    const isHorizontal = this.orientation === 'horizontal';\n\n    this._itemPositions = this._activeDraggables\n      .map(drag => {\n        const elementToMeasure = drag.getVisibleElement();\n        return {\n          drag,\n          offset: 0,\n          initialTransform: elementToMeasure.style.transform || '',\n          clientRect: getMutableClientRect(elementToMeasure),\n        };\n      })\n      .sort((a, b) => {\n        return isHorizontal\n          ? a.clientRect.left - b.clientRect.left\n          : a.clientRect.top - b.clientRect.top;\n      });\n  }\n\n  /**\n   * Gets the offset in pixels by which the item that is being dragged should be moved.\n   * @param currentPosition Current position of the item.\n   * @param newPosition Position of the item where the current item should be moved.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getItemOffsetPx(currentPosition: DOMRect, newPosition: DOMRect, delta: 1 | -1) {\n    const isHorizontal = this.orientation === 'horizontal';\n    let itemOffset = isHorizontal\n      ? newPosition.left - currentPosition.left\n      : newPosition.top - currentPosition.top;\n\n    // Account for differences in the item width/height.\n    if (delta === -1) {\n      itemOffset += isHorizontal\n        ? newPosition.width - currentPosition.width\n        : newPosition.height - currentPosition.height;\n    }\n\n    return itemOffset;\n  }\n\n  /**\n   * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n   * @param currentIndex Index of the item currently being dragged.\n   * @param siblings All of the items in the list.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getSiblingOffsetPx(\n    currentIndex: number,\n    siblings: CachedItemPosition<DragRef>[],\n    delta: 1 | -1,\n  ) {\n    const isHorizontal = this.orientation === 'horizontal';\n    const currentPosition = siblings[currentIndex].clientRect;\n    const immediateSibling = siblings[currentIndex + delta * -1];\n    let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n\n    if (immediateSibling) {\n      const start = isHorizontal ? 'left' : 'top';\n      const end = isHorizontal ? 'right' : 'bottom';\n\n      // Get the spacing between the start of the current item and the end of the one immediately\n      // after it in the direction in which the user is dragging, or vice versa. We add it to the\n      // offset in order to push the element to where it will be when it's inline and is influenced\n      // by the `margin` of its siblings.\n      if (delta === -1) {\n        siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n      } else {\n        siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n      }\n    }\n\n    return siblingOffset;\n  }\n\n  /**\n   * Checks if pointer is entering in the first position\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   */\n  private _shouldEnterAsFirstChild(pointerX: number, pointerY: number) {\n    if (!this._activeDraggables.length) {\n      return false;\n    }\n\n    const itemPositions = this._itemPositions;\n    const isHorizontal = this.orientation === 'horizontal';\n\n    // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n    // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n    const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n    if (reversed) {\n      const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n      return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n    } else {\n      const firstItemRect = itemPositions[0].clientRect;\n      return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n    }\n  }\n\n  /**\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\n   * @param item Item that is being sorted.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   * @param delta Direction in which the user is moving their pointer.\n   */\n  private _getItemIndexFromPointerPosition(\n    item: DragRef,\n    pointerX: number,\n    pointerY: number,\n    delta?: {x: number; y: number},\n  ): number {\n    const isHorizontal = this.orientation === 'horizontal';\n    const index = this._itemPositions.findIndex(({drag, clientRect}) => {\n      // Skip the item itself.\n      if (drag === item) {\n        return false;\n      }\n\n      if (delta) {\n        const direction = isHorizontal ? delta.x : delta.y;\n\n        // If the user is still hovering over the same item as last time, their cursor hasn't left\n        // the item after we made the swap, and they didn't change the direction in which they're\n        // dragging, we don't consider it a direction swap.\n        if (\n          drag === this._previousSwap.drag &&\n          this._previousSwap.overlaps &&\n          direction === this._previousSwap.delta\n        ) {\n          return false;\n        }\n      }\n\n      return isHorizontal\n        ? // Round these down since most browsers report client rects with\n          // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n          pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\n        : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n    });\n\n    return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {_getShadowRoot} from '../../platform';\nimport {moveItemInArray} from '../drag-utils';\nimport {DropListSortStrategy, SortPredicate} from './drop-list-sort-strategy';\nimport {DragDropRegistry} from '../drag-drop-registry';\nimport type {DragRef} from '../drag-ref';\n\n/**\n * Strategy that only supports sorting on a list that might wrap.\n * Items are reordered by moving their DOM nodes around.\n * @docs-private\n */\nexport class MixedSortStrategy implements DropListSortStrategy {\n  /** Root element container of the drop list. */\n  private _element: HTMLElement;\n\n  /** Function used to determine if an item can be sorted into a specific index. */\n  private _sortPredicate: SortPredicate<DragRef>;\n\n  /** Lazily-resolved root node containing the list. Use `_getRootNode` to read this. */\n  private _rootNode: DocumentOrShadowRoot | undefined;\n\n  /**\n   * Draggable items that are currently active inside the container. Includes the items\n   * that were there at the start of the sequence, as well as any items that have been dragged\n   * in, but haven't been dropped yet.\n   */\n  private _activeItems: DragRef[];\n\n  /**\n   * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n   * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n   * overlap with the swapped item after the swapping occurred.\n   */\n  private _previousSwap = {\n    drag: null as DragRef | null,\n    deltaX: 0,\n    deltaY: 0,\n    overlaps: false,\n  };\n\n  /**\n   * Keeps track of the relationship between a node and its next sibling. This information\n   * is used to restore the DOM to the order it was in before dragging started.\n   */\n  private _relatedNodes: [node: Node, nextSibling: Node | null][] = [];\n\n  constructor(\n    private _document: Document,\n    private _dragDropRegistry: DragDropRegistry,\n  ) {}\n\n  /**\n   * To be called when the drag sequence starts.\n   * @param items Items that are currently in the list.\n   */\n  start(items: readonly DragRef[]): void {\n    const childNodes = this._element.childNodes;\n    this._relatedNodes = [];\n\n    for (let i = 0; i < childNodes.length; i++) {\n      const node = childNodes[i];\n      this._relatedNodes.push([node, node.nextSibling]);\n    }\n\n    this.withItems(items);\n  }\n\n  /**\n   * To be called when an item is being sorted.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  sort(\n    item: DragRef,\n    pointerX: number,\n    pointerY: number,\n    pointerDelta: {x: number; y: number},\n  ): {previousIndex: number; currentIndex: number} | null {\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n    const previousSwap = this._previousSwap;\n\n    if (newIndex === -1 || this._activeItems[newIndex] === item) {\n      return null;\n    }\n\n    const toSwapWith = this._activeItems[newIndex];\n\n    // Prevent too many swaps over the same item.\n    if (\n      previousSwap.drag === toSwapWith &&\n      previousSwap.overlaps &&\n      previousSwap.deltaX === pointerDelta.x &&\n      previousSwap.deltaY === pointerDelta.y\n    ) {\n      return null;\n    }\n\n    const previousIndex = this.getItemIndex(item);\n    const current = item.getPlaceholderElement();\n    const overlapElement = toSwapWith.getRootElement();\n\n    if (newIndex > previousIndex) {\n      overlapElement.after(current);\n    } else {\n      overlapElement.before(current);\n    }\n\n    moveItemInArray(this._activeItems, previousIndex, newIndex);\n\n    const newOverlapElement = this._getRootNode().elementFromPoint(pointerX, pointerY);\n    // Note: it's tempting to save the entire `pointerDelta` object here, however that'll\n    // break this functionality, because the same object is passed for all `sort` calls.\n    previousSwap.deltaX = pointerDelta.x;\n    previousSwap.deltaY = pointerDelta.y;\n    previousSwap.drag = toSwapWith;\n    previousSwap.overlaps =\n      overlapElement === newOverlapElement || overlapElement.contains(newOverlapElement);\n\n    return {\n      previousIndex,\n      currentIndex: newIndex,\n    };\n  }\n\n  /**\n   * Called when an item is being moved into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param index Index at which the item entered. If omitted, the container will try to figure it\n   *   out automatically.\n   */\n  enter(item: DragRef, pointerX: number, pointerY: number, index?: number): void {\n    let enterIndex =\n      index == null || index < 0\n        ? this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n        : index;\n\n    // In some cases (e.g. when the container has padding) we might not be able to figure\n    // out which item to insert the dragged item next to, because the pointer didn't overlap\n    // with anything. In that case we find the item that's closest to the pointer.\n    if (enterIndex === -1) {\n      enterIndex = this._getClosestItemIndexToPointer(item, pointerX, pointerY);\n    }\n\n    const targetItem = this._activeItems[enterIndex] as DragRef | undefined;\n    const currentIndex = this._activeItems.indexOf(item);\n\n    if (currentIndex > -1) {\n      this._activeItems.splice(currentIndex, 1);\n    }\n\n    if (targetItem && !this._dragDropRegistry.isDragging(targetItem)) {\n      this._activeItems.splice(enterIndex, 0, item);\n      targetItem.getRootElement().before(item.getPlaceholderElement());\n    } else {\n      this._activeItems.push(item);\n      this._element.appendChild(item.getPlaceholderElement());\n    }\n  }\n\n  /** Sets the items that are currently part of the list. */\n  withItems(items: readonly DragRef[]): void {\n    this._activeItems = items.slice();\n  }\n\n  /** Assigns a sort predicate to the strategy. */\n  withSortPredicate(predicate: SortPredicate<DragRef>): void {\n    this._sortPredicate = predicate;\n  }\n\n  /** Resets the strategy to its initial state before dragging was started. */\n  reset(): void {\n    const root = this._element;\n    const previousSwap = this._previousSwap;\n\n    // Moving elements around in the DOM can break things like the `@for` loop, because it\n    // uses comment nodes to know where to insert elements. To avoid such issues, we restore\n    // the DOM nodes in the list to their original order when the list is reset.\n    // Note that this could be simpler if we just saved all the nodes, cleared the root\n    // and then appended them in the original order. We don't do it, because it can break\n    // down depending on when the snapshot was taken. E.g. we may end up snapshotting the\n    // placeholder element which is removed after dragging.\n    for (let i = this._relatedNodes.length - 1; i > -1; i--) {\n      const [node, nextSibling] = this._relatedNodes[i];\n      if (node.parentNode === root && node.nextSibling !== nextSibling) {\n        if (nextSibling === null) {\n          root.appendChild(node);\n        } else if (nextSibling.parentNode === root) {\n          root.insertBefore(node, nextSibling);\n        }\n      }\n    }\n\n    this._relatedNodes = [];\n    this._activeItems = [];\n    previousSwap.drag = null;\n    previousSwap.deltaX = previousSwap.deltaY = 0;\n    previousSwap.overlaps = false;\n  }\n\n  /**\n   * Gets a snapshot of items currently in the list.\n   * Can include items that we dragged in from another list.\n   */\n  getActiveItemsSnapshot(): readonly DragRef[] {\n    return this._activeItems;\n  }\n\n  /** Gets the index of a specific item. */\n  getItemIndex(item: DragRef): number {\n    return this._activeItems.indexOf(item);\n  }\n\n  /** Used to notify the strategy that the scroll position has changed. */\n  updateOnScroll(): void {\n    this._activeItems.forEach(item => {\n      if (this._dragDropRegistry.isDragging(item)) {\n        // We need to re-sort the item manually, because the pointer move\n        // events won't be dispatched while the user is scrolling.\n        item._sortFromLastPointerPosition();\n      }\n    });\n  }\n\n  withElementContainer(container: HTMLElement): void {\n    if (container !== this._element) {\n      this._element = container;\n      this._rootNode = undefined;\n    }\n  }\n\n  /**\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\n   * @param item Item that is being sorted.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   * @param delta Direction in which the user is moving their pointer.\n   */\n  private _getItemIndexFromPointerPosition(\n    item: DragRef,\n    pointerX: number,\n    pointerY: number,\n  ): number {\n    const elementAtPoint = this._getRootNode().elementFromPoint(\n      Math.floor(pointerX),\n      Math.floor(pointerY),\n    );\n    const index = elementAtPoint\n      ? this._activeItems.findIndex(item => {\n          const root = item.getRootElement();\n          return elementAtPoint === root || root.contains(elementAtPoint);\n        })\n      : -1;\n    return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n  }\n\n  /** Lazily resolves the list's root node. */\n  private _getRootNode(): DocumentOrShadowRoot {\n    // Resolve the root node lazily to ensure that the drop list is in its final place in the DOM.\n    if (!this._rootNode) {\n      this._rootNode = _getShadowRoot(this._element) || this._document;\n    }\n    return this._rootNode;\n  }\n\n  /**\n   * Finds the index of the item that's closest to the item being dragged.\n   * @param item Item being dragged.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   */\n  private _getClosestItemIndexToPointer(item: DragRef, pointerX: number, pointerY: number): number {\n    if (this._activeItems.length === 0) {\n      return -1;\n    }\n\n    if (this._activeItems.length === 1) {\n      return 0;\n    }\n\n    let minDistance = Infinity;\n    let minIndex = -1;\n\n    // Find the Euclidean distance (https://en.wikipedia.org/wiki/Euclidean_distance) between each\n    // item and the pointer, and return the smallest one. Note that this is a bit flawed in that DOM\n    // nodes are rectangles, not points, so we use the top/left coordinates. It should be enough\n    // for our purposes.\n    for (let i = 0; i < this._activeItems.length; i++) {\n      const current = this._activeItems[i];\n      if (current !== item) {\n        const {x, y} = current.getRootElement().getBoundingClientRect();\n        const distance = Math.hypot(pointerX - x, pointerY - y);\n\n        if (distance < minDistance) {\n          minDistance = distance;\n          minIndex = i;\n        }\n      }\n    }\n\n    return minIndex;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Direction} from '../bidi';\nimport {coerceElement} from '../coercion';\nimport {ViewportRuler} from '../scrolling';\nimport {_getShadowRoot} from '../platform';\nimport {Subject, Subscription, interval, animationFrameScheduler} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport type {DragRef, Point} from './drag-ref';\nimport {isPointerNearDomRect, isInsideClientRect} from './dom/dom-rect';\nimport {ParentPositionTracker} from './dom/parent-position-tracker';\nimport {DragCSSStyleDeclaration} from './dom/styling';\nimport {DropListSortStrategy} from './sorting/drop-list-sort-strategy';\nimport {SingleAxisSortStrategy} from './sorting/single-axis-sort-strategy';\nimport {MixedSortStrategy} from './sorting/mixed-sort-strategy';\nimport {DropListOrientation} from './directives/config';\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n\n/** Vertical direction in which we can auto-scroll. */\nenum AutoScrollVerticalDirection {\n  NONE,\n  UP,\n  DOWN,\n}\n\n/** Horizontal direction in which we can auto-scroll. */\nenum AutoScrollHorizontalDirection {\n  NONE,\n  LEFT,\n  RIGHT,\n}\n\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nexport class DropListRef<T = any> {\n  /** Element that the drop list is attached to. */\n  element: HTMLElement | ElementRef<HTMLElement>;\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  disabled: boolean = false;\n\n  /** Whether sorting items within the list is disabled. */\n  sortingDisabled: boolean = false;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /**\n   * Whether auto-scrolling the view when the user\n   * moves their pointer close to the edges is disabled.\n   */\n  autoScrollDisabled: boolean = false;\n\n  /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n  autoScrollStep: number = 2;\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  enterPredicate: (drag: DragRef, drop: DropListRef) => boolean = () => true;\n\n  /** Function that is used to determine whether an item can be sorted into a particular index. */\n  sortPredicate: (index: number, drag: DragRef, drop: DropListRef) => boolean = () => true;\n\n  /** Emits right before dragging has started. */\n  readonly beforeStarted = new Subject<void>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  readonly entered = new Subject<{item: DragRef; container: DropListRef; currentIndex: number}>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  readonly exited = new Subject<{item: DragRef; container: DropListRef}>();\n\n  /** Emits when the user drops an item inside the container. */\n  readonly dropped = new Subject<{\n    item: DragRef;\n    currentIndex: number;\n    previousIndex: number;\n    container: DropListRef;\n    previousContainer: DropListRef;\n    isPointerOverContainer: boolean;\n    distance: Point;\n    dropPoint: Point;\n    event: MouseEvent | TouchEvent;\n  }>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  readonly sorted = new Subject<{\n    previousIndex: number;\n    currentIndex: number;\n    container: DropListRef;\n    item: DragRef;\n  }>();\n\n  /** Emits when a dragging sequence is started in a list connected to the current one. */\n  readonly receivingStarted = new Subject<{\n    receiver: DropListRef;\n    initiator: DropListRef;\n    items: DragRef[];\n  }>();\n\n  /** Emits when a dragging sequence is stopped from a list connected to the current one. */\n  readonly receivingStopped = new Subject<{\n    receiver: DropListRef;\n    initiator: DropListRef;\n  }>();\n\n  /** Arbitrary data that can be attached to the drop list. */\n  data: T;\n\n  /** Element that is the direct parent of the drag items. */\n  private _container: HTMLElement;\n\n  /** Whether an item in the list is being dragged. */\n  private _isDragging = false;\n\n  /** Keeps track of the positions of any parent scrollable elements. */\n  private _parentPositions: ParentPositionTracker;\n\n  /** Strategy being used to sort items within the list. */\n  private _sortStrategy: DropListSortStrategy;\n\n  /** Cached `DOMRect` of the drop list. */\n  private _domRect: DOMRect | undefined;\n\n  /** Draggable items in the container. */\n  private _draggables: readonly DragRef[] = [];\n\n  /** Drop lists that are connected to the current one. */\n  private _siblings: readonly DropListRef[] = [];\n\n  /** Connected siblings that currently have a dragged item. */\n  private _activeSiblings = new Set<DropListRef>();\n\n  /** Subscription to the window being scrolled. */\n  private _viewportScrollSubscription = Subscription.EMPTY;\n\n  /** Vertical direction in which the list is currently scrolling. */\n  private _verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n\n  /** Horizontal direction in which the list is currently scrolling. */\n  private _horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n\n  /** Node that is being auto-scrolled. */\n  private _scrollNode: HTMLElement | Window;\n\n  /** Used to signal to the current auto-scroll sequence when to stop. */\n  private readonly _stopScrollTimers = new Subject<void>();\n\n  /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n  private _cachedShadowRoot: DocumentOrShadowRoot | null = null;\n\n  /** Reference to the document. */\n  private _document: Document;\n\n  /** Elements that can be scrolled while the user is dragging. */\n  private _scrollableElements: HTMLElement[] = [];\n\n  /** Initial value for the element's `scroll-snap-type` style. */\n  private _initialScrollSnap: string;\n\n  /** Direction of the list's layout. */\n  private _direction: Direction = 'ltr';\n\n  constructor(\n    element: ElementRef<HTMLElement> | HTMLElement,\n    private _dragDropRegistry: DragDropRegistry,\n    _document: any,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n  ) {\n    const coercedElement = (this.element = coerceElement(element));\n    this._document = _document;\n    this.withOrientation('vertical').withElementContainer(coercedElement);\n    _dragDropRegistry.registerDropContainer(this);\n    this._parentPositions = new ParentPositionTracker(_document);\n  }\n\n  /** Removes the drop list functionality from the DOM element. */\n  dispose() {\n    this._stopScrolling();\n    this._stopScrollTimers.complete();\n    this._viewportScrollSubscription.unsubscribe();\n    this.beforeStarted.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this.sorted.complete();\n    this.receivingStarted.complete();\n    this.receivingStopped.complete();\n    this._activeSiblings.clear();\n    this._scrollNode = null!;\n    this._parentPositions.clear();\n    this._dragDropRegistry.removeDropContainer(this);\n  }\n\n  /** Whether an item from this list is currently being dragged. */\n  isDragging() {\n    return this._isDragging;\n  }\n\n  /** Starts dragging an item. */\n  start(): void {\n    this._draggingStarted();\n    this._notifyReceivingSiblings();\n  }\n\n  /**\n   * Attempts to move an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param index Index at which the item entered. If omitted, the container will try to figure it\n   *   out automatically.\n   */\n  enter(item: DragRef, pointerX: number, pointerY: number, index?: number): void {\n    this._draggingStarted();\n\n    // If sorting is disabled, we want the item to return to its starting\n    // position if the user is returning it to its initial container.\n    if (index == null && this.sortingDisabled) {\n      index = this._draggables.indexOf(item);\n    }\n\n    this._sortStrategy.enter(item, pointerX, pointerY, index);\n\n    // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\n    // can change when the sort strategy moves the item around inside `enter`.\n    this._cacheParentPositions();\n\n    // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n    this._notifyReceivingSiblings();\n    this.entered.next({item, container: this, currentIndex: this.getItemIndex(item)});\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: DragRef): void {\n    this._reset();\n    this.exited.next({item, container: this});\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousIndex Index of the item when dragging started.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   * @param distance Distance the user has dragged since the start of the dragging sequence.\n   * @param event Event that triggered the dropping sequence.\n   *\n   * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\n   */\n  drop(\n    item: DragRef,\n    currentIndex: number,\n    previousIndex: number,\n    previousContainer: DropListRef,\n    isPointerOverContainer: boolean,\n    distance: Point,\n    dropPoint: Point,\n    event: MouseEvent | TouchEvent = {} as any,\n  ): void {\n    this._reset();\n    this.dropped.next({\n      item,\n      currentIndex,\n      previousIndex,\n      container: this,\n      previousContainer,\n      isPointerOverContainer,\n      distance,\n      dropPoint,\n      event,\n    });\n  }\n\n  /**\n   * Sets the draggable items that are a part of this list.\n   * @param items Items that are a part of this list.\n   */\n  withItems(items: DragRef[]): this {\n    const previousItems = this._draggables;\n    this._draggables = items;\n    items.forEach(item => item._withDropContainer(this));\n\n    if (this.isDragging()) {\n      const draggedItems = previousItems.filter(item => item.isDragging());\n\n      // If all of the items being dragged were removed\n      // from the list, abort the current drag sequence.\n      if (draggedItems.every(item => items.indexOf(item) === -1)) {\n        this._reset();\n      } else {\n        this._sortStrategy.withItems(this._draggables);\n      }\n    }\n\n    return this;\n  }\n\n  /** Sets the layout direction of the drop list. */\n  withDirection(direction: Direction): this {\n    this._direction = direction;\n    if (this._sortStrategy instanceof SingleAxisSortStrategy) {\n      this._sortStrategy.direction = direction;\n    }\n    return this;\n  }\n\n  /**\n   * Sets the containers that are connected to this one. When two or more containers are\n   * connected, the user will be allowed to transfer items between them.\n   * @param connectedTo Other containers that the current containers should be connected to.\n   */\n  connectedTo(connectedTo: DropListRef[]): this {\n    this._siblings = connectedTo.slice();\n    return this;\n  }\n\n  /**\n   * Sets the orientation of the container.\n   * @param orientation New orientation for the container.\n   */\n  withOrientation(orientation: DropListOrientation): this {\n    if (orientation === 'mixed') {\n      this._sortStrategy = new MixedSortStrategy(this._document, this._dragDropRegistry);\n    } else {\n      const strategy = new SingleAxisSortStrategy(this._dragDropRegistry);\n      strategy.direction = this._direction;\n      strategy.orientation = orientation;\n      this._sortStrategy = strategy;\n    }\n    this._sortStrategy.withElementContainer(this._container);\n    this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\n    return this;\n  }\n\n  /**\n   * Sets which parent elements are can be scrolled while the user is dragging.\n   * @param elements Elements that can be scrolled.\n   */\n  withScrollableParents(elements: HTMLElement[]): this {\n    const element = this._container;\n\n    // We always allow the current element to be scrollable\n    // so we need to ensure that it's in the array.\n    this._scrollableElements =\n      elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n    return this;\n  }\n\n  /**\n   * Configures the drop list so that a different element is used as the container for the\n   * dragged items. This is useful for the cases when one might not have control over the\n   * full DOM that sets up the dragging.\n   * Note that the alternate container needs to be a descendant of the drop list.\n   * @param container New element container to be assigned.\n   */\n  withElementContainer(container: HTMLElement): this {\n    if (container === this._container) {\n      return this;\n    }\n\n    const element = coerceElement(this.element);\n\n    if (\n      (typeof ngDevMode === 'undefined' || ngDevMode) &&\n      container !== element &&\n      !element.contains(container)\n    ) {\n      throw new Error(\n        'Invalid DOM structure for drop list. Alternate container element must be a descendant of the drop list.',\n      );\n    }\n\n    const oldContainerIndex = this._scrollableElements.indexOf(this._container);\n    const newContainerIndex = this._scrollableElements.indexOf(container);\n\n    if (oldContainerIndex > -1) {\n      this._scrollableElements.splice(oldContainerIndex, 1);\n    }\n\n    if (newContainerIndex > -1) {\n      this._scrollableElements.splice(newContainerIndex, 1);\n    }\n\n    if (this._sortStrategy) {\n      this._sortStrategy.withElementContainer(container);\n    }\n\n    this._cachedShadowRoot = null;\n    this._scrollableElements.unshift(container);\n    this._container = container;\n    return this;\n  }\n\n  /** Gets the scrollable parents that are registered with this drop container. */\n  getScrollableParents(): readonly HTMLElement[] {\n    return this._scrollableElements;\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: DragRef): number {\n    return this._isDragging\n      ? this._sortStrategy.getItemIndex(item)\n      : this._draggables.indexOf(item);\n  }\n\n  /**\n   * Whether the list is able to receive the item that\n   * is currently being dragged inside a connected drop list.\n   */\n  isReceiving(): boolean {\n    return this._activeSiblings.size > 0;\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(\n    item: DragRef,\n    pointerX: number,\n    pointerY: number,\n    pointerDelta: {x: number; y: number},\n  ): void {\n    // Don't sort the item if sorting is disabled or it's out of range.\n    if (\n      this.sortingDisabled ||\n      !this._domRect ||\n      !isPointerNearDomRect(this._domRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)\n    ) {\n      return;\n    }\n\n    const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\n\n    if (result) {\n      this.sorted.next({\n        previousIndex: result.previousIndex,\n        currentIndex: result.currentIndex,\n        container: this,\n        item,\n      });\n    }\n  }\n\n  /**\n   * Checks whether the user's pointer is close to the edges of either the\n   * viewport or the drop list and starts the auto-scroll sequence.\n   * @param pointerX User's pointer position along the x axis.\n   * @param pointerY User's pointer position along the y axis.\n   */\n  _startScrollingIfNecessary(pointerX: number, pointerY: number) {\n    if (this.autoScrollDisabled) {\n      return;\n    }\n\n    let scrollNode: HTMLElement | Window | undefined;\n    let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n    let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n\n    // Check whether we should start scrolling any of the parent containers.\n    this._parentPositions.positions.forEach((position, element) => {\n      // We have special handling for the `document` below. Also this would be\n      // nicer with a  for...of loop, but it requires changing a compiler flag.\n      if (element === this._document || !position.clientRect || scrollNode) {\n        return;\n      }\n\n      if (isPointerNearDomRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n        [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(\n          element as HTMLElement,\n          position.clientRect,\n          this._direction,\n          pointerX,\n          pointerY,\n        );\n\n        if (verticalScrollDirection || horizontalScrollDirection) {\n          scrollNode = element as HTMLElement;\n        }\n      }\n    });\n\n    // Otherwise check if we can start scrolling the viewport.\n    if (!verticalScrollDirection && !horizontalScrollDirection) {\n      const {width, height} = this._viewportRuler.getViewportSize();\n      const domRect = {\n        width,\n        height,\n        top: 0,\n        right: width,\n        bottom: height,\n        left: 0,\n      } as DOMRect;\n      verticalScrollDirection = getVerticalScrollDirection(domRect, pointerY);\n      horizontalScrollDirection = getHorizontalScrollDirection(domRect, pointerX);\n      scrollNode = window;\n    }\n\n    if (\n      scrollNode &&\n      (verticalScrollDirection !== this._verticalScrollDirection ||\n        horizontalScrollDirection !== this._horizontalScrollDirection ||\n        scrollNode !== this._scrollNode)\n    ) {\n      this._verticalScrollDirection = verticalScrollDirection;\n      this._horizontalScrollDirection = horizontalScrollDirection;\n      this._scrollNode = scrollNode;\n\n      if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n        this._ngZone.runOutsideAngular(this._startScrollInterval);\n      } else {\n        this._stopScrolling();\n      }\n    }\n  }\n\n  /** Stops any currently-running auto-scroll sequences. */\n  _stopScrolling() {\n    this._stopScrollTimers.next();\n  }\n\n  /** Starts the dragging sequence within the list. */\n  private _draggingStarted() {\n    const styles = this._container.style as DragCSSStyleDeclaration;\n    this.beforeStarted.next();\n    this._isDragging = true;\n\n    if (\n      (typeof ngDevMode === 'undefined' || ngDevMode) &&\n      // Prevent the check from running on apps not using an alternate container. Ideally we\n      // would always run it, but introducing it at this stage would be a breaking change.\n      this._container !== coerceElement(this.element)\n    ) {\n      for (const drag of this._draggables) {\n        if (!drag.isDragging() && drag.getVisibleElement().parentNode !== this._container) {\n          throw new Error(\n            'Invalid DOM structure for drop list. All items must be placed directly inside of the element container.',\n          );\n        }\n      }\n    }\n\n    // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n    // scrolling. The browser seems to round the value based on the snapping points which means\n    // that we can't increment/decrement the scroll position.\n    this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n    styles.scrollSnapType = styles.msScrollSnapType = 'none';\n    this._sortStrategy.start(this._draggables);\n    this._cacheParentPositions();\n    this._viewportScrollSubscription.unsubscribe();\n    this._listenToScrollEvents();\n  }\n\n  /** Caches the positions of the configured scrollable parents. */\n  private _cacheParentPositions() {\n    this._parentPositions.cache(this._scrollableElements);\n\n    // The list element is always in the `scrollableElements`\n    // so we can take advantage of the cached `DOMRect`.\n    this._domRect = this._parentPositions.positions.get(this._container)!.clientRect!;\n  }\n\n  /** Resets the container to its initial state. */\n  private _reset() {\n    this._isDragging = false;\n    const styles = this._container.style as DragCSSStyleDeclaration;\n    styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n\n    this._siblings.forEach(sibling => sibling._stopReceiving(this));\n    this._sortStrategy.reset();\n    this._stopScrolling();\n    this._viewportScrollSubscription.unsubscribe();\n    this._parentPositions.clear();\n  }\n\n  /** Starts the interval that'll auto-scroll the element. */\n  private _startScrollInterval = () => {\n    this._stopScrolling();\n\n    interval(0, animationFrameScheduler)\n      .pipe(takeUntil(this._stopScrollTimers))\n      .subscribe(() => {\n        const node = this._scrollNode;\n        const scrollStep = this.autoScrollStep;\n\n        if (this._verticalScrollDirection === AutoScrollVerticalDirection.UP) {\n          node.scrollBy(0, -scrollStep);\n        } else if (this._verticalScrollDirection === AutoScrollVerticalDirection.DOWN) {\n          node.scrollBy(0, scrollStep);\n        }\n\n        if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.LEFT) {\n          node.scrollBy(-scrollStep, 0);\n        } else if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.RIGHT) {\n          node.scrollBy(scrollStep, 0);\n        }\n      });\n  };\n\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n  _isOverContainer(x: number, y: number): boolean {\n    return this._domRect != null && isInsideClientRect(this._domRect, x, y);\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: DragRef, x: number, y: number): DropListRef | undefined {\n    return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n  }\n\n  /**\n   * Checks whether the drop list can receive the passed-in item.\n   * @param item Item that is being dragged into the list.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _canReceive(item: DragRef, x: number, y: number): boolean {\n    if (\n      !this._domRect ||\n      !isInsideClientRect(this._domRect, x, y) ||\n      !this.enterPredicate(item, this)\n    ) {\n      return false;\n    }\n\n    const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y) as HTMLElement | null;\n\n    // If there's no element at the pointer position, then\n    // the client rect is probably scrolled out of the view.\n    if (!elementFromPoint) {\n      return false;\n    }\n\n    // The `DOMRect`, that we're using to find the container over which the user is\n    // hovering, doesn't give us any information on whether the element has been scrolled\n    // out of the view or whether it's overlapping with other containers. This means that\n    // we could end up transferring the item into a container that's invisible or is positioned\n    // below another one. We use the result from `elementFromPoint` to get the top-most element\n    // at the pointer position and to find whether it's one of the intersecting drop containers.\n    return elementFromPoint === this._container || this._container.contains(elementFromPoint);\n  }\n\n  /**\n   * Called by one of the connected drop lists when a dragging sequence has started.\n   * @param sibling Sibling in which dragging has started.\n   */\n  _startReceiving(sibling: DropListRef, items: DragRef[]) {\n    const activeSiblings = this._activeSiblings;\n\n    if (\n      !activeSiblings.has(sibling) &&\n      items.every(item => {\n        // Note that we have to add an exception to the `enterPredicate` for items that started off\n        // in this drop list. The drag ref has logic that allows an item to return to its initial\n        // container, if it has left the initial container and none of the connected containers\n        // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n        return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n      })\n    ) {\n      activeSiblings.add(sibling);\n      this._cacheParentPositions();\n      this._listenToScrollEvents();\n      this.receivingStarted.next({\n        initiator: sibling,\n        receiver: this,\n        items,\n      });\n    }\n  }\n\n  /**\n   * Called by a connected drop list when dragging has stopped.\n   * @param sibling Sibling whose dragging has stopped.\n   */\n  _stopReceiving(sibling: DropListRef) {\n    this._activeSiblings.delete(sibling);\n    this._viewportScrollSubscription.unsubscribe();\n    this.receivingStopped.next({initiator: sibling, receiver: this});\n  }\n\n  /**\n   * Starts listening to scroll events on the viewport.\n   * Used for updating the internal state of the list.\n   */\n  private _listenToScrollEvents() {\n    this._viewportScrollSubscription = this._dragDropRegistry\n      .scrolled(this._getShadowRoot())\n      .subscribe(event => {\n        if (this.isDragging()) {\n          const scrollDifference = this._parentPositions.handleScroll(event);\n\n          if (scrollDifference) {\n            this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\n          }\n        } else if (this.isReceiving()) {\n          this._cacheParentPositions();\n        }\n      });\n  }\n\n  /**\n   * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n   * than saving it in property directly on init, because we want to resolve it as late as possible\n   * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n   * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n   */\n  private _getShadowRoot(): DocumentOrShadowRoot {\n    if (!this._cachedShadowRoot) {\n      const shadowRoot = _getShadowRoot(this._container);\n      this._cachedShadowRoot = shadowRoot || this._document;\n    }\n\n    return this._cachedShadowRoot;\n  }\n\n  /** Notifies any siblings that may potentially receive the item. */\n  private _notifyReceivingSiblings() {\n    const draggedItems = this._sortStrategy\n      .getActiveItemsSnapshot()\n      .filter(item => item.isDragging());\n    this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n  }\n}\n\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect: DOMRect, pointerY: number) {\n  const {top, bottom, height} = clientRect;\n  const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n\n  if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n    return AutoScrollVerticalDirection.UP;\n  } else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n    return AutoScrollVerticalDirection.DOWN;\n  }\n\n  return AutoScrollVerticalDirection.NONE;\n}\n\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect: DOMRect, pointerX: number) {\n  const {left, right, width} = clientRect;\n  const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n\n  if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n    return AutoScrollHorizontalDirection.LEFT;\n  } else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n    return AutoScrollHorizontalDirection.RIGHT;\n  }\n\n  return AutoScrollHorizontalDirection.NONE;\n}\n\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param direction Layout direction of the drop list.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(\n  element: HTMLElement,\n  clientRect: DOMRect,\n  direction: Direction,\n  pointerX: number,\n  pointerY: number,\n): [AutoScrollVerticalDirection, AutoScrollHorizontalDirection] {\n  const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n  const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n  let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n  let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n\n  // Note that we here we do some extra checks for whether the element is actually scrollable in\n  // a certain direction and we only assign the scroll direction if it is. We do this so that we\n  // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n  // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n  if (computedVertical) {\n    const scrollTop = element.scrollTop;\n\n    if (computedVertical === AutoScrollVerticalDirection.UP) {\n      if (scrollTop > 0) {\n        verticalScrollDirection = AutoScrollVerticalDirection.UP;\n      }\n    } else if (element.scrollHeight - scrollTop > element.clientHeight) {\n      verticalScrollDirection = AutoScrollVerticalDirection.DOWN;\n    }\n  }\n\n  if (computedHorizontal) {\n    const scrollLeft = element.scrollLeft;\n\n    if (direction === 'rtl') {\n      if (computedHorizontal === AutoScrollHorizontalDirection.RIGHT) {\n        // In RTL `scrollLeft` will be negative when scrolled.\n        if (scrollLeft < 0) {\n          horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n        }\n      } else if (element.scrollWidth + scrollLeft > element.clientWidth) {\n        horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n      }\n    } else {\n      if (computedHorizontal === AutoScrollHorizontalDirection.LEFT) {\n        if (scrollLeft > 0) {\n          horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n        }\n      } else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n        horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n      }\n    }\n  }\n\n  return [verticalScrollDirection, horizontalScrollDirection];\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  RendererFactory2,\n  ViewEncapsulation,\n  WritableSignal,\n  inject,\n  signal,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {_bindEventWithOptions, _ListenerOptions} from '../platform';\nimport {_CdkPrivateStyleLoader} from '../private';\nimport {Observable, Observer, Subject, merge} from 'rxjs';\nimport type {DropListRef} from './drop-list-ref';\nimport type {DragRef} from './drag-ref';\nimport type {CdkDrag} from './directives/drag';\n\n/** Event options that can be used to bind a capturing event. */\nconst capturingEventOptions = {\n  capture: true,\n};\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = {\n  passive: false,\n  capture: true,\n};\n\n/**\n * Component used to load the drag&drop reset styles.\n * @docs-private\n */\n@Component({\n  styleUrl: 'resets.css',\n  encapsulation: ViewEncapsulation.None,\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'cdk-drag-resets-container': ''},\n})\nexport class _ResetsLoader {}\n\n// TODO(crisbeto): remove generics when making breaking changes.\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class DragDropRegistry<_ = unknown, __ = unknown> implements OnDestroy {\n  private _ngZone = inject(NgZone);\n  private _document = inject(DOCUMENT);\n  private _styleLoader = inject(_CdkPrivateStyleLoader);\n  private _renderer = inject(RendererFactory2).createRenderer(null, null);\n  private _cleanupDocumentTouchmove: (() => void) | undefined;\n\n  /** Registered drop container instances. */\n  private _dropInstances = new Set<DropListRef>();\n\n  /** Registered drag item instances. */\n  private _dragInstances = new Set<DragRef>();\n\n  /** Drag item instances that are currently being dragged. */\n  private _activeDragInstances: WritableSignal<DragRef[]> = signal([]);\n\n  /** Keeps track of the event listeners that we've bound to the `document`. */\n  private _globalListeners: (() => void)[] | undefined;\n\n  /**\n   * Predicate function to check if an item is being dragged.  Moved out into a property,\n   * because it'll be called a lot and we don't want to create a new function every time.\n   */\n  private _draggingPredicate = (item: DragRef) => item.isDragging();\n\n  /**\n   * Map tracking DOM nodes and their corresponding drag directives. Note that this is different\n   * from looking through the `_dragInstances` and getting their root node, because the root node\n   * isn't necessarily the node that the directive is set on.\n   */\n  private _domNodesToDirectives: WeakMap<Node, CdkDrag> | null = null;\n\n  /**\n   * Emits the `touchmove` or `mousemove` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerMove: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  /**\n   * Emits the `touchend` or `mouseup` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerUp: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  /**\n   * Emits when the viewport has been scrolled while the user is dragging an item.\n   * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n   * @breaking-change 13.0.0\n   */\n  readonly scroll: Subject<Event> = new Subject<Event>();\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  /** Adds a drop container to the registry. */\n  registerDropContainer(drop: DropListRef) {\n    if (!this._dropInstances.has(drop)) {\n      this._dropInstances.add(drop);\n    }\n  }\n\n  /** Adds a drag item instance to the registry. */\n  registerDragItem(drag: DragRef) {\n    this._dragInstances.add(drag);\n\n    // The `touchmove` event gets bound once, ahead of time, because WebKit\n    // won't preventDefault on a dynamically-added `touchmove` listener.\n    // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n    if (this._dragInstances.size === 1) {\n      this._ngZone.runOutsideAngular(() => {\n        // The event handler has to be explicitly active,\n        // because newer browsers make it passive by default.\n        this._cleanupDocumentTouchmove?.();\n        this._cleanupDocumentTouchmove = _bindEventWithOptions(\n          this._renderer,\n          this._document,\n          'touchmove',\n          this._persistentTouchmoveListener,\n          activeCapturingEventOptions,\n        );\n      });\n    }\n  }\n\n  /** Removes a drop container from the registry. */\n  removeDropContainer(drop: DropListRef) {\n    this._dropInstances.delete(drop);\n  }\n\n  /** Removes a drag item instance from the registry. */\n  removeDragItem(drag: DragRef) {\n    this._dragInstances.delete(drag);\n    this.stopDragging(drag);\n\n    if (this._dragInstances.size === 0) {\n      this._cleanupDocumentTouchmove?.();\n    }\n  }\n\n  /**\n   * Starts the dragging sequence for a drag instance.\n   * @param drag Drag instance which is being dragged.\n   * @param event Event that initiated the dragging.\n   */\n  startDragging(drag: DragRef, event: TouchEvent | MouseEvent) {\n    // Do not process the same drag twice to avoid memory leaks and redundant listeners\n    if (this._activeDragInstances().indexOf(drag) > -1) {\n      return;\n    }\n\n    this._styleLoader.load(_ResetsLoader);\n    this._activeDragInstances.update(instances => [...instances, drag]);\n\n    if (this._activeDragInstances().length === 1) {\n      // We explicitly bind __active__ listeners here, because newer browsers will default to\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n      const isTouchEvent = event.type.startsWith('touch');\n      const endEventHandler = (e: Event) => this.pointerUp.next(e as TouchEvent | MouseEvent);\n\n      const toBind: [name: string, handler: (event: Event) => void, options: _ListenerOptions][] = [\n        // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n        // the document. See https://github.com/angular/components/issues/17144.\n        ['scroll', (e: Event) => this.scroll.next(e), capturingEventOptions],\n\n        // Preventing the default action on `mousemove` isn't enough to disable text selection\n        // on Safari so we need to prevent the selection event as well. Alternatively this can\n        // be done by setting `user-select: none` on the `body`, however it has causes a style\n        // recalculation which can be expensive on pages with a lot of elements.\n        ['selectstart', this._preventDefaultWhileDragging, activeCapturingEventOptions],\n      ];\n\n      if (isTouchEvent) {\n        toBind.push(\n          ['touchend', endEventHandler, capturingEventOptions],\n          ['touchcancel', endEventHandler, capturingEventOptions],\n        );\n      } else {\n        toBind.push(['mouseup', endEventHandler, capturingEventOptions]);\n      }\n\n      // We don't have to bind a move event for touch drag sequences, because\n      // we already have a persistent global one bound from `registerDragItem`.\n      if (!isTouchEvent) {\n        toBind.push([\n          'mousemove',\n          (e: Event) => this.pointerMove.next(e as MouseEvent),\n          activeCapturingEventOptions,\n        ]);\n      }\n\n      this._ngZone.runOutsideAngular(() => {\n        this._globalListeners = toBind.map(([name, handler, options]) =>\n          _bindEventWithOptions(this._renderer, this._document, name, handler, options),\n        );\n      });\n    }\n  }\n\n  /** Stops dragging a drag item instance. */\n  stopDragging(drag: DragRef) {\n    this._activeDragInstances.update(instances => {\n      const index = instances.indexOf(drag);\n      if (index > -1) {\n        instances.splice(index, 1);\n        return [...instances];\n      }\n      return instances;\n    });\n\n    if (this._activeDragInstances().length === 0) {\n      this._clearGlobalListeners();\n    }\n  }\n\n  /** Gets whether a drag item instance is currently being dragged. */\n  isDragging(drag: DragRef) {\n    return this._activeDragInstances().indexOf(drag) > -1;\n  }\n\n  /**\n   * Gets a stream that will emit when any element on the page is scrolled while an item is being\n   * dragged.\n   * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n   *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n   *   be used to include an additional top-level listener at the shadow root level.\n   */\n  scrolled(shadowRoot?: DocumentOrShadowRoot | null): Observable<Event> {\n    const streams: Observable<Event>[] = [this.scroll];\n\n    if (shadowRoot && shadowRoot !== this._document) {\n      // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\n      // because we want to guarantee that the event is bound outside of the `NgZone`. With\n      // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n      streams.push(\n        new Observable((observer: Observer<Event>) => {\n          return this._ngZone.runOutsideAngular(() => {\n            const cleanup = _bindEventWithOptions(\n              this._renderer,\n              shadowRoot as ShadowRoot,\n              'scroll',\n              (event: Event) => {\n                if (this._activeDragInstances().length) {\n                  observer.next(event);\n                }\n              },\n              capturingEventOptions,\n            );\n\n            return () => {\n              cleanup();\n            };\n          });\n        }),\n      );\n    }\n\n    return merge(...streams);\n  }\n\n  /**\n   * Tracks the DOM node which has a draggable directive.\n   * @param node Node to track.\n   * @param dragRef Drag directive set on the node.\n   */\n  registerDirectiveNode(node: Node, dragRef: CdkDrag): void {\n    this._domNodesToDirectives ??= new WeakMap();\n    this._domNodesToDirectives.set(node, dragRef);\n  }\n\n  /**\n   * Stops tracking a draggable directive node.\n   * @param node Node to stop tracking.\n   */\n  removeDirectiveNode(node: Node): void {\n    this._domNodesToDirectives?.delete(node);\n  }\n\n  /**\n   * Gets the drag directive corresponding to a specific DOM node, if any.\n   * @param node Node for which to do the lookup.\n   */\n  getDragDirectiveForNode(node: Node): CdkDrag | null {\n    return this._domNodesToDirectives?.get(node) || null;\n  }\n\n  ngOnDestroy() {\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n    this._domNodesToDirectives = null;\n    this._clearGlobalListeners();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n\n  /**\n   * Event listener that will prevent the default browser action while the user is dragging.\n   * @param event Event whose default action should be prevented.\n   */\n  private _preventDefaultWhileDragging = (event: Event) => {\n    if (this._activeDragInstances().length > 0) {\n      event.preventDefault();\n    }\n  };\n\n  /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n  private _persistentTouchmoveListener = (event: TouchEvent) => {\n    if (this._activeDragInstances().length > 0) {\n      // Note that we only want to prevent the default action after dragging has actually started.\n      // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n      // but it could be pushed back if the user has set up a drag delay or threshold.\n      if (this._activeDragInstances().some(this._draggingPredicate)) {\n        event.preventDefault();\n      }\n\n      this.pointerMove.next(event);\n    }\n  };\n\n  /** Clears out the global event listeners from the `document`. */\n  private _clearGlobalListeners() {\n    this._globalListeners?.forEach(cleanup => cleanup());\n    this._globalListeners = undefined;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable, NgZone, ElementRef, inject, RendererFactory2} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ViewportRuler} from '../scrolling';\nimport {DragRef, DragRefConfig} from './drag-ref';\nimport {DropListRef} from './drop-list-ref';\nimport {DragDropRegistry} from './drag-drop-registry';\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n  dragStartThreshold: 5,\n  pointerDirectionChangeThreshold: 5,\n};\n\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\n@Injectable({providedIn: 'root'})\nexport class DragDrop {\n  private _document = inject(DOCUMENT);\n  private _ngZone = inject(NgZone);\n  private _viewportRuler = inject(ViewportRuler);\n  private _dragDropRegistry = inject(DragDropRegistry);\n  private _renderer = inject(RendererFactory2).createRenderer(null, null);\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  /**\n   * Turns an element into a draggable item.\n   * @param element Element to which to attach the dragging functionality.\n   * @param config Object used to configure the dragging behavior.\n   */\n  createDrag<T = any>(\n    element: ElementRef<HTMLElement> | HTMLElement,\n    config: DragRefConfig = DEFAULT_CONFIG,\n  ): DragRef<T> {\n    return new DragRef<T>(\n      element,\n      config,\n      this._document,\n      this._ngZone,\n      this._viewportRuler,\n      this._dragDropRegistry,\n      this._renderer,\n    );\n  }\n\n  /**\n   * Turns an element into a drop list.\n   * @param element Element to which to attach the drop list functionality.\n   */\n  createDropList<T = any>(element: ElementRef<HTMLElement> | HTMLElement): DropListRef<T> {\n    return new DropListRef<T>(\n      element,\n      this._dragDropRegistry,\n      this._document,\n      this._ngZone,\n      this._viewportRuler,\n    );\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport type {CdkDrag} from './directives/drag';\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nexport const CDK_DRAG_PARENT = new InjectionToken<CdkDrag>('CDK_DRAG_PARENT');\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nexport function assertElementNode(node: Node, name: string): asserts node is HTMLElement {\n  if (node.nodeType !== 1) {\n    throw Error(\n      `${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`,\n    );\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  booleanAttribute,\n  inject,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport type {CdkDrag} from './drag';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\nimport {assertElementNode} from './assertions';\nimport {DragDropRegistry} from '../drag-drop-registry';\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const CDK_DRAG_HANDLE = new InjectionToken<CdkDragHandle>('CdkDragHandle');\n\n/** Handle that can be used to drag a CdkDrag instance. */\n@Directive({\n  selector: '[cdkDragHandle]',\n  host: {\n    'class': 'cdk-drag-handle',\n  },\n  providers: [{provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle}],\n})\nexport class CdkDragHandle implements AfterViewInit, OnDestroy {\n  element = inject<ElementRef<HTMLElement>>(ElementRef);\n\n  private _parentDrag = inject<CdkDrag>(CDK_DRAG_PARENT, {optional: true, skipSelf: true});\n  private _dragDropRegistry = inject(DragDropRegistry);\n\n  /** Emits when the state of the handle has changed. */\n  readonly _stateChanges = new Subject<CdkDragHandle>();\n\n  /** Whether starting to drag through this handle is disabled. */\n  @Input({alias: 'cdkDragHandleDisabled', transform: booleanAttribute})\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._stateChanges.next(this);\n  }\n  private _disabled = false;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      assertElementNode(this.element.nativeElement, 'cdkDragHandle');\n    }\n\n    this._parentDrag?._addHandle(this);\n  }\n\n  ngAfterViewInit() {\n    if (!this._parentDrag) {\n      let parent = this.element.nativeElement.parentElement;\n      while (parent) {\n        const ref = this._dragDropRegistry.getDragDirectiveForNode(parent);\n        if (ref) {\n          this._parentDrag = ref;\n          ref._addHandle(this);\n          break;\n        }\n        parent = parent.parentElement;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentDrag?._removeHandle(this);\n    this._stateChanges.complete();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {DragRefConfig, Point, DragRef} from '../drag-ref';\n\n/** Possible values that can be used to configure the drag start delay. */\nexport type DragStartDelay = number | {touch: number; mouse: number};\n\n/** Possible axis along which dragging can be locked. */\nexport type DragAxis = 'x' | 'y';\n\n/** Function that can be used to constrain the position of a dragged element. */\nexport type DragConstrainPosition = (point: Point, dragRef: DragRef) => Point;\n\n/** Possible orientations for a drop list. */\nexport type DropListOrientation = 'horizontal' | 'vertical' | 'mixed';\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nexport const CDK_DRAG_CONFIG = new InjectionToken<DragDropConfig>('CDK_DRAG_CONFIG');\n\n/**\n * Object that can be used to configure the drag\n * items and drop lists within a module or a component.\n */\nexport interface DragDropConfig extends Partial<DragRefConfig> {\n  lockAxis?: DragAxis;\n  dragStartDelay?: DragStartDelay;\n  constrainPosition?: DragConstrainPosition;\n  previewClass?: string | string[];\n  boundaryElement?: string;\n  rootElementSelector?: string;\n  draggingDisabled?: boolean;\n  sortingDisabled?: boolean;\n  listAutoScrollDisabled?: boolean;\n  listOrientation?: DropListOrientation;\n  zIndex?: number;\n  previewContainer?: 'global' | 'parent';\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directionality} from '../../bidi';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectorRef,\n  InjectionToken,\n  booleanAttribute,\n  afterNextRender,\n  AfterViewInit,\n  inject,\n  Injector,\n  numberAttribute,\n} from '@angular/core';\nimport {coerceElement, coerceNumberProperty} from '../../coercion';\nimport {BehaviorSubject, Observable, Observer, Subject, merge} from 'rxjs';\nimport {startWith, take, map, takeUntil, switchMap, tap} from 'rxjs/operators';\nimport type {\n  CdkDragDrop,\n  CdkDragEnd,\n  CdkDragEnter,\n  CdkDragExit,\n  CdkDragMove,\n  CdkDragStart,\n  CdkDragRelease,\n} from '../drag-events';\nimport {CDK_DRAG_HANDLE, CdkDragHandle} from './drag-handle';\nimport {CdkDragPlaceholder} from './drag-placeholder';\nimport {CdkDragPreview} from './drag-preview';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\nimport {DragRef, Point, PreviewContainer} from '../drag-ref';\nimport type {CdkDropList} from './drop-list';\nimport {DragDrop} from '../drag-drop';\nimport {CDK_DRAG_CONFIG, DragDropConfig, DragStartDelay, DragAxis} from './config';\nimport {assertElementNode} from './assertions';\nimport {DragDropRegistry} from '../drag-drop-registry';\n\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const CDK_DROP_LIST = new InjectionToken<CdkDropList>('CdkDropList');\n\n/** Element that can be moved inside a CdkDropList container. */\n@Directive({\n  selector: '[cdkDrag]',\n  exportAs: 'cdkDrag',\n  host: {\n    'class': 'cdk-drag',\n    '[class.cdk-drag-disabled]': 'disabled',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n  providers: [{provide: CDK_DRAG_PARENT, useExisting: CdkDrag}],\n})\nexport class CdkDrag<T = any> implements AfterViewInit, OnChanges, OnDestroy {\n  element = inject<ElementRef<HTMLElement>>(ElementRef);\n  dropContainer = inject<CdkDropList>(CDK_DROP_LIST, {optional: true, skipSelf: true})!;\n  private _ngZone = inject(NgZone);\n  private _viewContainerRef = inject(ViewContainerRef);\n  private _dir = inject(Directionality, {optional: true});\n  private _changeDetectorRef = inject(ChangeDetectorRef);\n  private _selfHandle = inject<CdkDragHandle>(CDK_DRAG_HANDLE, {optional: true, self: true});\n  private _parentDrag = inject<CdkDrag>(CDK_DRAG_PARENT, {optional: true, skipSelf: true});\n  private _dragDropRegistry = inject(DragDropRegistry);\n\n  private readonly _destroyed = new Subject<void>();\n  private _handles = new BehaviorSubject<CdkDragHandle[]>([]);\n  private _previewTemplate: CdkDragPreview | null;\n  private _placeholderTemplate: CdkDragPlaceholder | null;\n\n  /** Reference to the underlying drag instance. */\n  _dragRef: DragRef<CdkDrag<T>>;\n\n  /** Arbitrary data to attach to this drag instance. */\n  @Input('cdkDragData') data: T;\n\n  /** Locks the position of the dragged element along the specified axis. */\n  @Input('cdkDragLockAxis') lockAxis: DragAxis;\n\n  /**\n   * Selector that will be used to determine the root draggable element, starting from\n   * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n   * when trying to enable dragging on an element that you might not have access to.\n   */\n  @Input('cdkDragRootElement') rootElementSelector: string;\n\n  /**\n   * Node or selector that will be used to determine the element to which the draggable's\n   * position will be constrained. If a string is passed in, it'll be used as a selector that\n   * will be matched starting from the element's parent and going up the DOM until a match\n   * has been found.\n   */\n  @Input('cdkDragBoundary') boundaryElement: string | ElementRef<HTMLElement> | HTMLElement;\n\n  /**\n   * Amount of milliseconds to wait after the user has put their\n   * pointer down before starting to drag the element.\n   */\n  @Input('cdkDragStartDelay') dragStartDelay: DragStartDelay;\n\n  /**\n   * Sets the position of a `CdkDrag` that is outside of a drop container.\n   * Can be used to restore the element's position for a returning user.\n   */\n  @Input('cdkDragFreeDragPosition') freeDragPosition: Point;\n\n  /** Whether starting to drag this element is disabled. */\n  @Input({alias: 'cdkDragDisabled', transform: booleanAttribute})\n  get disabled(): boolean {\n    return this._disabled || !!(this.dropContainer && this.dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._dragRef.disabled = this._disabled;\n  }\n  private _disabled: boolean;\n\n  /**\n   * Function that can be used to customize the logic of how the position of the drag item\n   * is limited while it's being dragged. Gets called with a point containing the current position\n   * of the user's pointer on the page, a reference to the item being dragged and its dimensions.\n   * Should return a point describing where the item should be rendered.\n   */\n  @Input('cdkDragConstrainPosition') constrainPosition?: (\n    userPointerPosition: Point,\n    dragRef: DragRef,\n    dimensions: DOMRect,\n    pickupPositionInElement: Point,\n  ) => Point;\n\n  /** Class to be added to the preview element. */\n  @Input('cdkDragPreviewClass') previewClass: string | string[];\n\n  /**\n   * Configures the place into which the preview of the item will be inserted. Can be configured\n   * globally through `CDK_DROP_LIST`. Possible values:\n   * - `global` - Preview will be inserted at the bottom of the `<body>`. The advantage is that\n   * you don't have to worry about `overflow: hidden` or `z-index`, but the item won't retain\n   * its inherited styles.\n   * - `parent` - Preview will be inserted into the parent of the drag item. The advantage is that\n   * inherited styles will be preserved, but it may be clipped by `overflow: hidden` or not be\n   * visible due to `z-index`. Furthermore, the preview is going to have an effect over selectors\n   * like `:nth-child` and some flexbox configurations.\n   * - `ElementRef<HTMLElement> | HTMLElement` - Preview will be inserted into a specific element.\n   * Same advantages and disadvantages as `parent`.\n   */\n  @Input('cdkDragPreviewContainer') previewContainer: PreviewContainer;\n\n  /**\n   * If the parent of the dragged element has a `scale` transform, it can throw off the\n   * positioning when the user starts dragging. Use this input to notify the CDK of the scale.\n   */\n  @Input({alias: 'cdkDragScale', transform: numberAttribute})\n  scale: number = 1;\n\n  /** Emits when the user starts dragging the item. */\n  @Output('cdkDragStarted') readonly started: EventEmitter<CdkDragStart> =\n    new EventEmitter<CdkDragStart>();\n\n  /** Emits when the user has released a drag item, before any animations have started. */\n  @Output('cdkDragReleased') readonly released: EventEmitter<CdkDragRelease> =\n    new EventEmitter<CdkDragRelease>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  @Output('cdkDragEnded') readonly ended: EventEmitter<CdkDragEnd> = new EventEmitter<CdkDragEnd>();\n\n  /** Emits when the user has moved the item into a new container. */\n  @Output('cdkDragEntered') readonly entered: EventEmitter<CdkDragEnter<any>> = new EventEmitter<\n    CdkDragEnter<any>\n  >();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  @Output('cdkDragExited') readonly exited: EventEmitter<CdkDragExit<any>> = new EventEmitter<\n    CdkDragExit<any>\n  >();\n\n  /** Emits when the user drops the item inside a container. */\n  @Output('cdkDragDropped') readonly dropped: EventEmitter<CdkDragDrop<any>> = new EventEmitter<\n    CdkDragDrop<any>\n  >();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  @Output('cdkDragMoved')\n  readonly moved: Observable<CdkDragMove<T>> = new Observable(\n    (observer: Observer<CdkDragMove<T>>) => {\n      const subscription = this._dragRef.moved\n        .pipe(\n          map(movedEvent => ({\n            source: this,\n            pointerPosition: movedEvent.pointerPosition,\n            event: movedEvent.event,\n            delta: movedEvent.delta,\n            distance: movedEvent.distance,\n          })),\n        )\n        .subscribe(observer);\n\n      return () => {\n        subscription.unsubscribe();\n      };\n    },\n  );\n\n  private _injector = inject(Injector);\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const dropContainer = this.dropContainer;\n    const config = inject<DragDropConfig>(CDK_DRAG_CONFIG, {optional: true});\n    const dragDrop = inject(DragDrop);\n\n    this._dragRef = dragDrop.createDrag(this.element, {\n      dragStartThreshold:\n        config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n      pointerDirectionChangeThreshold:\n        config && config.pointerDirectionChangeThreshold != null\n          ? config.pointerDirectionChangeThreshold\n          : 5,\n      zIndex: config?.zIndex,\n    });\n    this._dragRef.data = this;\n    this._dragDropRegistry.registerDirectiveNode(this.element.nativeElement, this);\n\n    if (config) {\n      this._assignDefaults(config);\n    }\n\n    // Note that usually the container is assigned when the drop list is picks up the item, but in\n    // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n    // where there are no items on the first change detection pass, but the items get picked up as\n    // soon as the user triggers another pass by dragging. This is a problem, because the item would\n    // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n    // is too late since the two modes save different kinds of information. We work around it by\n    // assigning the drop container both from here and the list.\n    if (dropContainer) {\n      this._dragRef._withDropContainer(dropContainer._dropListRef);\n      dropContainer.addItem(this);\n\n      // The drop container reads this so we need to sync it here.\n      dropContainer._dropListRef.beforeStarted.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._dragRef.scale = this.scale;\n      });\n    }\n\n    this._syncInputs(this._dragRef);\n    this._handleEvents(this._dragRef);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._dragRef.getPlaceholderElement();\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._dragRef.getRootElement();\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._dragRef.reset();\n  }\n\n  /**\n   * Gets the pixel coordinates of the draggable outside of a drop container.\n   */\n  getFreeDragPosition(): Readonly<Point> {\n    return this._dragRef.getFreeDragPosition();\n  }\n\n  /**\n   * Sets the current position in pixels the draggable outside of a drop container.\n   * @param value New position to be set.\n   */\n  setFreeDragPosition(value: Point): void {\n    this._dragRef.setFreeDragPosition(value);\n  }\n\n  ngAfterViewInit() {\n    // We need to wait until after render, in order for the reference\n    // element to be in the proper place in the DOM. This is mostly relevant\n    // for draggable elements inside portals since they get stamped out in\n    // their original DOM position, and then they get transferred to the portal.\n    afterNextRender(\n      () => {\n        this._updateRootElement();\n        this._setupHandlesListener();\n        this._dragRef.scale = this.scale;\n\n        if (this.freeDragPosition) {\n          this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n      },\n      {injector: this._injector},\n    );\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const rootSelectorChange = changes['rootElementSelector'];\n    const positionChange = changes['freeDragPosition'];\n\n    // We don't have to react to the first change since it's being\n    // handled in the `afterNextRender` queued up in the constructor.\n    if (rootSelectorChange && !rootSelectorChange.firstChange) {\n      this._updateRootElement();\n    }\n\n    // Scale affects the free drag position so we need to sync it up here.\n    this._dragRef.scale = this.scale;\n\n    // Skip the first change since it's being handled in the `afterNextRender` queued up in the\n    // constructor.\n    if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n      this._dragRef.setFreeDragPosition(this.freeDragPosition);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.dropContainer) {\n      this.dropContainer.removeItem(this);\n    }\n\n    this._dragDropRegistry.removeDirectiveNode(this.element.nativeElement);\n\n    // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n    this._ngZone.runOutsideAngular(() => {\n      this._handles.complete();\n      this._destroyed.next();\n      this._destroyed.complete();\n      this._dragRef.dispose();\n    });\n  }\n\n  _addHandle(handle: CdkDragHandle) {\n    const handles = this._handles.getValue();\n    handles.push(handle);\n    this._handles.next(handles);\n  }\n\n  _removeHandle(handle: CdkDragHandle) {\n    const handles = this._handles.getValue();\n    const index = handles.indexOf(handle);\n\n    if (index > -1) {\n      handles.splice(index, 1);\n      this._handles.next(handles);\n    }\n  }\n\n  _setPreviewTemplate(preview: CdkDragPreview) {\n    this._previewTemplate = preview;\n  }\n\n  _resetPreviewTemplate(preview: CdkDragPreview) {\n    if (preview === this._previewTemplate) {\n      this._previewTemplate = null;\n    }\n  }\n\n  _setPlaceholderTemplate(placeholder: CdkDragPlaceholder) {\n    this._placeholderTemplate = placeholder;\n  }\n\n  _resetPlaceholderTemplate(placeholder: CdkDragPlaceholder) {\n    if (placeholder === this._placeholderTemplate) {\n      this._placeholderTemplate = null;\n    }\n  }\n\n  /** Syncs the root element with the `DragRef`. */\n  private _updateRootElement() {\n    const element = this.element.nativeElement as HTMLElement;\n    let rootElement = element;\n    if (this.rootElementSelector) {\n      rootElement =\n        element.closest !== undefined\n          ? (element.closest(this.rootElementSelector) as HTMLElement)\n          : // Comment tag doesn't have closest method, so use parent's one.\n            (element.parentElement?.closest(this.rootElementSelector) as HTMLElement);\n    }\n\n    if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      assertElementNode(rootElement, 'cdkDrag');\n    }\n\n    this._dragRef.withRootElement(rootElement || element);\n  }\n\n  /** Gets the boundary element, based on the `boundaryElement` value. */\n  private _getBoundaryElement() {\n    const boundary = this.boundaryElement;\n\n    if (!boundary) {\n      return null;\n    }\n\n    if (typeof boundary === 'string') {\n      return this.element.nativeElement.closest<HTMLElement>(boundary);\n    }\n\n    return coerceElement(boundary);\n  }\n\n  /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n  private _syncInputs(ref: DragRef<CdkDrag<T>>) {\n    ref.beforeStarted.subscribe(() => {\n      if (!ref.isDragging()) {\n        const dir = this._dir;\n        const dragStartDelay = this.dragStartDelay;\n        const placeholder = this._placeholderTemplate\n          ? {\n              template: this._placeholderTemplate.templateRef,\n              context: this._placeholderTemplate.data,\n              viewContainer: this._viewContainerRef,\n            }\n          : null;\n        const preview = this._previewTemplate\n          ? {\n              template: this._previewTemplate.templateRef,\n              context: this._previewTemplate.data,\n              matchSize: this._previewTemplate.matchSize,\n              viewContainer: this._viewContainerRef,\n            }\n          : null;\n\n        ref.disabled = this.disabled;\n        ref.lockAxis = this.lockAxis;\n        ref.scale = this.scale;\n        ref.dragStartDelay =\n          typeof dragStartDelay === 'object' && dragStartDelay\n            ? dragStartDelay\n            : coerceNumberProperty(dragStartDelay);\n        ref.constrainPosition = this.constrainPosition;\n        ref.previewClass = this.previewClass;\n        ref\n          .withBoundaryElement(this._getBoundaryElement())\n          .withPlaceholderTemplate(placeholder)\n          .withPreviewTemplate(preview)\n          .withPreviewContainer(this.previewContainer || 'global');\n\n        if (dir) {\n          ref.withDirection(dir.value);\n        }\n      }\n    });\n\n    // This only needs to be resolved once.\n    ref.beforeStarted.pipe(take(1)).subscribe(() => {\n      // If we managed to resolve a parent through DI, use it.\n      if (this._parentDrag) {\n        ref.withParent(this._parentDrag._dragRef);\n        return;\n      }\n\n      // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n      // the item was projected into another item by something like `ngTemplateOutlet`.\n      let parent = this.element.nativeElement.parentElement;\n      while (parent) {\n        const parentDrag = this._dragDropRegistry.getDragDirectiveForNode(parent);\n        if (parentDrag) {\n          ref.withParent(parentDrag._dragRef);\n          break;\n        }\n        parent = parent.parentElement;\n      }\n    });\n  }\n\n  /** Handles the events from the underlying `DragRef`. */\n  private _handleEvents(ref: DragRef<CdkDrag<T>>) {\n    ref.started.subscribe(startEvent => {\n      this.started.emit({source: this, event: startEvent.event});\n\n      // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.released.subscribe(releaseEvent => {\n      this.released.emit({source: this, event: releaseEvent.event});\n    });\n\n    ref.ended.subscribe(endEvent => {\n      this.ended.emit({\n        source: this,\n        distance: endEvent.distance,\n        dropPoint: endEvent.dropPoint,\n        event: endEvent.event,\n      });\n\n      // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.entered.subscribe(enterEvent => {\n      this.entered.emit({\n        container: enterEvent.container.data,\n        item: this,\n        currentIndex: enterEvent.currentIndex,\n      });\n    });\n\n    ref.exited.subscribe(exitEvent => {\n      this.exited.emit({\n        container: exitEvent.container.data,\n        item: this,\n      });\n    });\n\n    ref.dropped.subscribe(dropEvent => {\n      this.dropped.emit({\n        previousIndex: dropEvent.previousIndex,\n        currentIndex: dropEvent.currentIndex,\n        previousContainer: dropEvent.previousContainer.data,\n        container: dropEvent.container.data,\n        isPointerOverContainer: dropEvent.isPointerOverContainer,\n        item: this,\n        distance: dropEvent.distance,\n        dropPoint: dropEvent.dropPoint,\n        event: dropEvent.event,\n      });\n    });\n  }\n\n  /** Assigns the default input values based on a provided config object. */\n  private _assignDefaults(config: DragDropConfig) {\n    const {\n      lockAxis,\n      dragStartDelay,\n      constrainPosition,\n      previewClass,\n      boundaryElement,\n      draggingDisabled,\n      rootElementSelector,\n      previewContainer,\n    } = config;\n\n    this.disabled = draggingDisabled == null ? false : draggingDisabled;\n    this.dragStartDelay = dragStartDelay || 0;\n\n    if (lockAxis) {\n      this.lockAxis = lockAxis;\n    }\n\n    if (constrainPosition) {\n      this.constrainPosition = constrainPosition;\n    }\n\n    if (previewClass) {\n      this.previewClass = previewClass;\n    }\n\n    if (boundaryElement) {\n      this.boundaryElement = boundaryElement;\n    }\n\n    if (rootElementSelector) {\n      this.rootElementSelector = rootElementSelector;\n    }\n\n    if (previewContainer) {\n      this.previewContainer = previewContainer;\n    }\n  }\n\n  /** Sets up the listener that syncs the handles with the drag ref. */\n  private _setupHandlesListener() {\n    // Listen for any newly-added handles.\n    this._handles\n      .pipe(\n        // Sync the new handles with the DragRef.\n        tap(handles => {\n          const handleElements = handles.map(handle => handle.element);\n\n          // Usually handles are only allowed to be a descendant of the drag element, but if\n          // the consumer defined a different drag root, we should allow the drag element\n          // itself to be a handle too.\n          if (this._selfHandle && this.rootElementSelector) {\n            handleElements.push(this.element);\n          }\n\n          this._dragRef.withHandles(handleElements);\n        }),\n        // Listen if the state of any of the handles changes.\n        switchMap((handles: CdkDragHandle[]) => {\n          return merge(\n            ...handles.map(item => item._stateChanges.pipe(startWith(item))),\n          ) as Observable<CdkDragHandle>;\n        }),\n        takeUntil(this._destroyed),\n      )\n      .subscribe(handleInstance => {\n        // Enabled/disable the handle that changed in the DragRef.\n        const dragRef = this._dragRef;\n        const handle = handleInstance.element.nativeElement;\n        handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n      });\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, OnDestroy, Input, InjectionToken, booleanAttribute} from '@angular/core';\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const CDK_DROP_LIST_GROUP = new InjectionToken<CdkDropListGroup<unknown>>(\n  'CdkDropListGroup',\n);\n\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\n@Directive({\n  selector: '[cdkDropListGroup]',\n  exportAs: 'cdkDropListGroup',\n  providers: [{provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup}],\n})\nexport class CdkDropListGroup<T> implements OnDestroy {\n  /** Drop lists registered inside the group. */\n  readonly _items = new Set<T>();\n\n  /** Whether starting a dragging sequence from inside this group is disabled. */\n  @Input({alias: 'cdkDropListGroupDisabled', transform: booleanAttribute})\n  disabled: boolean = false;\n\n  ngOnDestroy() {\n    this._items.clear();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NumberInput, coerceArray, coerceNumberProperty} from '../../coercion';\nimport {\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  Directive,\n  ChangeDetectorRef,\n  booleanAttribute,\n  inject,\n} from '@angular/core';\nimport {Directionality} from '../../bidi';\nimport {_IdGenerator} from '../../a11y';\nimport {ScrollDispatcher} from '../../scrolling';\nimport {CDK_DROP_LIST, CdkDrag} from './drag';\nimport {CdkDragDrop, CdkDragEnter, CdkDragExit, CdkDragSortEvent} from '../drag-events';\nimport {CDK_DROP_LIST_GROUP, CdkDropListGroup} from './drop-list-group';\nimport {DropListRef} from '../drop-list-ref';\nimport {DragRef} from '../drag-ref';\nimport {DragDrop} from '../drag-drop';\nimport {DropListOrientation, DragAxis, DragDropConfig, CDK_DRAG_CONFIG} from './config';\nimport {merge, Subject} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {assertElementNode} from './assertions';\n\n/** Container that wraps a set of draggable items. */\n@Directive({\n  selector: '[cdkDropList], cdk-drop-list',\n  exportAs: 'cdkDropList',\n  providers: [\n    // Prevent child drop lists from picking up the same group as their parent.\n    {provide: CDK_DROP_LIST_GROUP, useValue: undefined},\n    {provide: CDK_DROP_LIST, useExisting: CdkDropList},\n  ],\n  host: {\n    'class': 'cdk-drop-list',\n    '[attr.id]': 'id',\n    '[class.cdk-drop-list-disabled]': 'disabled',\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n  },\n})\nexport class CdkDropList<T = any> implements OnDestroy {\n  element = inject<ElementRef<HTMLElement>>(ElementRef);\n  private _changeDetectorRef = inject(ChangeDetectorRef);\n  private _scrollDispatcher = inject(ScrollDispatcher);\n  private _dir = inject(Directionality, {optional: true});\n  private _group = inject<CdkDropListGroup<CdkDropList>>(CDK_DROP_LIST_GROUP, {\n    optional: true,\n    skipSelf: true,\n  });\n\n  /** Refs that have been synced with the drop ref most recently. */\n  private _latestSortedRefs: DragRef[] | undefined;\n\n  /** Emits when the list has been destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the element's scrollable parents have been resolved. */\n  private _scrollableParentsResolved: boolean;\n\n  /** Keeps track of the drop lists that are currently on the page. */\n  private static _dropLists: CdkDropList[] = [];\n\n  /** Reference to the underlying drop list instance. */\n  _dropListRef: DropListRef<CdkDropList<T>>;\n\n  /**\n   * Other draggable containers that this container is connected to and into which the\n   * container's items can be transferred. Can either be references to other drop containers,\n   * or their unique IDs.\n   */\n  @Input('cdkDropListConnectedTo')\n  connectedTo: (CdkDropList | string)[] | CdkDropList | string = [];\n\n  /** Arbitrary data to attach to this container. */\n  @Input('cdkDropListData') data: T;\n\n  /** Direction in which the list is oriented. */\n  @Input('cdkDropListOrientation') orientation: DropListOrientation;\n\n  /**\n   * Unique ID for the drop zone. Can be used as a reference\n   * in the `connectedTo` of another `CdkDropList`.\n   */\n  @Input() id: string = inject(_IdGenerator).getId('cdk-drop-list-');\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  @Input('cdkDropListLockAxis') lockAxis: DragAxis;\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  @Input({alias: 'cdkDropListDisabled', transform: booleanAttribute})\n  get disabled(): boolean {\n    return this._disabled || (!!this._group && this._group.disabled);\n  }\n  set disabled(value: boolean) {\n    // Usually we sync the directive and ref state right before dragging starts, in order to have\n    // a single point of failure and to avoid having to use setters for everything. `disabled` is\n    // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n    // the user in a disabled state, so we also need to sync it as it's being set.\n    this._dropListRef.disabled = this._disabled = value;\n  }\n  private _disabled: boolean;\n\n  /** Whether sorting within this drop list is disabled. */\n  @Input({alias: 'cdkDropListSortingDisabled', transform: booleanAttribute})\n  sortingDisabled: boolean;\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  @Input('cdkDropListEnterPredicate')\n  enterPredicate: (drag: CdkDrag, drop: CdkDropList) => boolean = () => true;\n\n  /** Functions that is used to determine whether an item can be sorted into a particular index. */\n  @Input('cdkDropListSortPredicate')\n  sortPredicate: (index: number, drag: CdkDrag, drop: CdkDropList) => boolean = () => true;\n\n  /** Whether to auto-scroll the view when the user moves their pointer close to the edges. */\n  @Input({alias: 'cdkDropListAutoScrollDisabled', transform: booleanAttribute})\n  autoScrollDisabled: boolean;\n\n  /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n  @Input('cdkDropListAutoScrollStep')\n  autoScrollStep: NumberInput;\n\n  /**\n   * Selector that will be used to resolve an alternate element container for the drop list.\n   * Passing an alternate container is useful for the cases where one might not have control\n   * over the parent node of the draggable items within the list (e.g. due to content projection).\n   * This allows for usages like:\n   *\n   * ```\n   * <div cdkDropList cdkDropListElementContainer=\".inner\">\n   *   <div class=\"inner\">\n   *     <div cdkDrag></div>\n   *   </div>\n   * </div>\n   * ```\n   */\n  @Input('cdkDropListElementContainer') elementContainerSelector: string | null;\n\n  /** Emits when the user drops an item inside the container. */\n  @Output('cdkDropListDropped')\n  readonly dropped: EventEmitter<CdkDragDrop<T, any>> = new EventEmitter<CdkDragDrop<T, any>>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  @Output('cdkDropListEntered')\n  readonly entered: EventEmitter<CdkDragEnter<T>> = new EventEmitter<CdkDragEnter<T>>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  @Output('cdkDropListExited')\n  readonly exited: EventEmitter<CdkDragExit<T>> = new EventEmitter<CdkDragExit<T>>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  @Output('cdkDropListSorted')\n  readonly sorted: EventEmitter<CdkDragSortEvent<T>> = new EventEmitter<CdkDragSortEvent<T>>();\n\n  /**\n   * Keeps track of the items that are registered with this container. Historically we used to\n   * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n   * well which means that we can't handle cases like dragging the headers of a `mat-table`\n   * correctly. What we do instead is to have the items register themselves with the container\n   * and then we sort them based on their position in the DOM.\n   */\n  private _unsortedItems = new Set<CdkDrag>();\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const dragDrop = inject(DragDrop);\n    const config = inject<DragDropConfig>(CDK_DRAG_CONFIG, {optional: true});\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      assertElementNode(this.element.nativeElement, 'cdkDropList');\n    }\n\n    this._dropListRef = dragDrop.createDropList(this.element);\n    this._dropListRef.data = this;\n\n    if (config) {\n      this._assignDefaults(config);\n    }\n\n    this._dropListRef.enterPredicate = (drag: DragRef<CdkDrag>, drop: DropListRef<CdkDropList>) => {\n      return this.enterPredicate(drag.data, drop.data);\n    };\n\n    this._dropListRef.sortPredicate = (\n      index: number,\n      drag: DragRef<CdkDrag>,\n      drop: DropListRef<CdkDropList>,\n    ) => {\n      return this.sortPredicate(index, drag.data, drop.data);\n    };\n\n    this._setupInputSyncSubscription(this._dropListRef);\n    this._handleEvents(this._dropListRef);\n    CdkDropList._dropLists.push(this);\n\n    if (this._group) {\n      this._group._items.add(this);\n    }\n  }\n\n  /** Registers an items with the drop list. */\n  addItem(item: CdkDrag): void {\n    this._unsortedItems.add(item);\n\n    // Only sync the items while dragging since this method is\n    // called when items are being initialized one-by-one.\n    if (this._dropListRef.isDragging()) {\n      this._syncItemsWithRef(this.getSortedItems().map(item => item._dragRef));\n    }\n  }\n\n  /** Removes an item from the drop list. */\n  removeItem(item: CdkDrag): void {\n    this._unsortedItems.delete(item);\n\n    // This method might be called on destroy so we always want to sync with the ref.\n    // Note that we reuse the last set of synced items, rather than re-sorting the whole\n    // list, because it can slow down re-renders of large lists (see #30737).\n    if (this._latestSortedRefs) {\n      const index = this._latestSortedRefs.indexOf(item._dragRef);\n\n      if (index > -1) {\n        this._latestSortedRefs.splice(index, 1);\n        this._syncItemsWithRef(this._latestSortedRefs);\n      }\n    }\n  }\n\n  /** Gets the registered items in the list, sorted by their position in the DOM. */\n  getSortedItems(): CdkDrag[] {\n    return Array.from(this._unsortedItems).sort((a: CdkDrag, b: CdkDrag) => {\n      const documentPosition = a._dragRef\n        .getVisibleElement()\n        .compareDocumentPosition(b._dragRef.getVisibleElement());\n\n      // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n      // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n      // tslint:disable-next-line:no-bitwise\n      return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n    });\n  }\n\n  ngOnDestroy() {\n    const index = CdkDropList._dropLists.indexOf(this);\n\n    if (index > -1) {\n      CdkDropList._dropLists.splice(index, 1);\n    }\n\n    if (this._group) {\n      this._group._items.delete(this);\n    }\n\n    this._latestSortedRefs = undefined;\n    this._unsortedItems.clear();\n    this._dropListRef.dispose();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n  private _setupInputSyncSubscription(ref: DropListRef<CdkDropList>) {\n    if (this._dir) {\n      this._dir.change\n        .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n        .subscribe(value => ref.withDirection(value));\n    }\n\n    ref.beforeStarted.subscribe(() => {\n      const siblings = coerceArray(this.connectedTo).map(drop => {\n        if (typeof drop === 'string') {\n          const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n\n          if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n          }\n\n          return correspondingDropList!;\n        }\n\n        return drop;\n      });\n\n      if (this._group) {\n        this._group._items.forEach(drop => {\n          if (siblings.indexOf(drop) === -1) {\n            siblings.push(drop);\n          }\n        });\n      }\n\n      // Note that we resolve the scrollable parents here so that we delay the resolution\n      // as long as possible, ensuring that the element is in its final place in the DOM.\n      if (!this._scrollableParentsResolved) {\n        const scrollableParents = this._scrollDispatcher\n          .getAncestorScrollContainers(this.element)\n          .map(scrollable => scrollable.getElementRef().nativeElement);\n        this._dropListRef.withScrollableParents(scrollableParents);\n\n        // Only do this once since it involves traversing the DOM and the parents\n        // shouldn't be able to change without the drop list being destroyed.\n        this._scrollableParentsResolved = true;\n      }\n\n      if (this.elementContainerSelector) {\n        const container = this.element.nativeElement.querySelector(this.elementContainerSelector);\n\n        if (!container && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw new Error(\n            `CdkDropList could not find an element container matching the selector \"${this.elementContainerSelector}\"`,\n          );\n        }\n\n        ref.withElementContainer(container as HTMLElement);\n      }\n\n      ref.disabled = this.disabled;\n      ref.lockAxis = this.lockAxis;\n      ref.sortingDisabled = this.sortingDisabled;\n      ref.autoScrollDisabled = this.autoScrollDisabled;\n      ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n      ref\n        .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n        .withOrientation(this.orientation);\n    });\n  }\n\n  /** Handles events from the underlying DropListRef. */\n  private _handleEvents(ref: DropListRef<CdkDropList>) {\n    ref.beforeStarted.subscribe(() => {\n      this._syncItemsWithRef(this.getSortedItems().map(item => item._dragRef));\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: this,\n        item: event.item.data,\n        currentIndex: event.currentIndex,\n      });\n    });\n\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: this,\n        item: event.item.data,\n      });\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.sorted.subscribe(event => {\n      this.sorted.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        container: this,\n        item: event.item.data,\n      });\n    });\n\n    ref.dropped.subscribe(dropEvent => {\n      this.dropped.emit({\n        previousIndex: dropEvent.previousIndex,\n        currentIndex: dropEvent.currentIndex,\n        previousContainer: dropEvent.previousContainer.data,\n        container: dropEvent.container.data,\n        item: dropEvent.item.data,\n        isPointerOverContainer: dropEvent.isPointerOverContainer,\n        distance: dropEvent.distance,\n        dropPoint: dropEvent.dropPoint,\n        event: dropEvent.event,\n      });\n\n      // Mark for check since all of these events run outside of change\n      // detection and we're not guaranteed for something else to have triggered it.\n      this._changeDetectorRef.markForCheck();\n    });\n\n    merge(ref.receivingStarted, ref.receivingStopped).subscribe(() =>\n      this._changeDetectorRef.markForCheck(),\n    );\n  }\n\n  /** Assigns the default input values based on a provided config object. */\n  private _assignDefaults(config: DragDropConfig) {\n    const {lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation} =\n      config;\n\n    this.disabled = draggingDisabled == null ? false : draggingDisabled;\n    this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n    this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n    this.orientation = listOrientation || 'vertical';\n\n    if (lockAxis) {\n      this.lockAxis = lockAxis;\n    }\n  }\n\n  /** Syncs up the registered drag items with underlying drop list ref. */\n  private _syncItemsWithRef(items: DragRef[]) {\n    this._latestSortedRefs = items;\n    this._dropListRef.withItems(items);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  TemplateRef,\n  booleanAttribute,\n  inject,\n} from '@angular/core';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const CDK_DRAG_PREVIEW = new InjectionToken<CdkDragPreview>('CdkDragPreview');\n\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPreview]',\n  providers: [{provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview}],\n})\nexport class CdkDragPreview<T = any> implements OnDestroy {\n  templateRef = inject<TemplateRef<T>>(TemplateRef);\n\n  private _drag = inject(CDK_DRAG_PARENT, {optional: true});\n\n  /** Context data to be added to the preview template instance. */\n  @Input() data: T;\n\n  /** Whether the preview should preserve the same size as the item that is being dragged. */\n  @Input({transform: booleanAttribute}) matchSize: boolean = false;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    this._drag?._setPreviewTemplate(this);\n  }\n\n  ngOnDestroy(): void {\n    this._drag?._resetPreviewTemplate(this);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, TemplateRef, Input, InjectionToken, inject, OnDestroy} from '@angular/core';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const CDK_DRAG_PLACEHOLDER = new InjectionToken<CdkDragPlaceholder>('CdkDragPlaceholder');\n\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPlaceholder]',\n  providers: [{provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder}],\n})\nexport class CdkDragPlaceholder<T = any> implements OnDestroy {\n  templateRef = inject<TemplateRef<T>>(TemplateRef);\n\n  private _drag = inject(CDK_DRAG_PARENT, {optional: true});\n\n  /** Context data to be added to the placeholder template instance. */\n  @Input() data: T;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    this._drag?._setPlaceholderTemplate(this);\n  }\n\n  ngOnDestroy(): void {\n    this._drag?._resetPlaceholderTemplate(this);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkScrollableModule} from '../scrolling';\nimport {CdkDropList} from './directives/drop-list';\nimport {CdkDropListGroup} from './directives/drop-list-group';\nimport {CdkDrag} from './directives/drag';\nimport {CdkDragHandle} from './directives/drag-handle';\nimport {CdkDragPreview} from './directives/drag-preview';\nimport {CdkDragPlaceholder} from './directives/drag-placeholder';\nimport {DragDrop} from './drag-drop';\n\nconst DRAG_DROP_DIRECTIVES = [\n  CdkDropList,\n  CdkDropListGroup,\n  CdkDrag,\n  CdkDragHandle,\n  CdkDragPreview,\n  CdkDragPlaceholder,\n];\n\n@NgModule({\n  imports: DRAG_DROP_DIRECTIVES,\n  exports: [CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],\n  providers: [DragDrop],\n})\nexport class DragDropModule {}\n\n// Re-export needed by the Angular compiler.\n// See: https://github.com/angular/components/issues/30663.\n// Note: These exports need to be stable and shouldn't be renamed unnecessarily because\n// consuming libraries might have references to them in their own partial compilation output.\nexport {CdkScrollable as ɵɵCdkScrollable} from '../scrolling';\n"],
  "mappings": "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",
  "names": ["shadowDomIsSupported", "_supportsShadowDom", "head", "document", "createShadowRoot", "attachShadow", "_getShadowRoot", "element", "rootNode", "getRootNode", "ShadowRoot", "_getEventTarget", "event", "composedPath", "target", "isFakeMousedownFromScreenReader", "event", "buttons", "detail", "isFakeTouchstartFromScreenReader", "touch", "touches", "changedTouches", "identifier", "radiusX", "radiusY", "coerceNumberProperty", "value", "fallbackValue", "_isNumberValue", "Number", "arguments", "length", "isNaN", "parseFloat", "coerceElement", "elementOrRef", "ElementRef", "nativeElement", "_bindEventWithOptions", "renderer", "target", "eventName", "callback", "options", "major", "parseInt", "VERSION", "minor", "listen", "addEventListener", "removeEventListener", "appsWithLoaders", "WeakMap", "_CdkPrivateStyleLoader", "_appRef", "_injector", "inject", "Injector", "_environmentInjector", "EnvironmentInjector", "load", "loader", "appRef", "get", "ApplicationRef", "data", "loaders", "Set", "refs", "set", "onDestroy", "forEach", "ref", "destroy", "delete", "has", "add", "push", "createComponent", "environmentInjector", "ɵprov", "factory", "ɵfac", "providedIn", "Injectable", "hasV8BreakIterator", "Intl", "v8BreakIterator", "Platform", "_platformId", "inject", "PLATFORM_ID", "isBrowser", "isPlatformBrowser", "document", "EDGE", "test", "navigator", "userAgent", "TRIDENT", "BLINK", "window", "chrome", "CSS", "WEBKIT", "IOS", "FIREFOX", "ANDROID", "SAFARI", "constructor", "ɵprov", "factory", "ɵfac", "providedIn", "Injectable", "DIR_DOCUMENT", "InjectionToken", "providedIn", "factory", "DIR_DOCUMENT_FACTORY", "inject", "DOCUMENT", "RTL_LOCALE_PATTERN", "_resolveDirectionality", "rawValue", "value", "toLowerCase", "navigator", "language", "test", "Directionality", "change", "EventEmitter", "constructor", "_document", "optional", "bodyDir", "body", "dir", "htmlDir", "documentElement", "ngOnDestroy", "complete", "ɵprov", "ɵfac", "Injectable", "RtlScrollAxisType", "rtlScrollAxisType", "scrollBehaviorSupported", "supportsScrollBehavior", "document", "Element", "documentElement", "style", "scrollToFunction", "prototype", "scrollTo", "test", "toString", "getRtlScrollAxisType", "NORMAL", "scrollContainer", "createElement", "containerStyle", "dir", "width", "overflow", "visibility", "pointerEvents", "position", "content", "contentStyle", "height", "appendChild", "body", "scrollLeft", "NEGATED", "INVERTED", "remove", "Dir", "_dir", "_isInitialized", "_rawDir", "change", "EventEmitter", "dir", "value", "previousValue", "_resolveDirectionality", "emit", "ngAfterContentInit", "ngOnDestroy", "complete", "selectors", "hostVars", "hostBindings", "Dir_HostBindings", "rf", "ctx", "provide", "Directionality", "useExisting", "Directive", "args", "selector", "providers", "host", "exportAs", "Output", "Input", "BidiModule", "imports", "exports", "NgModule", "DataSource", "isDataSource", "value", "connect", "ConnectableObservable", "ArrayDataSource", "DataSource", "_data", "constructor", "connect", "isObservable", "of", "disconnect", "_ViewRepeaterOperation", "_VIEW_REPEATER_STRATEGY", "InjectionToken", "_RecycleViewRepeaterStrategy", "viewCacheSize", "_viewCache", "applyChanges", "changes", "viewContainerRef", "itemContextFactory", "itemValueResolver", "itemViewChanged", "forEachOperation", "record", "adjustedPreviousIndex", "currentIndex", "view", "operation", "previousIndex", "viewArgsFactory", "_insertView", "INSERTED", "REPLACED", "_detachAndCacheView", "REMOVED", "_moveView", "MOVED", "context", "detach", "destroy", "value", "cachedView", "_insertViewFromCache", "$implicit", "undefined", "viewArgs", "createEmbeddedView", "templateRef", "index", "detachedView", "_maybeCacheView", "get", "move", "length", "push", "indexOf", "remove", "pop", "insert", "VIRTUAL_SCROLL_STRATEGY", "InjectionToken", "FixedSizeVirtualScrollStrategy", "_scrolledIndexChange", "Subject", "scrolledIndexChange", "pipe", "distinctUntilChanged", "_viewport", "_itemSize", "_minBufferPx", "_maxBufferPx", "constructor", "itemSize", "minBufferPx", "maxBufferPx", "attach", "viewport", "_updateTotalContentSize", "_updateRenderedRange", "detach", "complete", "updateItemAndBufferSize", "ngDevMode", "Error", "onContentScrolled", "onDataLengthChanged", "onContentRendered", "onRenderedOffsetChanged", "scrollToIndex", "index", "behavior", "scrollToOffset", "setTotalContentSize", "getDataLength", "renderedRange", "getRenderedRange", "newRange", "start", "end", "viewportSize", "getViewportSize", "dataLength", "scrollOffset", "measureScrollOffset", "firstVisibleIndex", "maxVisibleItems", "Math", "ceil", "newVisibleIndex", "max", "min", "floor", "startBuffer", "expandStart", "endBuffer", "expandEnd", "setRenderedRange", "setRenderedContentOffset", "next", "_fixedSizeVirtualScrollStrategyFactory", "fixedSizeDir", "_scrollStrategy", "CdkFixedSizeVirtualScroll", "value", "coerceNumberProperty", "ngOnChanges", "ɵdir", "selectors", "inputs", "features", "provide", "useFactory", "deps", "forwardRef", "Directive", "args", "selector", "providers", "Input", "DEFAULT_SCROLL_TIME", "ScrollDispatcher", "_ngZone", "inject", "NgZone", "_platform", "Platform", "_renderer", "RendererFactory2", "createRenderer", "_cleanupGlobalListener", "_scrolled", "_scrolledCount", "scrollContainers", "Map", "register", "scrollable", "has", "set", "elementScrolled", "subscribe", "deregister", "scrollableReference", "get", "unsubscribe", "delete", "scrolled", "auditTimeInMs", "isBrowser", "of", "Observable", "observer", "runOutsideAngular", "listen", "subscription", "auditTime", "undefined", "ngOnDestroy", "forEach", "_", "container", "ancestorScrolled", "elementOrElementRef", "ancestors", "getAncestorScrollContainers", "filter", "target", "indexOf", "scrollingContainers", "_subscription", "_scrollableContainsElement", "push", "element", "coerceElement", "scrollableElement", "getElementRef", "nativeElement", "parentElement", "ɵprov", "factory", "ɵfac", "providedIn", "Injectable", "CdkScrollable", "elementRef", "ElementRef", "scrollDispatcher", "ngZone", "dir", "Directionality", "optional", "_scrollElement", "_destroyed", "Renderer2", "_cleanupScroll", "_elementScrolled", "ngOnInit", "event", "scrollTo", "options", "el", "isRtl", "left", "right", "bottom", "top", "scrollHeight", "clientHeight", "getRtlScrollAxisType", "RtlScrollAxisType", "NORMAL", "scrollWidth", "clientWidth", "INVERTED", "NEGATED", "_applyScrollToOptions", "supportsScrollBehavior", "scrollTop", "scrollLeft", "from", "LEFT", "RIGHT", "DEFAULT_RESIZE_TIME", "ViewportRuler", "_listeners", "_viewportSize", "_change", "_document", "DOCUMENT", "renderer", "changeListener", "change", "cleanup", "_updateViewportSize", "output", "width", "height", "getViewportRect", "scrollPosition", "getViewportScrollPosition", "document", "window", "_getWindow", "documentElement", "documentRect", "getBoundingClientRect", "body", "scrollY", "scrollX", "throttleTime", "defaultView", "innerWidth", "innerHeight", "VIRTUAL_SCROLLABLE", "CdkVirtualScrollable", "measureViewportSize", "orientation", "viewportEl", "rangesEqual", "r1", "r2", "SCROLL_SCHEDULER", "requestAnimationFrame", "animationFrameScheduler", "asapScheduler", "CdkVirtualScrollViewport", "_changeDetectorRef", "ChangeDetectorRef", "_detachedSubject", "_renderedRangeSubject", "_orientation", "_calculateSpacerSize", "appendOnly", "Promise", "resolve", "then", "run", "_contentWrapper", "renderedRangeStream", "_totalContentSize", "_totalContentWidth", "_totalContentHeight", "_renderedContentTransform", "_renderedRange", "_dataLength", "_forOf", "_renderedContentOffset", "_renderedContentOffsetNeedsRewrite", "_isChangeDetectionPending", "_runAfterChangeDetection", "_viewportChanges", "Subscription", "EMPTY", "_injector", "Injector", "_isDestroyed", "viewportRuler", "checkViewportSize", "classList", "add", "_measureViewportSize", "startWith", "takeUntil", "_markChangeDetectionNeeded", "forOf", "dataStream", "data", "newLength", "length", "_doChangeDetection", "measureBoundingClientRectWithScrollOffset", "size", "range", "getOffsetToRenderedContentStart", "offset", "to", "isHorizontal", "axis", "axisDirection", "transform", "Number", "measureRenderedContentSize", "_from", "measureViewportOffset", "fromRect", "scrollerClientRect", "viewportClientRect", "contentEl", "offsetWidth", "offsetHeight", "measureRangeSize", "runAfter", "markForCheck", "style", "afterNextRender", "runAfterChangeDetection", "fn", "injector", "viewQuery", "CdkVirtualScrollViewport_Query", "rf", "ctx", "booleanAttribute", "outputs", "virtualScrollable", "Optional", "Inject", "styles", "encapsulation", "changeDetection", "Component", "host", "ViewEncapsulation", "None", "ChangeDetectionStrategy", "OnPush", "template", "Output", "ViewChild", "static", "getOffset", "direction", "node", "rect", "CdkVirtualForOf", "_viewContainerRef", "ViewContainerRef", "_template", "TemplateRef", "_differs", "IterableDiffers", "_viewRepeater", "_VIEW_REPEATER_STRATEGY", "skipSelf", "viewChange", "_dataSourceChanges", "cdkVirtualForOf", "_cdkVirtualForOf", "isDataSource", "ArrayDataSource", "isObservable", "Array", "cdkVirtualForTrackBy", "_cdkVirtualForTrackBy", "_needsUpdate", "item", "cdkVirtualForTemplate", "cdkVirtualForTemplateCacheSize", "viewCacheSize", "pairwise", "switchMap", "prev", "cur", "_changeDataSource", "shareReplay", "_differ", "_data", "_renderedItems", "_onRenderedDataChange", "observers", "renderedStartIndex", "rangeLen", "firstNode", "lastNode", "i", "view", "rootNodes", "ngDoCheck", "changes", "diff", "_updateContext", "_applyChanges", "slice", "find", "create", "oldDs", "newDs", "disconnect", "connect", "count", "context", "_updateComputedContextProperties", "detectChanges", "applyChanges", "record", "_adjustedPreviousIndex", "currentIndex", "_getEmbeddedViewArgs", "forEachIdentityChange", "$implicit", "first", "last", "even", "odd", "templateRef", "ngTemplateContextGuard", "directive", "useClass", "_RecycleViewRepeaterStrategy", "CdkVirtualScrollableElement", "hostAttrs", "useExisting", "CdkVirtualScrollableWindow", "CdkScrollableModule", "imports", "exports", "NgModule", "ScrollingModule", "ɵmod", "BidiModule", "ɵinj", "counters", "_IdGenerator", "_appId", "inject", "APP_ID", "getId", "prefix", "hasOwnProperty", "ɵprov", "factory", "ɵfac", "providedIn", "Injectable", "coerceArray", "value", "Array", "isArray", "deepCloneNode", "node", "clone", "cloneNode", "descendantsWithId", "querySelectorAll", "nodeName", "toLowerCase", "removeAttribute", "i", "length", "transferCanvasData", "transferInputData", "transferData", "selector", "callback", "descendantElements", "cloneElements", "cloneUniqueId", "source", "type", "value", "name", "context", "getContext", "drawImage", "getMutableClientRect", "element", "rect", "getBoundingClientRect", "top", "right", "bottom", "left", "width", "height", "x", "y", "isInsideClientRect", "clientRect", "adjustDomRect", "domRect", "isPointerNearDomRect", "threshold", "pointerX", "pointerY", "xThreshold", "yThreshold", "ParentPositionTracker", "_document", "positions", "Map", "constructor", "clear", "cache", "elements", "set", "scrollPosition", "getViewportScrollPosition", "forEach", "scrollTop", "scrollLeft", "handleScroll", "event", "target", "_getEventTarget", "cachedPosition", "get", "newTop", "newLeft", "viewportScrollPosition", "topDifference", "leftDifference", "position", "contains", "window", "scrollY", "scrollX", "getRootNode", "viewRef", "rootNodes", "nodeType", "ELEMENT_NODE", "wrapper", "createElement", "appendChild", "extendStyles", "dest", "importantProperties", "key", "hasOwnProperty", "setProperty", "has", "removeProperty", "toggleNativeDragInteractions", "enable", "userSelect", "style", "toggleVisibility", "opacity", "combineTransforms", "transform", "initialTransform", "matchElementSize", "sourceRect", "getTransform", "Math", "round", "parseCssTimeUnitsToMs", "multiplier", "indexOf", "parseFloat", "getTransformTransitionDurationInMs", "computedStyle", "getComputedStyle", "transitionedProperties", "parseCssPropertyValue", "property", "find", "prop", "propertyIndex", "rawDurations", "rawDelays", "getPropertyValue", "split", "map", "part", "trim", "Set", "PreviewRef", "_rootElement", "_direction", "_initialDomRect", "_previewTemplate", "_previewClass", "_pickupPositionOnPage", "_initialTransform", "_zIndex", "_renderer", "_previewEmbeddedView", "_preview", "attach", "parent", "_createPreview", "supportsPopover", "destroy", "remove", "setTransform", "addClass", "className", "classList", "add", "getTransitionDuration", "addEventListener", "handler", "listen", "previewConfig", "previewClass", "previewTemplate", "template", "preview", "rootRect", "matchSize", "viewContainer", "createEmbeddedView", "detectChanges", "setAttribute", "Array", "isArray", "passiveEventListenerOptions", "passive", "activeEventListenerOptions", "activeCapturingEventOptions$1", "capture", "MOUSE_EVENT_IGNORE_TIME", "dragImportantProperties", "DragRef", "_config", "_ngZone", "_viewportRuler", "_dragDropRegistry", "_rootElementCleanups", "_cleanupShadowRootSelectStart", "_previewContainer", "_placeholderRef", "_placeholder", "_pickupPositionInElement", "_anchor", "_passiveTransform", "_activeTransform", "_hasStartedDragging", "signal", "_hasMoved", "_initialContainer", "_initialIndex", "_parentPositions", "_moveEvents", "Subject", "_pointerDirectionDelta", "_pointerPositionAtLastDirectionChange", "_lastKnownPointerPosition", "_ownerSVGElement", "_rootElementTapHighlight", "_pointerMoveSubscription", "Subscription", "EMPTY", "_pointerUpSubscription", "_scrollSubscription", "_resizeSubscription", "_lastTouchEventTime", "_dragStartTime", "_boundaryElement", "_nativeInteractionsEnabled", "_previewRect", "_boundaryRect", "_placeholderTemplate", "_handles", "_disabledHandles", "_dropContainer", "_parentDragRef", "_cachedShadowRoot", "lockAxis", "dragStartDelay", "scale", "disabled", "_disabled", "_toggleNativeDragInteractions", "handle", "beforeStarted", "started", "released", "ended", "entered", "exited", "dropped", "moved", "data", "constrainPosition", "withRootElement", "withParent", "parentDragRef", "registerDragItem", "getPlaceholderElement", "getRootElement", "getVisibleElement", "isDragging", "withHandles", "handles", "coerceElement", "disabledHandles", "withPreviewTemplate", "withPlaceholderTemplate", "rootElement", "_removeRootElementListeners", "runOutsideAngular", "_bindEventWithOptions", "_pointerDown", "_nativeDragStart", "undefined", "SVGElement", "ownerSVGElement", "withBoundaryElement", "boundaryElement", "unsubscribe", "change", "subscribe", "_containInsideBoundaryOnResize", "dispose", "_destroyPreview", "_destroyPlaceholder", "removeDragItem", "_removeListeners", "complete", "reset", "disableHandle", "enableHandle", "delete", "withDirection", "direction", "_withDropContainer", "container", "getFreeDragPosition", "setFreeDragPosition", "_applyRootElementTransform", "withPreviewContainer", "_sortFromLastPointerPosition", "_updateActiveDropContainer", "_getConstrainedPointerPosition", "next", "targetHandle", "_getTargetHandle", "_initializeDragSequence", "_pointerMove", "pointerPosition", "_getPointerPositionOnPage", "distanceX", "abs", "distanceY", "isOverThreshold", "dragStartThreshold", "isDelayElapsed", "Date", "now", "_getDragStartDelay", "_endDragSequence", "isReceiving", "cancelable", "preventDefault", "run", "_startDragSequence", "constrainedPointerPosition", "_updatePointerDirectionDelta", "offset", "activeTransform", "observers", "distance", "_getDragDistance", "delta", "_pointerUp", "stopDragging", "webkitTapHighlightColor", "_stopScrolling", "_animatePreviewToPlaceholder", "then", "_cleanupDragArtifacts", "_cleanupCachedDimensions", "dropPoint", "isTouchEvent", "shadowRoot", "_getShadowRoot", "dropContainer", "shadowDomSelectStart", "parentNode", "placeholder", "_createPlaceholderElement", "anchor", "createComment", "ngDevMode", "insertBefore", "zIndex", "_getPreviewInsertionPoint", "body", "replaceChild", "start", "getItemIndex", "getScrollableParents", "referenceElement", "stopPropagation", "isTouchSequence", "isAuxiliaryMouseButton", "button", "isSyntheticEvent", "isFakeEvent", "isFakeTouchstartFromScreenReader", "isFakeMousedownFromScreenReader", "draggable", "rootStyles", "pointerMove", "pointerUp", "scrolled", "scrollEvent", "_updateOnScroll", "_getPointerPositionInElement", "startDragging", "currentIndex", "isPointerOverContainer", "_isOverContainer", "item", "previousIndex", "previousContainer", "drop", "rawX", "rawY", "newContainer", "_getSiblingContainerFromPosition", "exit", "enter", "sortingDisabled", "_startScrollingIfNecessary", "_sortItem", "_applyPreviewTransform", "Promise", "resolve", "placeholderRect", "duration", "propertyName", "cleanupListener", "clearTimeout", "timeout", "setTimeout", "placeholderConfig", "placeholderTemplate", "pointerEvents", "elementRect", "handleElement", "referenceRect", "point", "targetTouches", "_getViewportScrollPosition", "pageX", "pageY", "touches", "changedTouches", "svgMatrix", "getScreenCTM", "svgPoint", "createSVGPoint", "matrixTransform", "inverse", "dropContainerLock", "pickupX", "pickupY", "boundaryRect", "previewWidth", "previewHeight", "_getPreviewRect", "minY", "maxY", "minX", "maxX", "clamp$1", "pointerPositionOnPage", "positionSinceLastChange", "changeX", "changeY", "pointerDirectionChangeThreshold", "shouldEnable", "cleanup", "styles", "currentPosition", "pickupPosition", "leftOverflow", "rightOverflow", "topOverflow", "bottomOverflow", "touch", "mouse", "scrollDifference", "initialParent", "previewContainer", "documentRef", "fullscreenElement", "webkitFullscreenElement", "mozFullScreenElement", "msFullscreenElement", "min", "max", "moveItemInArray", "array", "fromIndex", "toIndex", "from", "clamp", "to", "transferArrayItem", "currentArray", "targetArray", "targetIndex", "splice", "copyArrayItem", "SingleAxisSortStrategy", "_element", "_sortPredicate", "_itemPositions", "_activeDraggables", "orientation", "_previousSwap", "drag", "overlaps", "items", "withItems", "sort", "pointerDelta", "siblings", "newIndex", "_getItemIndexFromPointerPosition", "isHorizontal", "findIndex", "currentItem", "siblingAtNewPosition", "newPosition", "itemOffset", "_getItemOffsetPx", "siblingOffset", "_getSiblingOffsetPx", "oldOrder", "slice", "sibling", "index", "isDraggedItem", "elementToOffset", "transformAmount", "activeDraggables", "newPositionReference", "_shouldEnterAsFirstChild", "parentElement", "push", "_cacheItemPositions", "withSortPredicate", "predicate", "p", "getActiveItemsSnapshot", "reverse", "updateOnScroll", "withElementContainer", "elementToMeasure", "a", "b", "immediateSibling", "end", "itemPositions", "reversed", "lastItemRect", "firstItemRect", "floor", "MixedSortStrategy", "_rootNode", "_activeItems", "deltaX", "deltaY", "_relatedNodes", "childNodes", "nextSibling", "previousSwap", "toSwapWith", "current", "overlapElement", "after", "before", "newOverlapElement", "_getRootNode", "elementFromPoint", "enterIndex", "_getClosestItemIndexToPointer", "targetItem", "root", "elementAtPoint", "minDistance", "Infinity", "minIndex", "hypot", "DROP_PROXIMITY_THRESHOLD", "SCROLL_PROXIMITY_THRESHOLD", "AutoScrollVerticalDirection", "AutoScrollHorizontalDirection", "DropListRef", "autoScrollDisabled", "autoScrollStep", "enterPredicate", "sortPredicate", "sorted", "receivingStarted", "receivingStopped", "_container", "_isDragging", "_sortStrategy", "_domRect", "_draggables", "_siblings", "_activeSiblings", "_viewportScrollSubscription", "_verticalScrollDirection", "NONE", "_horizontalScrollDirection", "_scrollNode", "_stopScrollTimers", "_scrollableElements", "_initialScrollSnap", "coercedElement", "withOrientation", "registerDropContainer", "removeDropContainer", "_draggingStarted", "_notifyReceivingSiblings", "_cacheParentPositions", "_reset", "previousItems", "draggedItems", "filter", "every", "connectedTo", "strategy", "withScrollableParents", "Error", "oldContainerIndex", "newContainerIndex", "unshift", "size", "result", "scrollNode", "verticalScrollDirection", "horizontalScrollDirection", "getElementScrollDirections", "getViewportSize", "getVerticalScrollDirection", "getHorizontalScrollDirection", "_startScrollInterval", "msScrollSnapType", "scrollSnapType", "_listenToScrollEvents", "_stopReceiving", "interval", "animationFrameScheduler", "pipe", "takeUntil", "scrollStep", "UP", "scrollBy", "DOWN", "LEFT", "RIGHT", "_canReceive", "_startReceiving", "activeSiblings", "initiator", "receiver", "computedVertical", "computedHorizontal", "scrollHeight", "clientHeight", "scrollWidth", "clientWidth", "capturingEventOptions", "activeCapturingEventOptions", "_ResetsLoader", "ɵcmp", "selectors", "hostAttrs", "decls", "vars", "_ResetsLoader_Template", "rf", "ctx", "encapsulation", "changeDetection", "Component", "args", "ViewEncapsulation", "None", "ChangeDetectionStrategy", "OnPush", "host", "DragDropRegistry", "inject", "NgZone", "DOCUMENT", "_styleLoader", "_CdkPrivateStyleLoader", "RendererFactory2", "createRenderer", "_cleanupDocumentTouchmove", "_dropInstances", "_dragInstances", "_activeDragInstances", "_globalListeners", "_draggingPredicate", "_domNodesToDirectives", "scroll", "_persistentTouchmoveListener", "load", "update", "instances", "startsWith", "endEventHandler", "e", "toBind", "_preventDefaultWhileDragging", "options", "_clearGlobalListeners", "streams", "Observable", "observer", "merge", "registerDirectiveNode", "dragRef", "WeakMap", "removeDirectiveNode", "getDragDirectiveForNode", "ngOnDestroy", "instance", "some", "ɵprov", "factory", "ɵfac", "providedIn", "Injectable", "DEFAULT_CONFIG", "DragDrop", "ViewportRuler", "createDrag", "config", "createDropList", "CDK_DRAG_PARENT", "InjectionToken", "assertElementNode", "CDK_DRAG_HANDLE", "CdkDragHandle", "ElementRef", "_parentDrag", "optional", "skipSelf", "_stateChanges", "nativeElement", "_addHandle", "ngAfterViewInit", "ref", "_removeHandle", "ɵdir", "inputs", "booleanAttribute", "features", "provide", "useExisting", "Directive", "providers", "Input", "alias", "CDK_DRAG_CONFIG", "CDK_DROP_LIST", "CdkDrag", "_viewContainerRef", "ViewContainerRef", "_dir", "Directionality", "_changeDetectorRef", "ChangeDetectorRef", "_selfHandle", "self", "_destroyed", "BehaviorSubject", "_dragRef", "rootElementSelector", "freeDragPosition", "EventEmitter", "subscription", "movedEvent", "_injector", "Injector", "dragDrop", "_assignDefaults", "_dropListRef", "addItem", "_syncInputs", "_handleEvents", "afterNextRender", "_updateRootElement", "_setupHandlesListener", "injector", "ngOnChanges", "changes", "rootSelectorChange", "positionChange", "firstChange", "removeItem", "getValue", "_setPreviewTemplate", "_resetPreviewTemplate", "_setPlaceholderTemplate", "_resetPlaceholderTemplate", "closest", "_getBoundaryElement", "boundary", "dir", "templateRef", "coerceNumberProperty", "take", "parentDrag", "startEvent", "emit", "markForCheck", "releaseEvent", "endEvent", "enterEvent", "exitEvent", "dropEvent", "draggingDisabled", "tap", "handleElements", "switchMap", "startWith", "handleInstance", "hostVars", "hostBindings", "CdkDrag_HostBindings", "numberAttribute", "outputs", "exportAs", "Output", "CDK_DROP_LIST_GROUP", "CdkDropListGroup", "_items", "CdkDropList", "_scrollDispatcher", "ScrollDispatcher", "_group", "_latestSortedRefs", "_scrollableParentsResolved", "_dropLists", "id", "_IdGenerator", "getId", "elementContainerSelector", "_unsortedItems", "_setupInputSyncSubscription", "_syncItemsWithRef", "getSortedItems", "documentPosition", "compareDocumentPosition", "Node", "DOCUMENT_POSITION_FOLLOWING", "coerceArray", "correspondingDropList", "list", "console", "warn", "scrollableParents", "getAncestorScrollContainers", "scrollable", "getElementRef", "querySelector", "listAutoScrollDisabled", "listOrientation", "CdkDropList_HostBindings", "useValue", "CDK_DRAG_PREVIEW", "CdkDragPreview", "TemplateRef", "_drag", "CDK_DRAG_PLACEHOLDER", "CdkDragPlaceholder", "DRAG_DROP_DIRECTIVES", "DragDropModule", "ɵmod", "imports", "exports", "CdkScrollableModule", "ɵinj", "NgModule"]
}
