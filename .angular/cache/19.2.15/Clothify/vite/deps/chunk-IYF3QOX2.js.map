{
  "version": 3,
  "sources": ["../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/common/http/src/backend.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/common/http/src/headers.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/common/http/src/params.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/common/http/src/context.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/common/http/src/request.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/common/http/src/response.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/common/http/src/client.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/common/http/src/fetch.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/common/http/src/interceptor.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/common/http/src/jsonp.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/common/http/src/xhr.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/common/http/src/xsrf.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/common/http/src/provider.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/common/http/src/module.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/common/http/src/resource.ts", "../../../../../../../darwin_arm64-fastbuild-ST-2d99d9656325/bin/packages/common/http/src/transfer_cache.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Observable} from 'rxjs';\n\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nexport abstract class HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nexport abstract class HttpBackend implements HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\ninterface Update {\n  name: string;\n  value?: string | string[];\n  op: 'a' | 's' | 'd';\n}\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nexport class HttpHeaders {\n  /**\n   * Internal map of lowercase header names to values.\n   */\n  private headers!: Map<string, string[]>;\n\n  /**\n   * Internal map of lowercased header names to the normalized\n   * form of the name (the form seen first).\n   */\n  private normalizedNames: Map<string, string> = new Map();\n\n  /**\n   * Complete the lazy initialization of this object (needed before reading).\n   */\n  private lazyInit!: HttpHeaders | Function | null;\n\n  /**\n   * Queued updates to be materialized the next initialization.\n   */\n  private lazyUpdate: Update[] | null = null;\n\n  /**  Constructs a new HTTP header object with the given values.*/\n\n  constructor(\n    headers?: string | {[name: string]: string | number | (string | number)[]} | Headers,\n  ) {\n    if (!headers) {\n      this.headers = new Map<string, string[]>();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = () => {\n        this.headers = new Map<string, string[]>();\n        headers.split('\\n').forEach((line) => {\n          const index = line.indexOf(':');\n          if (index > 0) {\n            const name = line.slice(0, index);\n            const value = line.slice(index + 1).trim();\n            this.addHeaderEntry(name, value);\n          }\n        });\n      };\n    } else if (typeof Headers !== 'undefined' && headers instanceof Headers) {\n      this.headers = new Map<string, string[]>();\n      headers.forEach((value: string, name: string) => {\n        this.addHeaderEntry(name, value);\n      });\n    } else {\n      this.lazyInit = () => {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          assertValidHeaders(headers);\n        }\n        this.headers = new Map<string, string[]>();\n        Object.entries(headers).forEach(([name, values]) => {\n          this.setHeaderEntries(name, values);\n        });\n      };\n    }\n  }\n\n  /**\n   * Checks for existence of a given header.\n   *\n   * @param name The header name to check for existence.\n   *\n   * @returns True if the header exists, false otherwise.\n   */\n  has(name: string): boolean {\n    this.init();\n\n    return this.headers.has(name.toLowerCase());\n  }\n\n  /**\n   * Retrieves the first value of a given header.\n   *\n   * @param name The header name.\n   *\n   * @returns The value string if the header exists, null otherwise\n   */\n  get(name: string): string | null {\n    this.init();\n\n    const values = this.headers.get(name.toLowerCase());\n    return values && values.length > 0 ? values[0] : null;\n  }\n\n  /**\n   * Retrieves the names of the headers.\n   *\n   * @returns A list of header names.\n   */\n  keys(): string[] {\n    this.init();\n\n    return Array.from(this.normalizedNames.values());\n  }\n\n  /**\n   * Retrieves a list of values for a given header.\n   *\n   * @param name The header name from which to retrieve values.\n   *\n   * @returns A string of values if the header exists, null otherwise.\n   */\n  getAll(name: string): string[] | null {\n    this.init();\n\n    return this.headers.get(name.toLowerCase()) || null;\n  }\n\n  /**\n   * Appends a new value to the existing set of values for a header\n   * and returns them in a clone of the original instance.\n   *\n   * @param name The header name for which to append the values.\n   * @param value The value to append.\n   *\n   * @returns A clone of the HTTP headers object with the value appended to the given header.\n   */\n\n  append(name: string, value: string | string[]): HttpHeaders {\n    return this.clone({name, value, op: 'a'});\n  }\n  /**\n   * Sets or modifies a value for a given header in a clone of the original instance.\n   * If the header already exists, its value is replaced with the given value\n   * in the returned object.\n   *\n   * @param name The header name.\n   * @param value The value or values to set or override for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the newly set header value.\n   */\n  set(name: string, value: string | string[]): HttpHeaders {\n    return this.clone({name, value, op: 's'});\n  }\n  /**\n   * Deletes values for a given header in a clone of the original instance.\n   *\n   * @param name The header name.\n   * @param value The value or values to delete for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the given value deleted.\n   */\n  delete(name: string, value?: string | string[]): HttpHeaders {\n    return this.clone({name, value, op: 'd'});\n  }\n\n  private maybeSetNormalizedName(name: string, lcName: string): void {\n    if (!this.normalizedNames.has(lcName)) {\n      this.normalizedNames.set(lcName, name);\n    }\n  }\n\n  private init(): void {\n    if (!!this.lazyInit) {\n      if (this.lazyInit instanceof HttpHeaders) {\n        this.copyFrom(this.lazyInit);\n      } else {\n        this.lazyInit();\n      }\n      this.lazyInit = null;\n      if (!!this.lazyUpdate) {\n        this.lazyUpdate.forEach((update) => this.applyUpdate(update));\n        this.lazyUpdate = null;\n      }\n    }\n  }\n\n  private copyFrom(other: HttpHeaders) {\n    other.init();\n    Array.from(other.headers.keys()).forEach((key) => {\n      this.headers.set(key, other.headers.get(key)!);\n      this.normalizedNames.set(key, other.normalizedNames.get(key)!);\n    });\n  }\n\n  private clone(update: Update): HttpHeaders {\n    const clone = new HttpHeaders();\n    clone.lazyInit = !!this.lazyInit && this.lazyInit instanceof HttpHeaders ? this.lazyInit : this;\n    clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n    return clone;\n  }\n\n  private applyUpdate(update: Update): void {\n    const key = update.name.toLowerCase();\n    switch (update.op) {\n      case 'a':\n      case 's':\n        let value = update.value!;\n        if (typeof value === 'string') {\n          value = [value];\n        }\n        if (value.length === 0) {\n          return;\n        }\n        this.maybeSetNormalizedName(update.name, key);\n        const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n        base.push(...value);\n        this.headers.set(key, base);\n        break;\n      case 'd':\n        const toDelete = update.value as string | undefined;\n        if (!toDelete) {\n          this.headers.delete(key);\n          this.normalizedNames.delete(key);\n        } else {\n          let existing = this.headers.get(key);\n          if (!existing) {\n            return;\n          }\n          existing = existing.filter((value) => toDelete.indexOf(value) === -1);\n          if (existing.length === 0) {\n            this.headers.delete(key);\n            this.normalizedNames.delete(key);\n          } else {\n            this.headers.set(key, existing);\n          }\n        }\n        break;\n    }\n  }\n\n  private addHeaderEntry(name: string, value: string) {\n    const key = name.toLowerCase();\n    this.maybeSetNormalizedName(name, key);\n    if (this.headers.has(key)) {\n      this.headers.get(key)!.push(value);\n    } else {\n      this.headers.set(key, [value]);\n    }\n  }\n\n  private setHeaderEntries(name: string, values: any) {\n    const headerValues = (Array.isArray(values) ? values : [values]).map((value) =>\n      value.toString(),\n    );\n    const key = name.toLowerCase();\n    this.headers.set(key, headerValues);\n    this.maybeSetNormalizedName(name, key);\n  }\n\n  /**\n   * @internal\n   */\n  forEach(fn: (name: string, values: string[]) => void) {\n    this.init();\n    Array.from(this.normalizedNames.keys()).forEach((key) =>\n      fn(this.normalizedNames.get(key)!, this.headers.get(key)!),\n    );\n  }\n}\n\n/**\n * Verifies that the headers object has the right shape: the values\n * must be either strings, numbers or arrays. Throws an error if an invalid\n * header value is present.\n */\nfunction assertValidHeaders(\n  headers: Record<string, unknown> | Headers,\n): asserts headers is Record<string, string | string[] | number | number[]> {\n  for (const [key, value] of Object.entries(headers)) {\n    if (!(typeof value === 'string' || typeof value === 'number') && !Array.isArray(value)) {\n      throw new Error(\n        `Unexpected value of the \\`${key}\\` header provided. ` +\n          `Expecting either a string, a number or an array, but got: \\`${value}\\`.`,\n      );\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ɵRuntimeError as RuntimeError} from '@angular/core';\n\nimport {RuntimeErrorCode} from './errors';\n\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * @publicApi\n **/\nexport interface HttpParameterCodec {\n  encodeKey(key: string): string;\n  encodeValue(value: string): string;\n\n  decodeKey(key: string): string;\n  decodeValue(value: string): string;\n}\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nexport class HttpUrlEncodingCodec implements HttpParameterCodec {\n  /**\n   * Encodes a key name for a URL parameter or query-string.\n   * @param key The key name.\n   * @returns The encoded key name.\n   */\n  encodeKey(key: string): string {\n    return standardEncoding(key);\n  }\n\n  /**\n   * Encodes the value of a URL parameter or query-string.\n   * @param value The value.\n   * @returns The encoded value.\n   */\n  encodeValue(value: string): string {\n    return standardEncoding(value);\n  }\n\n  /**\n   * Decodes an encoded URL parameter or query-string key.\n   * @param key The encoded key name.\n   * @returns The decoded key name.\n   */\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  /**\n   * Decodes an encoded URL parameter or query-string value.\n   * @param value The encoded value.\n   * @returns The decoded value.\n   */\n  decodeValue(value: string) {\n    return decodeURIComponent(value);\n  }\n}\n\nfunction paramParser(rawParams: string, codec: HttpParameterCodec): Map<string, string[]> {\n  const map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n    // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n    // may start with the `?` char, so we strip it if it's present.\n    const params: string[] = rawParams.replace(/^\\?/, '').split('&');\n    params.forEach((param: string) => {\n      const eqIdx = param.indexOf('=');\n      const [key, val]: string[] =\n        eqIdx == -1\n          ? [codec.decodeKey(param), '']\n          : [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS: {[x: string]: string} = {\n  '40': '@',\n  '3A': ':',\n  '24': '$',\n  '2C': ',',\n  '3B': ';',\n  '3D': '=',\n  '3F': '?',\n  '2F': '/',\n};\n\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v).replace(\n    STANDARD_ENCODING_REGEX,\n    (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s,\n  );\n}\n\nfunction valueToString(value: string | number | boolean): string {\n  return `${value}`;\n}\n\ninterface Update {\n  param: string;\n  value?: string | number | boolean;\n  op: 'a' | 'd' | 's';\n}\n\n/**\n * Options used to construct an `HttpParams` instance.\n *\n * @publicApi\n */\nexport interface HttpParamsOptions {\n  /**\n   * String representation of the HTTP parameters in URL-query-string format.\n   * Mutually exclusive with `fromObject`.\n   */\n  fromString?: string;\n\n  /** Object map of the HTTP parameters. Mutually exclusive with `fromString`. */\n  fromObject?: {\n    [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n  };\n\n  /** Encoding codec used to parse and serialize the parameters. */\n  encoder?: HttpParameterCodec;\n}\n\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nexport class HttpParams {\n  private map: Map<string, string[]> | null;\n  private encoder: HttpParameterCodec;\n  private updates: Update[] | null = null;\n  private cloneFrom: HttpParams | null = null;\n\n  constructor(options: HttpParamsOptions = {} as HttpParamsOptions) {\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n    if (options.fromString) {\n      if (options.fromObject) {\n        throw new RuntimeError(\n          RuntimeErrorCode.CANNOT_SPECIFY_BOTH_FROM_STRING_AND_FROM_OBJECT,\n          ngDevMode && 'Cannot specify both fromString and fromObject.',\n        );\n      }\n      this.map = paramParser(options.fromString, this.encoder);\n    } else if (!!options.fromObject) {\n      this.map = new Map<string, string[]>();\n      Object.keys(options.fromObject).forEach((key) => {\n        const value = (options.fromObject as any)[key];\n        // convert the values to strings\n        const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\n        this.map!.set(key, values);\n      });\n    } else {\n      this.map = null;\n    }\n  }\n\n  /**\n   * Reports whether the body includes one or more values for a given parameter.\n   * @param param The parameter name.\n   * @returns True if the parameter has one or more values,\n   * false if it has no value or is not present.\n   */\n  has(param: string): boolean {\n    this.init();\n    return this.map!.has(param);\n  }\n\n  /**\n   * Retrieves the first value for a parameter.\n   * @param param The parameter name.\n   * @returns The first value of the given parameter,\n   * or `null` if the parameter is not present.\n   */\n  get(param: string): string | null {\n    this.init();\n    const res = this.map!.get(param);\n    return !!res ? res[0] : null;\n  }\n\n  /**\n   * Retrieves all values for a  parameter.\n   * @param param The parameter name.\n   * @returns All values in a string array,\n   * or `null` if the parameter not present.\n   */\n  getAll(param: string): string[] | null {\n    this.init();\n    return this.map!.get(param) || null;\n  }\n\n  /**\n   * Retrieves all the parameters for this body.\n   * @returns The parameter names in a string array.\n   */\n  keys(): string[] {\n    this.init();\n    return Array.from(this.map!.keys());\n  }\n\n  /**\n   * Appends a new value to existing values for a parameter.\n   * @param param The parameter name.\n   * @param value The new value to add.\n   * @return A new body with the appended value.\n   */\n  append(param: string, value: string | number | boolean): HttpParams {\n    return this.clone({param, value, op: 'a'});\n  }\n\n  /**\n   * Constructs a new body with appended values for the given parameter name.\n   * @param params parameters and values\n   * @return A new body with the new value.\n   */\n  appendAll(params: {\n    [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n  }): HttpParams {\n    const updates: Update[] = [];\n    Object.keys(params).forEach((param) => {\n      const value = params[param];\n      if (Array.isArray(value)) {\n        value.forEach((_value) => {\n          updates.push({param, value: _value, op: 'a'});\n        });\n      } else {\n        updates.push({param, value: value as string | number | boolean, op: 'a'});\n      }\n    });\n    return this.clone(updates);\n  }\n\n  /**\n   * Replaces the value for a parameter.\n   * @param param The parameter name.\n   * @param value The new value.\n   * @return A new body with the new value.\n   */\n  set(param: string, value: string | number | boolean): HttpParams {\n    return this.clone({param, value, op: 's'});\n  }\n\n  /**\n   * Removes a given value or all values from a parameter.\n   * @param param The parameter name.\n   * @param value The value to remove, if provided.\n   * @return A new body with the given value removed, or with all values\n   * removed if no value is specified.\n   */\n  delete(param: string, value?: string | number | boolean): HttpParams {\n    return this.clone({param, value, op: 'd'});\n  }\n\n  /**\n   * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n   * separated by `&`s.\n   */\n  toString(): string {\n    this.init();\n    return (\n      this.keys()\n        .map((key) => {\n          const eKey = this.encoder.encodeKey(key);\n          // `a: ['1']` produces `'a=1'`\n          // `b: []` produces `''`\n          // `c: ['1', '2']` produces `'c=1&c=2'`\n          return this.map!.get(key)!\n            .map((value) => eKey + '=' + this.encoder.encodeValue(value))\n            .join('&');\n        })\n        // filter out empty values because `b: []` produces `''`\n        // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n        .filter((param) => param !== '')\n        .join('&')\n    );\n  }\n\n  private clone(update: Update | Update[]): HttpParams {\n    const clone = new HttpParams({encoder: this.encoder} as HttpParamsOptions);\n    clone.cloneFrom = this.cloneFrom || this;\n    clone.updates = (this.updates || []).concat(update);\n    return clone;\n  }\n\n  private init() {\n    if (this.map === null) {\n      this.map = new Map<string, string[]>();\n    }\n    if (this.cloneFrom !== null) {\n      this.cloneFrom.init();\n      this.cloneFrom.keys().forEach((key) => this.map!.set(key, this.cloneFrom!.map!.get(key)!));\n      this.updates!.forEach((update) => {\n        switch (update.op) {\n          case 'a':\n          case 's':\n            const base = (update.op === 'a' ? this.map!.get(update.param) : undefined) || [];\n            base.push(valueToString(update.value!));\n            this.map!.set(update.param, base);\n            break;\n          case 'd':\n            if (update.value !== undefined) {\n              let base = this.map!.get(update.param) || [];\n              const idx = base.indexOf(valueToString(update.value));\n              if (idx !== -1) {\n                base.splice(idx, 1);\n              }\n              if (base.length > 0) {\n                this.map!.set(update.param, base);\n              } else {\n                this.map!.delete(update.param);\n              }\n            } else {\n              this.map!.delete(update.param);\n              break;\n            }\n        }\n      });\n      this.cloneFrom = this.updates = null;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nexport class HttpContextToken<T> {\n  constructor(public readonly defaultValue: () => T) {}\n}\n\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```ts\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nexport class HttpContext {\n  private readonly map = new Map<HttpContextToken<unknown>, unknown>();\n\n  /**\n   * Store a value in the context. If a value is already present it will be overwritten.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   * @param value The value to store.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n  set<T>(token: HttpContextToken<T>, value: T): HttpContext {\n    this.map.set(token, value);\n    return this;\n  }\n\n  /**\n   * Retrieve the value associated with the given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns The stored value or default if one is defined.\n   */\n  get<T>(token: HttpContextToken<T>): T {\n    if (!this.map.has(token)) {\n      this.map.set(token, token.defaultValue());\n    }\n    return this.map.get(token) as T;\n  }\n\n  /**\n   * Delete the value associated with the given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n  delete(token: HttpContextToken<unknown>): HttpContext {\n    this.map.delete(token);\n    return this;\n  }\n\n  /**\n   * Checks for existence of a given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns True if the token exists, false otherwise.\n   */\n  has(token: HttpContextToken<unknown>): boolean {\n    return this.map.has(token);\n  }\n\n  /**\n   * @returns a list of tokens currently stored in the context.\n   */\n  keys(): IterableIterator<HttpContextToken<unknown>> {\n    return this.map.keys();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {HttpContext} from './context';\nimport {HttpHeaders} from './headers';\nimport {HttpParams} from './params';\n\n/**\n * Construction interface for `HttpRequest`s.\n *\n * All values are optional and will override default values if provided.\n */\ninterface HttpRequestInit {\n  headers?: HttpHeaders;\n  context?: HttpContext;\n  reportProgress?: boolean;\n  params?: HttpParams;\n  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n  withCredentials?: boolean;\n  transferCache?: {includeHeaders?: string[]} | boolean;\n}\n\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method: string): boolean {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n    default:\n      return true;\n  }\n}\n\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value: any): value is ArrayBuffer {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value: any): value is Blob {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value: any): value is FormData {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value: any): value is URLSearchParams {\n  return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n\n/**\n * `Content-Type` is an HTTP header used to indicate the media type\n * (also known as MIME type) of the resource being sent to the client\n * or received from the server.\n */\nexport const CONTENT_TYPE_HEADER = 'Content-Type';\n\n/**\n * The `Accept` header is an HTTP request header that indicates the media types\n * (or content types) the client is willing to receive from the server.\n */\nexport const ACCEPT_HEADER = 'Accept';\n\n/**\n * `X-Request-URL` is a custom HTTP header used in older browser versions,\n * including Firefox (< 32), Chrome (< 37), Safari (< 8), and Internet Explorer,\n * to include the full URL of the request in cross-origin requests.\n */\nexport const X_REQUEST_URL_HEADER = 'X-Request-URL';\n\n/**\n * `text/plain` is a content type used to indicate that the content being\n * sent is plain text with no special formatting or structured data\n * like HTML, XML, or JSON.\n */\nexport const TEXT_CONTENT_TYPE = 'text/plain';\n\n/**\n * `application/json` is a content type used to indicate that the content\n * being sent is in the JSON format.\n */\nexport const JSON_CONTENT_TYPE = 'application/json';\n\n/**\n * `application/json, text/plain, *\\/*` is a content negotiation string often seen in the\n * Accept header of HTTP requests. It indicates the types of content the client is willing\n * to accept from the server, with a preference for `application/json` and `text/plain`,\n * but also accepting any other type (*\\/*).\n */\nexport const ACCEPT_HEADER_VALUE = `${JSON_CONTENT_TYPE}, ${TEXT_CONTENT_TYPE}, */*`;\n\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nexport class HttpRequest<T> {\n  /**\n   * The request body, or `null` if one isn't set.\n   *\n   * Bodies are not enforced to be immutable, as they can include a reference to any\n   * user-defined data type. However, interceptors should take care to preserve\n   * idempotence by treating them as such.\n   */\n  readonly body: T | null = null;\n\n  /**\n   * Outgoing headers for this request.\n   */\n  readonly headers!: HttpHeaders;\n\n  /**\n   * Shared and mutable context that can be used by interceptors\n   */\n  readonly context!: HttpContext;\n\n  /**\n   * Whether this request should be made in a way that exposes progress events.\n   *\n   * Progress events are expensive (change detection runs on each event) and so\n   * they should only be requested if the consumer intends to monitor them.\n   *\n   * Note: The `FetchBackend` doesn't support progress report on uploads.\n   */\n  readonly reportProgress: boolean = false;\n\n  /**\n   * Whether this request should be sent with outgoing credentials (cookies).\n   */\n  readonly withCredentials: boolean = false;\n\n  /**\n   * The expected response type of the server.\n   *\n   * This is used to parse the response appropriately before returning it to\n   * the requestee.\n   */\n  readonly responseType: 'arraybuffer' | 'blob' | 'json' | 'text' = 'json';\n\n  /**\n   * The outgoing HTTP request method.\n   */\n  readonly method: string;\n\n  /**\n   * Outgoing URL parameters.\n   *\n   * To pass a string representation of HTTP parameters in the URL-query-string format,\n   * the `HttpParamsOptions`' `fromString` may be used. For example:\n   *\n   * ```ts\n   * new HttpParams({fromString: 'angular=awesome'})\n   * ```\n   */\n  readonly params!: HttpParams;\n\n  /**\n   * The outgoing URL with all URL parameters set.\n   */\n  readonly urlWithParams: string;\n\n  /**\n   * The HttpTransferCache option for the request\n   */\n  readonly transferCache?: {includeHeaders?: string[]} | boolean;\n\n  constructor(\n    method: 'GET' | 'HEAD',\n    url: string,\n    init?: {\n      headers?: HttpHeaders;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      params?: HttpParams;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      /**\n       * This property accepts either a boolean to enable/disable transferring cache for eligible\n       * requests performed using `HttpClient`, or an object, which allows to configure cache\n       * parameters, such as which headers should be included (no headers are included by default).\n       *\n       * Setting this property will override the options passed to `provideClientHydration()` for this\n       * particular request\n       */\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  );\n  constructor(\n    method: 'DELETE' | 'JSONP' | 'OPTIONS',\n    url: string,\n    init?: {\n      headers?: HttpHeaders;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      params?: HttpParams;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n    },\n  );\n  constructor(\n    method: 'POST',\n    url: string,\n    body: T | null,\n    init?: {\n      headers?: HttpHeaders;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      params?: HttpParams;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      /**\n       * This property accepts either a boolean to enable/disable transferring cache for eligible\n       * requests performed using `HttpClient`, or an object, which allows to configure cache\n       * parameters, such as which headers should be included (no headers are included by default).\n       *\n       * Setting this property will override the options passed to `provideClientHydration()` for this\n       * particular request\n       */\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  );\n  constructor(\n    method: 'PUT' | 'PATCH',\n    url: string,\n    body: T | null,\n    init?: {\n      headers?: HttpHeaders;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      params?: HttpParams;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n    },\n  );\n  constructor(\n    method: string,\n    url: string,\n    body: T | null,\n    init?: {\n      headers?: HttpHeaders;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      params?: HttpParams;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      /**\n       * This property accepts either a boolean to enable/disable transferring cache for eligible\n       * requests performed using `HttpClient`, or an object, which allows to configure cache\n       * parameters, such as which headers should be included (no headers are included by default).\n       *\n       * Setting this property will override the options passed to `provideClientHydration()` for this\n       * particular request\n       */\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  );\n  constructor(\n    method: string,\n    readonly url: string,\n    third?:\n      | T\n      | {\n          headers?: HttpHeaders;\n          context?: HttpContext;\n          reportProgress?: boolean;\n          params?: HttpParams;\n          responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n          withCredentials?: boolean;\n          transferCache?: {includeHeaders?: string[]} | boolean;\n        }\n      | null,\n    fourth?: {\n      headers?: HttpHeaders;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      params?: HttpParams;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ) {\n    this.method = method.toUpperCase();\n    // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n    let options: HttpRequestInit | undefined;\n\n    // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = third !== undefined ? (third as T) : null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = third as HttpRequestInit;\n    }\n\n    // If options have been passed, interpret them.\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials;\n\n      // Override default response type of 'json' if one is provided.\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      }\n\n      // Override headers if they're provided.\n      if (!!options.headers) {\n        this.headers = options.headers;\n      }\n\n      if (!!options.context) {\n        this.context = options.context;\n      }\n\n      if (!!options.params) {\n        this.params = options.params;\n      }\n\n      // We do want to assign transferCache even if it's falsy (false is valid value)\n      this.transferCache = options.transferCache;\n    }\n\n    // If no headers have been passed in, construct a new HttpHeaders instance.\n    this.headers ??= new HttpHeaders();\n\n    // If no context have been passed in, construct a new HttpContext instance.\n    this.context ??= new HttpContext();\n\n    // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n    if (!this.params) {\n      this.params = new HttpParams();\n      this.urlWithParams = url;\n    } else {\n      // Encode the parameters to a string in preparation for inclusion in the URL.\n      const params = this.params.toString();\n      if (params.length === 0) {\n        // No parameters, the visible URL is just the URL given at creation time.\n        this.urlWithParams = url;\n      } else {\n        // Does the URL already have query parameters? Look for '?'.\n        const qIdx = url.indexOf('?');\n        // There are 3 cases to handle:\n        // 1) No existing parameters -> append '?' followed by params.\n        // 2) '?' exists and is followed by existing query string ->\n        //    append '&' followed by params.\n        // 3) '?' exists at the end of the url -> append params directly.\n        // This basically amounts to determining the character, if any, with\n        // which to join the URL and parameters.\n        const sep: string = qIdx === -1 ? '?' : qIdx < url.length - 1 ? '&' : '';\n        this.urlWithParams = url + sep + params;\n      }\n    }\n  }\n\n  /**\n   * Transform the free-form body into a serialized format suitable for\n   * transmission to the server.\n   */\n  serializeBody(): ArrayBuffer | Blob | FormData | URLSearchParams | string | null {\n    // If no body is present, no need to serialize it.\n    if (this.body === null) {\n      return null;\n    }\n    // Check whether the body is already in a serialized form. If so,\n    // it can just be returned directly.\n    if (\n      typeof this.body === 'string' ||\n      isArrayBuffer(this.body) ||\n      isBlob(this.body) ||\n      isFormData(this.body) ||\n      isUrlSearchParams(this.body)\n    ) {\n      return this.body;\n    }\n    // Check whether the body is an instance of HttpUrlEncodedParams.\n    if (this.body instanceof HttpParams) {\n      return this.body.toString();\n    }\n    // Check whether the body is an object or array, and serialize with JSON if so.\n    if (\n      typeof this.body === 'object' ||\n      typeof this.body === 'boolean' ||\n      Array.isArray(this.body)\n    ) {\n      return JSON.stringify(this.body);\n    }\n    // Fall back on toString() for everything else.\n    return (this.body as any).toString();\n  }\n\n  /**\n   * Examine the body and attempt to infer an appropriate MIME type\n   * for it.\n   *\n   * If no such type can be inferred, this method will return `null`.\n   */\n  detectContentTypeHeader(): string | null {\n    // An empty body has no content type.\n    if (this.body === null) {\n      return null;\n    }\n    // FormData bodies rely on the browser's content type assignment.\n    if (isFormData(this.body)) {\n      return null;\n    }\n    // Blobs usually have their own content type. If it doesn't, then\n    // no type can be inferred.\n    if (isBlob(this.body)) {\n      return this.body.type || null;\n    }\n    // Array buffers have unknown contents and thus no type can be inferred.\n    if (isArrayBuffer(this.body)) {\n      return null;\n    }\n    // Technically, strings could be a form of JSON data, but it's safe enough\n    // to assume they're plain strings.\n    if (typeof this.body === 'string') {\n      return TEXT_CONTENT_TYPE;\n    }\n    // `HttpUrlEncodedParams` has its own content-type.\n    if (this.body instanceof HttpParams) {\n      return 'application/x-www-form-urlencoded;charset=UTF-8';\n    }\n    // Arrays, objects, boolean and numbers will be encoded as JSON.\n    if (\n      typeof this.body === 'object' ||\n      typeof this.body === 'number' ||\n      typeof this.body === 'boolean'\n    ) {\n      return JSON_CONTENT_TYPE;\n    }\n    // No type could be inferred.\n    return null;\n  }\n\n  clone(): HttpRequest<T>;\n  clone(update: {\n    headers?: HttpHeaders;\n    context?: HttpContext;\n    reportProgress?: boolean;\n    params?: HttpParams;\n    responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n    withCredentials?: boolean;\n    transferCache?: {includeHeaders?: string[]} | boolean;\n    body?: T | null;\n    method?: string;\n    url?: string;\n    setHeaders?: {[name: string]: string | string[]};\n    setParams?: {[param: string]: string};\n  }): HttpRequest<T>;\n  clone<V>(update: {\n    headers?: HttpHeaders;\n    context?: HttpContext;\n    reportProgress?: boolean;\n    params?: HttpParams;\n    responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n    withCredentials?: boolean;\n    transferCache?: {includeHeaders?: string[]} | boolean;\n    body?: V | null;\n    method?: string;\n    url?: string;\n    setHeaders?: {[name: string]: string | string[]};\n    setParams?: {[param: string]: string};\n  }): HttpRequest<V>;\n  clone(\n    update: {\n      headers?: HttpHeaders;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      params?: HttpParams;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      body?: any | null;\n      method?: string;\n      url?: string;\n      setHeaders?: {[name: string]: string | string[]};\n      setParams?: {[param: string]: string};\n    } = {},\n  ): HttpRequest<any> {\n    // For method, url, and responseType, take the current value unless\n    // it is overridden in the update hash.\n    const method = update.method || this.method;\n    const url = update.url || this.url;\n    const responseType = update.responseType || this.responseType;\n\n    // Carefully handle the transferCache to differentiate between\n    // `false` and `undefined` in the update args.\n    const transferCache = update.transferCache ?? this.transferCache;\n\n    // The body is somewhat special - a `null` value in update.body means\n    // whatever current body is present is being overridden with an empty\n    // body, whereas an `undefined` value in update.body implies no\n    // override.\n    const body = update.body !== undefined ? update.body : this.body;\n\n    // Carefully handle the boolean options to differentiate between\n    // `false` and `undefined` in the update args.\n    const withCredentials = update.withCredentials ?? this.withCredentials;\n    const reportProgress = update.reportProgress ?? this.reportProgress;\n\n    // Headers and params may be appended to if `setHeaders` or\n    // `setParams` are used.\n    let headers = update.headers || this.headers;\n    let params = update.params || this.params;\n\n    // Pass on context if needed\n    const context = update.context ?? this.context;\n\n    // Check whether the caller has asked to add headers.\n    if (update.setHeaders !== undefined) {\n      // Set every requested header.\n      headers = Object.keys(update.setHeaders).reduce(\n        (headers, name) => headers.set(name, update.setHeaders![name]),\n        headers,\n      );\n    }\n\n    // Check whether the caller has asked to set params.\n    if (update.setParams) {\n      // Set every requested param.\n      params = Object.keys(update.setParams).reduce(\n        (params, param) => params.set(param, update.setParams![param]),\n        params,\n      );\n    }\n\n    // Finally, construct the new HttpRequest using the pieces from above.\n    return new HttpRequest(method, url, body, {\n      params,\n      headers,\n      context,\n      reportProgress,\n      responseType,\n      withCredentials,\n      transferCache,\n    });\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {HttpHeaders} from './headers';\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nexport enum HttpEventType {\n  /**\n   * The request was sent out over the wire.\n   */\n  Sent,\n\n  /**\n   * An upload progress event was received.\n   *\n   * Note: The `FetchBackend` doesn't support progress report on uploads.\n   */\n  UploadProgress,\n\n  /**\n   * The response status code and headers were received.\n   */\n  ResponseHeader,\n\n  /**\n   * A download progress event was received.\n   */\n  DownloadProgress,\n\n  /**\n   * The full response including the body was received.\n   */\n  Response,\n\n  /**\n   * A custom event from an interceptor or a backend.\n   */\n  User,\n}\n\n/**\n * Base interface for progress events.\n *\n * @publicApi\n */\nexport interface HttpProgressEvent {\n  /**\n   * Progress event type is either upload or download.\n   */\n  type: HttpEventType.DownloadProgress | HttpEventType.UploadProgress;\n\n  /**\n   * Number of bytes uploaded or downloaded.\n   */\n  loaded: number;\n\n  /**\n   * Total number of bytes to upload or download. Depending on the request or\n   * response, this may not be computable and thus may not be present.\n   */\n  total?: number;\n}\n\n/**\n * A download progress event.\n *\n * @publicApi\n */\nexport interface HttpDownloadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.DownloadProgress;\n\n  /**\n   * The partial response body as downloaded so far.\n   *\n   * Only present if the responseType was `text`.\n   */\n  partialText?: string;\n}\n\n/**\n * An upload progress event.\n *\n * Note: The `FetchBackend` doesn't support progress report on uploads.\n *\n * @publicApi\n */\nexport interface HttpUploadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.UploadProgress;\n}\n\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * @publicApi\n */\nexport interface HttpSentEvent {\n  type: HttpEventType.Sent;\n}\n\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * @publicApi\n */\nexport interface HttpUserEvent<T> {\n  type: HttpEventType.User;\n}\n\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n *\n */\nexport interface HttpJsonParseError {\n  error: Error;\n  text: string;\n}\n\n/**\n * Union type for all possible events on the response stream.\n *\n * Typed according to the expected type of the response.\n *\n * @publicApi\n */\nexport type HttpEvent<T> =\n  | HttpSentEvent\n  | HttpHeaderResponse\n  | HttpResponse<T>\n  | HttpProgressEvent\n  | HttpUserEvent<T>;\n\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nexport abstract class HttpResponseBase {\n  /**\n   * All response headers.\n   */\n  readonly headers: HttpHeaders;\n\n  /**\n   * Response status code.\n   */\n  readonly status: number;\n\n  /**\n   * Textual description of response status code, defaults to OK.\n   *\n   * Do not depend on this.\n   */\n  readonly statusText: string;\n\n  /**\n   * URL of the resource retrieved, or null if not available.\n   */\n  readonly url: string | null;\n\n  /**\n   * Whether the status code falls in the 2xx range.\n   */\n  readonly ok: boolean;\n\n  /**\n   * Type of the response, narrowed to either the full response or the header.\n   */\n  readonly type!: HttpEventType.Response | HttpEventType.ResponseHeader;\n\n  /**\n   * Super-constructor for all responses.\n   *\n   * The single parameter accepted is an initialization hash. Any properties\n   * of the response passed there will override the default values.\n   */\n  constructor(\n    init: {\n      headers?: HttpHeaders;\n      status?: number;\n      statusText?: string;\n      url?: string;\n    },\n    defaultStatus: number = 200,\n    defaultStatusText: string = 'OK',\n  ) {\n    // If the hash has values passed, use them to initialize the response.\n    // Otherwise use the default values.\n    this.headers = init.headers || new HttpHeaders();\n    this.status = init.status !== undefined ? init.status : defaultStatus;\n    this.statusText = init.statusText || defaultStatusText;\n    this.url = init.url || null;\n\n    // Cache the ok value to avoid defining a getter.\n    this.ok = this.status >= 200 && this.status < 300;\n  }\n}\n\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nexport class HttpHeaderResponse extends HttpResponseBase {\n  /**\n   * Create a new `HttpHeaderResponse` with the given parameters.\n   */\n  constructor(\n    init: {\n      headers?: HttpHeaders;\n      status?: number;\n      statusText?: string;\n      url?: string;\n    } = {},\n  ) {\n    super(init);\n  }\n\n  override readonly type: HttpEventType.ResponseHeader = HttpEventType.ResponseHeader;\n\n  /**\n   * Copy this `HttpHeaderResponse`, overriding its contents with the\n   * given parameter hash.\n   */\n  clone(\n    update: {headers?: HttpHeaders; status?: number; statusText?: string; url?: string} = {},\n  ): HttpHeaderResponse {\n    // Perform a straightforward initialization of the new HttpHeaderResponse,\n    // overriding the current parameters with new ones if given.\n    return new HttpHeaderResponse({\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nexport class HttpResponse<T> extends HttpResponseBase {\n  /**\n   * The response body, or `null` if one was not returned.\n   */\n  readonly body: T | null;\n\n  /**\n   * Construct a new `HttpResponse`.\n   */\n  constructor(\n    init: {\n      body?: T | null;\n      headers?: HttpHeaders;\n      status?: number;\n      statusText?: string;\n      url?: string;\n    } = {},\n  ) {\n    super(init);\n    this.body = init.body !== undefined ? init.body : null;\n  }\n\n  override readonly type: HttpEventType.Response = HttpEventType.Response;\n\n  clone(): HttpResponse<T>;\n  clone(update: {\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  }): HttpResponse<T>;\n  clone<V>(update: {\n    body?: V | null;\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  }): HttpResponse<V>;\n  clone(\n    update: {\n      body?: any | null;\n      headers?: HttpHeaders;\n      status?: number;\n      statusText?: string;\n      url?: string;\n    } = {},\n  ): HttpResponse<any> {\n    return new HttpResponse<any>({\n      body: update.body !== undefined ? update.body : this.body,\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nexport class HttpErrorResponse extends HttpResponseBase implements Error {\n  readonly name = 'HttpErrorResponse';\n  readonly message: string;\n  readonly error: any | null;\n\n  /**\n   * Errors are never okay, even when the status code is in the 2xx success range.\n   */\n  override readonly ok = false;\n\n  constructor(init: {\n    error?: any;\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  }) {\n    // Initialize with a default status of 0 / Unknown Error.\n    super(init, 0, 'Unknown Error');\n\n    // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n    if (this.status >= 200 && this.status < 300) {\n      this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n    } else {\n      this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${\n        init.statusText\n      }`;\n    }\n    this.error = init.error || null;\n  }\n}\n\n/**\n * We use these constant to prevent pulling the whole HttpStatusCode enum\n * Those are the only ones referenced directly by the framework\n */\nexport const HTTP_STATUS_CODE_OK = 200;\nexport const HTTP_STATUS_CODE_NO_CONTENT = 204;\n\n/**\n * Http status codes.\n * As per https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n * @publicApi\n */\nexport enum HttpStatusCode {\n  Continue = 100,\n  SwitchingProtocols = 101,\n  Processing = 102,\n  EarlyHints = 103,\n\n  Ok = HTTP_STATUS_CODE_OK,\n  Created = 201,\n  Accepted = 202,\n  NonAuthoritativeInformation = 203,\n  NoContent = HTTP_STATUS_CODE_NO_CONTENT,\n  ResetContent = 205,\n  PartialContent = 206,\n  MultiStatus = 207,\n  AlreadyReported = 208,\n  ImUsed = 226,\n\n  MultipleChoices = 300,\n  MovedPermanently = 301,\n  Found = 302,\n  SeeOther = 303,\n  NotModified = 304,\n  UseProxy = 305,\n  Unused = 306,\n  TemporaryRedirect = 307,\n  PermanentRedirect = 308,\n\n  BadRequest = 400,\n  Unauthorized = 401,\n  PaymentRequired = 402,\n  Forbidden = 403,\n  NotFound = 404,\n  MethodNotAllowed = 405,\n  NotAcceptable = 406,\n  ProxyAuthenticationRequired = 407,\n  RequestTimeout = 408,\n  Conflict = 409,\n  Gone = 410,\n  LengthRequired = 411,\n  PreconditionFailed = 412,\n  PayloadTooLarge = 413,\n  UriTooLong = 414,\n  UnsupportedMediaType = 415,\n  RangeNotSatisfiable = 416,\n  ExpectationFailed = 417,\n  ImATeapot = 418,\n  MisdirectedRequest = 421,\n  UnprocessableEntity = 422,\n  Locked = 423,\n  FailedDependency = 424,\n  TooEarly = 425,\n  UpgradeRequired = 426,\n  PreconditionRequired = 428,\n  TooManyRequests = 429,\n  RequestHeaderFieldsTooLarge = 431,\n  UnavailableForLegalReasons = 451,\n\n  InternalServerError = 500,\n  NotImplemented = 501,\n  BadGateway = 502,\n  ServiceUnavailable = 503,\n  GatewayTimeout = 504,\n  HttpVersionNotSupported = 505,\n  VariantAlsoNegotiates = 506,\n  InsufficientStorage = 507,\n  LoopDetected = 508,\n  NotExtended = 510,\n  NetworkAuthenticationRequired = 511,\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable, ɵRuntimeError as RuntimeError} from '@angular/core';\nimport {Observable, of} from 'rxjs';\nimport {concatMap, filter, map} from 'rxjs/operators';\n\nimport {HttpHandler} from './backend';\nimport {HttpContext} from './context';\nimport {HttpHeaders} from './headers';\nimport {HttpParams, HttpParamsOptions} from './params';\nimport {HttpRequest} from './request';\nimport {HttpEvent, HttpResponse} from './response';\nimport {RuntimeErrorCode} from './errors';\n\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody<T>(\n  options: {\n    headers?: HttpHeaders | Record<string, string | string[]>;\n    context?: HttpContext;\n    observe?: 'body' | 'events' | 'response';\n    params?:\n      | HttpParams\n      | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n    reportProgress?: boolean;\n    responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n    withCredentials?: boolean;\n    transferCache?: {includeHeaders?: string[]} | boolean;\n  },\n  body: T | null,\n): any {\n  return {\n    body,\n    headers: options.headers,\n    context: options.context,\n    observe: options.observe,\n    params: options.params,\n    reportProgress: options.reportProgress,\n    responseType: options.responseType,\n    withCredentials: options.withCredentials,\n    transferCache: options.transferCache,\n  };\n}\n\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n * @usageNotes\n *\n * ### HTTP Request Example\n *\n * ```ts\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```ts\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```ts\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```ts\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\n@Injectable()\nexport class HttpClient {\n  constructor(private handler: HttpHandler) {}\n\n  /**\n   * Sends an `HttpRequest` and returns a stream of `HttpEvent`s.\n   *\n   * @return An `Observable` of the response, with the response body as a stream of `HttpEvent`s.\n   */\n  request<R>(req: HttpRequest<any>): Observable<HttpEvent<R>>;\n\n  /**\n   * Constructs a request that interprets the body as an `ArrayBuffer` and returns the response in\n   * an `ArrayBuffer`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a request that interprets the body as a blob and returns\n   * the response as a blob.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Blob`.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<Blob>;\n\n  /**\n   * Constructs a request that interprets the body as a text string and\n   * returns a string value.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<string>;\n\n  /**\n   * Constructs a request that interprets the body as an `ArrayBuffer` and returns the\n   * the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an array of `HttpEvent`s for\n   * the request.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      observe: 'events';\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a request that interprets the body as a `Blob` and returns\n   * the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `Blob`.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a request which interprets the body as a text string and returns the full event\n   * stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type string.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the  request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `Object`.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      observe: 'events';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<any>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `R`.\n   */\n  request<R>(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      observe: 'events';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<R>>;\n\n  /**\n   * Constructs a request which interprets the body as an `ArrayBuffer`\n   * and returns the full `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body as an `ArrayBuffer`.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a request which interprets the body as a `Blob` and returns the full `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Blob`.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a request which interprets the body as a text stream and returns the full\n   * `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the HTTP response, with the response body of type string.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`,\n   * with the response body of type `Object`.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      observe: 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns\n   * the full `HttpResponse` with the response body in the requested type.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the full `HttpResponse`, with the response body of type `R`.\n   */\n  request<R>(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      observe: 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<R>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * `HttpResponse` as a JavaScript object.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Object`.\n   */\n  request(\n    method: string,\n    url: string,\n    options?: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      responseType?: 'json';\n      reportProgress?: boolean;\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<Object>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object\n   * with the response body of the requested type.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `R`.\n   */\n  request<R>(\n    method: string,\n    url: string,\n    options?: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      responseType?: 'json';\n      reportProgress?: boolean;\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<R>;\n\n  /**\n   * Constructs a request where response type and requested observable are not known statically.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the requested response, with body of type `any`.\n   */\n  request(\n    method: string,\n    url: string,\n    options?: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      observe?: 'body' | 'events' | 'response';\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<any>;\n\n  /**\n   * Constructs an observable for a generic HTTP request that, when subscribed,\n   * fires the request through the chain of registered interceptors and on to the\n   * server.\n   *\n   * You can pass an `HttpRequest` directly as the only parameter. In this case,\n   * the call returns an observable of the raw `HttpEvent` stream.\n   *\n   * Alternatively you can pass an HTTP method as the first parameter,\n   * a URL string as the second, and an options hash containing the request body as the third.\n   * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n   * type of returned observable.\n   *   * The `responseType` value determines how a successful response body is parsed.\n   *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n   * object as a type parameter to the call.\n   *\n   * The `observe` value determines the return type, according to what you are interested in\n   * observing.\n   *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n   * progress events by default.\n   *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n   * where the `T` parameter depends on the `responseType` and any optionally provided type\n   * parameter.\n   *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n   *\n   */\n  request(\n    first: string | HttpRequest<any>,\n    url?: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body' | 'events' | 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    } = {},\n  ): Observable<any> {\n    let req: HttpRequest<any>;\n    // First, check whether the primary argument is an instance of `HttpRequest`.\n    if (first instanceof HttpRequest) {\n      // It is. The other arguments must be undefined (per the signatures) and can be\n      // ignored.\n      req = first;\n    } else {\n      // It's a string, so it represents a URL. Construct a request based on it,\n      // and incorporate the remaining arguments (assuming `GET` unless a method is\n      // provided.\n\n      // Figure out the headers.\n      let headers: HttpHeaders | undefined = undefined;\n      if (options.headers instanceof HttpHeaders) {\n        headers = options.headers;\n      } else {\n        headers = new HttpHeaders(options.headers);\n      }\n\n      // Sort out parameters.\n      let params: HttpParams | undefined = undefined;\n      if (!!options.params) {\n        if (options.params instanceof HttpParams) {\n          params = options.params;\n        } else {\n          params = new HttpParams({fromObject: options.params} as HttpParamsOptions);\n        }\n      }\n\n      // Construct the request.\n      req = new HttpRequest(first, url!, options.body !== undefined ? options.body : null, {\n        headers,\n        context: options.context,\n        params,\n        reportProgress: options.reportProgress,\n        // By default, JSON is assumed to be returned for all calls.\n        responseType: options.responseType || 'json',\n        withCredentials: options.withCredentials,\n        transferCache: options.transferCache,\n      });\n    }\n\n    // Start with an Observable.of() the initial request, and run the handler (which\n    // includes all interceptors) inside a concatMap(). This way, the handler runs\n    // inside an Observable chain, which causes interceptors to be re-run on every\n    // subscription (this also makes retries re-run the handler, including interceptors).\n    const events$: Observable<HttpEvent<any>> = of(req).pipe(\n      concatMap((req: HttpRequest<any>) => this.handler.handle(req)),\n    );\n\n    // If coming via the API signature which accepts a previously constructed HttpRequest,\n    // the only option is to get the event stream. Otherwise, return the event stream if\n    // that is what was requested.\n    if (first instanceof HttpRequest || options.observe === 'events') {\n      return events$;\n    }\n\n    // The requested stream contains either the full response or the body. In either\n    // case, the first step is to filter the event stream to extract a stream of\n    // responses(s).\n    const res$: Observable<HttpResponse<any>> = <Observable<HttpResponse<any>>>(\n      events$.pipe(filter((event: HttpEvent<any>) => event instanceof HttpResponse))\n    );\n\n    // Decide which stream to return.\n    switch (options.observe || 'body') {\n      case 'body':\n        // The requested stream is the body. Map the response stream to the response\n        // body. This could be done more simply, but a misbehaving interceptor might\n        // transform the response body into a different format and ignore the requested\n        // responseType. Guard against this by validating that the response is of the\n        // requested type.\n        switch (req.responseType) {\n          case 'arraybuffer':\n            return res$.pipe(\n              map((res: HttpResponse<any>) => {\n                // Validate that the body is an ArrayBuffer.\n                if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                  throw new RuntimeError(\n                    RuntimeErrorCode.RESPONSE_IS_NOT_AN_ARRAY_BUFFER,\n                    ngDevMode && 'Response is not an ArrayBuffer.',\n                  );\n                }\n                return res.body;\n              }),\n            );\n          case 'blob':\n            return res$.pipe(\n              map((res: HttpResponse<any>) => {\n                // Validate that the body is a Blob.\n                if (res.body !== null && !(res.body instanceof Blob)) {\n                  throw new RuntimeError(\n                    RuntimeErrorCode.RESPONSE_IS_NOT_A_BLOB,\n                    ngDevMode && 'Response is not a Blob.',\n                  );\n                }\n                return res.body;\n              }),\n            );\n          case 'text':\n            return res$.pipe(\n              map((res: HttpResponse<any>) => {\n                // Validate that the body is a string.\n                if (res.body !== null && typeof res.body !== 'string') {\n                  throw new RuntimeError(\n                    RuntimeErrorCode.RESPONSE_IS_NOT_A_STRING,\n                    ngDevMode && 'Response is not a string.',\n                  );\n                }\n                return res.body;\n              }),\n            );\n          case 'json':\n          default:\n            // No validation needed for JSON responses, as they can be of any type.\n            return res$.pipe(map((res: HttpResponse<any>) => res.body));\n        }\n      case 'response':\n        // The response stream was requested directly, so return it.\n        return res$;\n      default:\n        // Guard against new future observe types being added.\n        throw new RuntimeError(\n          RuntimeErrorCode.UNHANDLED_OBSERVE_TYPE,\n          ngDevMode && `Unreachable: unhandled observe type ${options.observe}}`,\n        );\n    }\n  }\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer`\n   *  and returns the response as an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the response body as an `ArrayBuffer`.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response body as a `Blob`.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<Blob>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text string and returns\n   * a string.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<string>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with response body as an `ArrayBuffer`.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with the response body as a\n   * `Blob`.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response\n   * body of type string.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with response body of\n   * type `Object`.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `DELETE`request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with a response\n   * body in the requested type.\n   */\n  delete<T>(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | (string | number | boolean)[]>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer` and returns\n   *  the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`, with the response body as an `ArrayBuffer`.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Blob`.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text stream and\n   *  returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`, with the response body of type string.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `DELETE` request the interprets the body as a JavaScript object and returns\n   * the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Object`.\n   *\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of the requested type.\n   */\n  delete<T>(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Object`.\n   */\n  delete(\n    url: string,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<Object>;\n\n  /**\n   * Constructs a DELETE request that interprets the body as JSON and returns\n   * the response in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with response body in the requested type.\n   */\n  delete<T>(\n    url: string,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `DELETE` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body' | 'events' | 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      body?: any | null;\n    } = {},\n  ): Observable<any> {\n    return this.request<any>('DELETE', url, options as any);\n  }\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and returns the\n   * response in an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob`\n   * and returns the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<Blob>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text string\n   * and returns the response as a string value.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<string>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and returns\n   *  the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response\n   * body as an `ArrayBuffer`.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text string and returns\n   * the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Object`.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with a response body in the requested type.\n   */\n  get<T>(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob` and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text stream and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`,\n   * with the response body of type `Object`.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  get<T>(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   *\n   * @return An `Observable` of the response body as a JavaScript object.\n   */\n  get(\n    url: string,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<Object>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and returns\n   * the response body in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with a response body in the requested type.\n   */\n  get<T>(\n    url: string,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `GET` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body' | 'events' | 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    } = {},\n  ): Observable<any> {\n    return this.request<any>('GET', url, options as any);\n  }\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an `ArrayBuffer` and\n   * returns the response as an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the response, with the response body as a `Blob`.\n   */\n\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<Blob>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a text string and returns the response\n   * as a string value.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<string>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an  `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response body of type\n   * string.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON\n   * and returns the full HTTP event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body of\n   * type `Object`.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON and\n   * returns the full event stream.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   */\n  head<T>(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full HTTP response.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and returns\n   * the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a blob.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as text stream\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type `Object`.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body of the requested type.\n   */\n  head<T>(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<T>>;\n\n  /**\n\n   * Constructs a `HEAD` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  head(\n    url: string,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<Object>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON and returns\n   * the response in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body of the given type.\n   */\n  head<T>(\n    url: string,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `HEAD` request to execute on the server. The `HEAD` method returns\n   * meta information about the resource without transferring the\n   * resource itself. See the individual overloads for\n   * details on the return type.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body' | 'events' | 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    } = {},\n  ): Observable<any> {\n    return this.request<any>('HEAD', url, options as any);\n  }\n\n  /**\n   * Constructs a `JSONP` request for the given URL and name of the callback parameter.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   * @return An `Observable` of the response object, with response body as an object.\n   */\n  jsonp(url: string, callbackParam: string): Observable<Object>;\n\n  /**\n   * Constructs a `JSONP` request for the given URL and name of the callback parameter.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   * You must install a suitable interceptor, such as one provided by `HttpClientJsonpModule`.\n   * If no such interceptor is reached,\n   * then the `JSONP` request can be rejected by the configured backend.\n   *\n   * @return An `Observable` of the response object, with response body in the requested type.\n   */\n  jsonp<T>(url: string, callbackParam: string): Observable<T>;\n\n  /**\n   * Constructs an `Observable` that, when subscribed, causes a request with the special method\n   * `JSONP` to be dispatched via the interceptor pipeline.\n   * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n   * API endpoints that don't support newer,\n   * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n   * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n   * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n   * application making the request.\n   * The endpoint API must support JSONP callback for JSONP requests to work.\n   * The resource API returns the JSON response wrapped in a callback function.\n   * You can pass the callback function name as one of the query parameters.\n   * Note that JSONP requests can only be used with `GET` requests.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   */\n  jsonp<T>(url: string, callbackParam: string): Observable<T> {\n    return this.request<any>('JSONP', url, {\n      params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n      observe: 'body',\n      responseType: 'json',\n    });\n  }\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an\n   * `ArrayBuffer` and returns the response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n    },\n  ): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n    },\n  ): Observable<Blob>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a text string and\n   * returns a string value.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n    },\n  ): Observable<string>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with the response body of type string.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request with the response\n   * body of type `Object`.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  options<T>(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as text stream\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type `Object`.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  options<T>(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<T>>;\n\n  /**\n\n   * Constructs an `OPTIONS` request that interprets the body as JSON and returns the\n   * response body as an object parsed from JSON.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  options(\n    url: string,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<Object>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON and returns the\n   * response in a given type.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse`, with a response body of the given type.\n   */\n  options<T>(\n    url: string,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T>;\n\n  /**\n   * Constructs an `Observable` that, when subscribed, causes the configured\n   * `OPTIONS` request to execute on the server. This method allows the client\n   * to determine the supported HTTP methods and other capabilities of an endpoint,\n   * without implying a resource action. See the individual overloads for\n   * details on the return type.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body' | 'events' | 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n    } = {},\n  ): Observable<any> {\n    return this.request<any>('OPTIONS', url, options as any);\n  }\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer` and returns\n   * the response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n    },\n  ): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob` and returns the response\n   * as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n    },\n  ): Observable<Blob>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n    },\n  ): Observable<string>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer` and\n   *  returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob`\n   *  and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with the\n   * response body as `Blob`.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text string and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with a\n   * response body of type string.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body of type `Object`.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  patch<T>(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text stream and returns the\n   * full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body of type string.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the given type.\n   */\n  patch<T>(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<T>>;\n\n  /**\n\n   * Constructs a `PATCH` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<Object>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the response in a given type.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the given type.\n   */\n  patch<T>(\n    url: string,\n    body: any | null,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PATCH` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body' | 'events' | 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n    } = {},\n  ): Observable<any> {\n    return this.request<any>('PATCH', url, addBody(options, body));\n  }\n\n  /**\n   * Constructs a `POST` request that interprets the body as an `ArrayBuffer` and returns\n   * an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob` and returns the\n   * response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<Blob>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<string>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as an `ArrayBuffer` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob`\n   * and returns the response in an observable of the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response body as `Blob`.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text string and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with a response body of type string.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a POST request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with a response body of type `Object`.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a POST request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  post<T>(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a POST request that interprets the body as an `ArrayBuffer`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request, with the response body as an\n   * `ArrayBuffer`.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text stream and returns\n   * the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body of type string.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body of type\n   * `Object`.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON and returns the\n   * full `HttpResponse`.\n   *\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body in the\n   * requested type.\n   */\n  post<T>(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON\n   * and returns the response body as an object parsed from JSON.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<Object>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON\n   * and returns an observable of the response.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request, with a response body in the\n   * requested type.\n   */\n  post<T>(\n    url: string,\n    body: any | null,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `POST` request to execute on the server. The server responds with the location of\n   * the replaced resource. See the individual overloads for\n   * details on the return type.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body' | 'events' | 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    } = {},\n  ): Observable<any> {\n    return this.request<any>('POST', url, addBody(options, body));\n  }\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an `ArrayBuffer` and returns the\n   * response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n    },\n  ): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n    },\n  ): Observable<Blob>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n    },\n  ): Observable<string>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an `ArrayBuffer` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns the full event\n   * stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text string and returns the full event\n   * stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body\n   * of type string.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body of\n   * type `Object`.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON and returns the\n   * full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  put<T>(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an\n   * `ArrayBuffer` and returns an observable of the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with the response body as an\n   * `ArrayBuffer`.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns the\n   * full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text stream and returns the\n   * full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body of type\n   * string.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON and returns the full\n   * HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body\n   * of type 'Object`.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an instance of the requested type and\n   * returns the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  put<T>(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON\n   * and returns an observable of JavaScript object.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response as a JavaScript object.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<Object>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an instance of the requested type\n   * and returns an observable of the requested type.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the requested type.\n   */\n  put<T>(\n    url: string,\n    body: any | null,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n   * with a new set of values.\n   * See the individual overloads for details on the return type.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body' | 'events' | 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n    } = {},\n  ): Observable<any> {\n    return this.request<any>('PUT', url, addBody(options, body));\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DestroyRef, inject, Injectable, InjectionToken, NgZone} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {HttpBackend} from './backend';\nimport {HttpHeaders} from './headers';\nimport {\n  ACCEPT_HEADER,\n  ACCEPT_HEADER_VALUE,\n  CONTENT_TYPE_HEADER,\n  HttpRequest,\n  X_REQUEST_URL_HEADER,\n} from './request';\nimport {\n  HTTP_STATUS_CODE_OK,\n  HttpDownloadProgressEvent,\n  HttpErrorResponse,\n  HttpEvent,\n  HttpEventType,\n  HttpHeaderResponse,\n  HttpResponse,\n} from './response';\n\n// Needed for the global `Zone` ambient types to be available.\nimport type {} from 'zone.js';\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n\n/**\n * Determine an appropriate URL for the response, by checking either\n * response url or the X-Request-URL header.\n */\nfunction getResponseUrl(response: Response): string | null {\n  if (response.url) {\n    return response.url;\n  }\n  // stored as lowercase in the map\n  const xRequestUrl = X_REQUEST_URL_HEADER.toLocaleLowerCase();\n  return response.headers.get(xRequestUrl);\n}\n\n/**\n * An internal injection token to reference `FetchBackend` implementation\n * in a tree-shakable way.\n */\nexport const FETCH_BACKEND = new InjectionToken<FetchBackend>(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'FETCH_BACKEND' : '',\n);\n\n/**\n * Uses `fetch` to send requests to a backend server.\n *\n * This `FetchBackend` requires the support of the\n * [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) which is available on all\n * supported browsers and on Node.js v18 or later.\n *\n * @see {@link HttpHandler}\n *\n * @publicApi\n */\n@Injectable()\nexport class FetchBackend implements HttpBackend {\n  // We use an arrow function to always reference the current global implementation of `fetch`.\n  // This is helpful for cases when the global `fetch` implementation is modified by external code,\n  // see https://github.com/angular/angular/issues/57527.\n  private readonly fetchImpl =\n    inject(FetchFactory, {optional: true})?.fetch ?? ((...args) => globalThis.fetch(...args));\n  private readonly ngZone = inject(NgZone);\n  private readonly destroyRef = inject(DestroyRef);\n  private destroyed = false;\n\n  constructor() {\n    this.destroyRef.onDestroy(() => {\n      this.destroyed = true;\n    });\n  }\n\n  handle(request: HttpRequest<any>): Observable<HttpEvent<any>> {\n    return new Observable((observer) => {\n      const aborter = new AbortController();\n      this.doRequest(request, aborter.signal, observer).then(noop, (error) =>\n        observer.error(new HttpErrorResponse({error})),\n      );\n      return () => aborter.abort();\n    });\n  }\n\n  private async doRequest(\n    request: HttpRequest<any>,\n    signal: AbortSignal,\n    observer: Observer<HttpEvent<any>>,\n  ): Promise<void> {\n    const init = this.createRequestInit(request);\n    let response;\n\n    try {\n      // Run fetch outside of Angular zone.\n      // This is due to Node.js fetch implementation (Undici) which uses a number of setTimeouts to check if\n      // the response should eventually timeout which causes extra CD cycles every 500ms\n      const fetchPromise = this.ngZone.runOutsideAngular(() =>\n        this.fetchImpl(request.urlWithParams, {signal, ...init}),\n      );\n\n      // Make sure Zone.js doesn't trigger false-positive unhandled promise\n      // error in case the Promise is rejected synchronously. See function\n      // description for additional information.\n      silenceSuperfluousUnhandledPromiseRejection(fetchPromise);\n\n      // Send the `Sent` event before awaiting the response.\n      observer.next({type: HttpEventType.Sent});\n\n      response = await fetchPromise;\n    } catch (error: any) {\n      observer.error(\n        new HttpErrorResponse({\n          error,\n          status: error.status ?? 0,\n          statusText: error.statusText,\n          url: request.urlWithParams,\n          headers: error.headers,\n        }),\n      );\n      return;\n    }\n\n    const headers = new HttpHeaders(response.headers);\n    const statusText = response.statusText;\n    const url = getResponseUrl(response) ?? request.urlWithParams;\n\n    let status = response.status;\n    let body: string | ArrayBuffer | Blob | object | null = null;\n\n    if (request.reportProgress) {\n      observer.next(new HttpHeaderResponse({headers, status, statusText, url}));\n    }\n\n    if (response.body) {\n      // Read Progress\n      const contentLength = response.headers.get('content-length');\n      const chunks: Uint8Array[] = [];\n      const reader = response.body.getReader();\n      let receivedLength = 0;\n\n      let decoder: TextDecoder;\n      let partialText: string | undefined;\n\n      // We have to check whether the Zone is defined in the global scope because this may be called\n      // when the zone is nooped.\n      const reqZone = typeof Zone !== 'undefined' && Zone.current;\n\n      let canceled = false;\n\n      // Perform response processing outside of Angular zone to\n      // ensure no excessive change detection runs are executed\n      // Here calling the async ReadableStreamDefaultReader.read() is responsible for triggering CD\n      await this.ngZone.runOutsideAngular(async () => {\n        while (true) {\n          // Prevent reading chunks if the app is destroyed. Otherwise, we risk doing\n          // unnecessary work or triggering side effects after teardown.\n          // This may happen if the app was explicitly destroyed before\n          // the response returned entirely.\n          if (this.destroyed) {\n            // Streams left in a pending state (due to `break` without cancel) may\n            // continue consuming or holding onto data behind the scenes.\n            // Calling `reader.cancel()` allows the browser or the underlying\n            // system to release any network or memory resources associated with the stream.\n            await reader.cancel();\n            canceled = true;\n            break;\n          }\n\n          const {done, value} = await reader.read();\n\n          if (done) {\n            break;\n          }\n\n          chunks.push(value);\n          receivedLength += value.length;\n\n          if (request.reportProgress) {\n            partialText =\n              request.responseType === 'text'\n                ? (partialText ?? '') +\n                  (decoder ??= new TextDecoder()).decode(value, {stream: true})\n                : undefined;\n\n            const reportProgress = () =>\n              observer.next({\n                type: HttpEventType.DownloadProgress,\n                total: contentLength ? +contentLength : undefined,\n                loaded: receivedLength,\n                partialText,\n              } as HttpDownloadProgressEvent);\n            reqZone ? reqZone.run(reportProgress) : reportProgress();\n          }\n        }\n      });\n\n      // We need to manage the canceled state — because the Streams API does not\n      // expose a direct `.state` property on the reader.\n      // We need to `return` because `parseBody` may not be able to parse chunks\n      // that were only partially read (due to cancellation caused by app destruction).\n      if (canceled) {\n        observer.complete();\n        return;\n      }\n\n      // Combine all chunks.\n      const chunksAll = this.concatChunks(chunks, receivedLength);\n      try {\n        const contentType = response.headers.get(CONTENT_TYPE_HEADER) ?? '';\n        body = this.parseBody(request, chunksAll, contentType);\n      } catch (error) {\n        // Body loading or parsing failed\n        observer.error(\n          new HttpErrorResponse({\n            error,\n            headers: new HttpHeaders(response.headers),\n            status: response.status,\n            statusText: response.statusText,\n            url: getResponseUrl(response) ?? request.urlWithParams,\n          }),\n        );\n        return;\n      }\n    }\n\n    // Same behavior as the XhrBackend\n    if (status === 0) {\n      status = body ? HTTP_STATUS_CODE_OK : 0;\n    }\n\n    // ok determines whether the response will be transmitted on the event or\n    // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n    // but a successful status code can still result in an error if the user\n    // asked for JSON data and the body cannot be parsed as such.\n    const ok = status >= 200 && status < 300;\n\n    if (ok) {\n      observer.next(\n        new HttpResponse({\n          body,\n          headers,\n          status,\n          statusText,\n          url,\n        }),\n      );\n\n      // The full body has been received and delivered, no further events\n      // are possible. This request is complete.\n      observer.complete();\n    } else {\n      observer.error(\n        new HttpErrorResponse({\n          error: body,\n          headers,\n          status,\n          statusText,\n          url,\n        }),\n      );\n    }\n  }\n\n  private parseBody(\n    request: HttpRequest<any>,\n    binContent: Uint8Array,\n    contentType: string,\n  ): string | ArrayBuffer | Blob | object | null {\n    switch (request.responseType) {\n      case 'json':\n        // stripping the XSSI when present\n        const text = new TextDecoder().decode(binContent).replace(XSSI_PREFIX, '');\n        return text === '' ? null : (JSON.parse(text) as object);\n      case 'text':\n        return new TextDecoder().decode(binContent);\n      case 'blob':\n        return new Blob([binContent], {type: contentType});\n      case 'arraybuffer':\n        return binContent.buffer;\n    }\n  }\n\n  private createRequestInit(req: HttpRequest<any>): RequestInit {\n    // We could share some of this logic with the XhrBackend\n\n    const headers: Record<string, string> = {};\n    const credentials: RequestCredentials | undefined = req.withCredentials ? 'include' : undefined;\n\n    // Setting all the requested headers.\n    req.headers.forEach((name, values) => (headers[name] = values.join(',')));\n\n    // Add an Accept header if one isn't present already.\n    if (!req.headers.has(ACCEPT_HEADER)) {\n      headers[ACCEPT_HEADER] = ACCEPT_HEADER_VALUE;\n    }\n\n    // Auto-detect the Content-Type header if one isn't present already.\n    if (!req.headers.has(CONTENT_TYPE_HEADER)) {\n      const detectedType = req.detectContentTypeHeader();\n      // Sometimes Content-Type detection fails.\n      if (detectedType !== null) {\n        headers[CONTENT_TYPE_HEADER] = detectedType;\n      }\n    }\n\n    return {\n      body: req.serializeBody(),\n      method: req.method,\n      headers,\n      credentials,\n    };\n  }\n\n  private concatChunks(chunks: Uint8Array[], totalLength: number): Uint8Array {\n    const chunksAll = new Uint8Array(totalLength);\n    let position = 0;\n    for (const chunk of chunks) {\n      chunksAll.set(chunk, position);\n      position += chunk.length;\n    }\n\n    return chunksAll;\n  }\n}\n\n/**\n * Abstract class to provide a mocked implementation of `fetch()`\n */\nexport abstract class FetchFactory {\n  abstract fetch: typeof fetch;\n}\n\nfunction noop(): void {}\n\n/**\n * Zone.js treats a rejected promise that has not yet been awaited\n * as an unhandled error. This function adds a noop `.then` to make\n * sure that Zone.js doesn't throw an error if the Promise is rejected\n * synchronously.\n */\nfunction silenceSuperfluousUnhandledPromiseRejection(promise: Promise<unknown>) {\n  promise.then(noop, noop);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {isPlatformServer} from '../../index';\nimport {\n  EnvironmentInjector,\n  inject,\n  Injectable,\n  InjectionToken,\n  PLATFORM_ID,\n  runInInjectionContext,\n  ɵConsole as Console,\n  ɵformatRuntimeError as formatRuntimeError,\n  ɵPendingTasksInternal as PendingTasks,\n} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {finalize} from 'rxjs/operators';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {RuntimeErrorCode} from './errors';\nimport {FetchBackend} from './fetch';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\n/**\n * Intercepts and handles an `HttpRequest` or `HttpResponse`.\n *\n * Most interceptors transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n * An interceptor may transform the\n * response event stream as well, by applying additional RxJS operators on the stream\n * returned by `next.handle()`.\n *\n * More rarely, an interceptor may handle the request entirely,\n * and compose a new event stream instead of invoking `next.handle()`. This is an\n * acceptable behavior, but keep in mind that further interceptors will be skipped entirely.\n *\n * It is also rare but valid for an interceptor to return multiple responses on the\n * event stream for a single request.\n *\n * @publicApi\n *\n * @see [HTTP Guide](guide/http/interceptors)\n * @see {@link HttpInterceptorFn}\n *\n * @usageNotes\n *\n * To use the same instance of `HttpInterceptors` for the entire app, import the `HttpClientModule`\n * only in your `AppModule`, and add the interceptors to the root application injector.\n * If you import `HttpClientModule` multiple times across different modules (for example, in lazy\n * loading modules), each import creates a new copy of the `HttpClientModule`, which overwrites the\n * interceptors provided in the root module.\n */\nexport interface HttpInterceptor {\n  /**\n   * Identifies and handles a given HTTP request.\n   * @param req The outgoing request object to handle.\n   * @param next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @returns An observable of the event stream.\n   */\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n}\n\n/**\n * Represents the next interceptor in an interceptor chain, or the real backend if there are no\n * further interceptors.\n *\n * Most interceptors will delegate to this function, and either modify the outgoing request or the\n * response when it arrives. Within the scope of the current request, however, this function may be\n * called any number of times, for any number of downstream requests. Such downstream requests need\n * not be to the same URL or even the same origin as the current request. It is also valid to not\n * call the downstream handler at all, and process the current request entirely within the\n * interceptor.\n *\n * This function should only be called within the scope of the request that's currently being\n * intercepted. Once that request is complete, this downstream handler function should not be\n * called.\n *\n * @publicApi\n *\n * @see [HTTP Guide](guide/http/interceptors)\n */\nexport type HttpHandlerFn = (req: HttpRequest<unknown>) => Observable<HttpEvent<unknown>>;\n\n/**\n * An interceptor for HTTP requests made via `HttpClient`.\n *\n * `HttpInterceptorFn`s are middleware functions which `HttpClient` calls when a request is made.\n * These functions have the opportunity to modify the outgoing request or any response that comes\n * back, as well as block, redirect, or otherwise change the request or response semantics.\n *\n * An `HttpHandlerFn` representing the next interceptor (or the backend which will make a real HTTP\n * request) is provided. Most interceptors will delegate to this function, but that is not required\n * (see `HttpHandlerFn` for more details).\n *\n * `HttpInterceptorFn`s are executed in an [injection context](guide/di/dependency-injection-context).\n * They have access to `inject()` via the `EnvironmentInjector` from which they were configured.\n *\n * @see [HTTP Guide](guide/http/interceptors)\n * @see {@link withInterceptors}\n *\n * @usageNotes\n * Here is a noop interceptor that passes the request through without modifying it:\n * ```ts\n * export const noopInterceptor: HttpInterceptorFn = (req: HttpRequest<unknown>, next:\n * HttpHandlerFn) => {\n *   return next(modifiedReq);\n * };\n * ```\n *\n * If you want to alter a request, clone it first and modify the clone before passing it to the\n * `next()` handler function.\n *\n * Here is a basic interceptor that adds a bearer token to the headers\n * ```ts\n * export const authenticationInterceptor: HttpInterceptorFn = (req: HttpRequest<unknown>, next:\n * HttpHandlerFn) => {\n *    const userToken = 'MY_TOKEN'; const modifiedReq = req.clone({\n *      headers: req.headers.set('Authorization', `Bearer ${userToken}`),\n *    });\n *\n *    return next(modifiedReq);\n * };\n * ```\n */\nexport type HttpInterceptorFn = (\n  req: HttpRequest<unknown>,\n  next: HttpHandlerFn,\n) => Observable<HttpEvent<unknown>>;\n\n/**\n * Function which invokes an HTTP interceptor chain.\n *\n * Each interceptor in the interceptor chain is turned into a `ChainedInterceptorFn` which closes\n * over the rest of the chain (represented by another `ChainedInterceptorFn`). The last such\n * function in the chain will instead delegate to the `finalHandlerFn`, which is passed down when\n * the chain is invoked.\n *\n * This pattern allows for a chain of many interceptors to be composed and wrapped in a single\n * `HttpInterceptorFn`, which is a useful abstraction for including different kinds of interceptors\n * (e.g. legacy class-based interceptors) in the same chain.\n */\ntype ChainedInterceptorFn<RequestT> = (\n  req: HttpRequest<RequestT>,\n  finalHandlerFn: HttpHandlerFn,\n) => Observable<HttpEvent<RequestT>>;\n\nfunction interceptorChainEndFn(\n  req: HttpRequest<any>,\n  finalHandlerFn: HttpHandlerFn,\n): Observable<HttpEvent<any>> {\n  return finalHandlerFn(req);\n}\n\n/**\n * Constructs a `ChainedInterceptorFn` which adapts a legacy `HttpInterceptor` to the\n * `ChainedInterceptorFn` interface.\n */\nfunction adaptLegacyInterceptorToChain(\n  chainTailFn: ChainedInterceptorFn<any>,\n  interceptor: HttpInterceptor,\n): ChainedInterceptorFn<any> {\n  return (initialRequest, finalHandlerFn) =>\n    interceptor.intercept(initialRequest, {\n      handle: (downstreamRequest) => chainTailFn(downstreamRequest, finalHandlerFn),\n    });\n}\n\n/**\n * Constructs a `ChainedInterceptorFn` which wraps and invokes a functional interceptor in the given\n * injector.\n */\nfunction chainedInterceptorFn(\n  chainTailFn: ChainedInterceptorFn<unknown>,\n  interceptorFn: HttpInterceptorFn,\n  injector: EnvironmentInjector,\n): ChainedInterceptorFn<unknown> {\n  return (initialRequest, finalHandlerFn) =>\n    runInInjectionContext(injector, () =>\n      interceptorFn(initialRequest, (downstreamRequest) =>\n        chainTailFn(downstreamRequest, finalHandlerFn),\n      ),\n    );\n}\n\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nexport const HTTP_INTERCEPTORS = new InjectionToken<readonly HttpInterceptor[]>(\n  ngDevMode ? 'HTTP_INTERCEPTORS' : '',\n);\n\n/**\n * A multi-provided token of `HttpInterceptorFn`s.\n */\nexport const HTTP_INTERCEPTOR_FNS = new InjectionToken<readonly HttpInterceptorFn[]>(\n  ngDevMode ? 'HTTP_INTERCEPTOR_FNS' : '',\n);\n\n/**\n * A multi-provided token of `HttpInterceptorFn`s that are only set in root.\n */\nexport const HTTP_ROOT_INTERCEPTOR_FNS = new InjectionToken<readonly HttpInterceptorFn[]>(\n  ngDevMode ? 'HTTP_ROOT_INTERCEPTOR_FNS' : '',\n);\n\n// TODO(atscott): We need a larger discussion about stability and what should contribute to stability.\n// Should the whole interceptor chain contribute to stability or just the backend request #55075?\n// Should HttpClient contribute to stability automatically at all?\nexport const REQUESTS_CONTRIBUTE_TO_STABILITY = new InjectionToken<boolean>(\n  ngDevMode ? 'REQUESTS_CONTRIBUTE_TO_STABILITY' : '',\n  {providedIn: 'root', factory: () => true},\n);\n\n/**\n * Creates an `HttpInterceptorFn` which lazily initializes an interceptor chain from the legacy\n * class-based interceptors and runs the request through it.\n */\nexport function legacyInterceptorFnFactory(): HttpInterceptorFn {\n  let chain: ChainedInterceptorFn<any> | null = null;\n\n  return (req, handler) => {\n    if (chain === null) {\n      const interceptors = inject(HTTP_INTERCEPTORS, {optional: true}) ?? [];\n      // Note: interceptors are wrapped right-to-left so that final execution order is\n      // left-to-right. That is, if `interceptors` is the array `[a, b, c]`, we want to\n      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n      // out.\n      chain = interceptors.reduceRight(\n        adaptLegacyInterceptorToChain,\n        interceptorChainEndFn as ChainedInterceptorFn<any>,\n      );\n    }\n\n    const pendingTasks = inject(PendingTasks);\n    const contributeToStability = inject(REQUESTS_CONTRIBUTE_TO_STABILITY);\n    if (contributeToStability) {\n      const taskId = pendingTasks.add();\n      return chain(req, handler).pipe(finalize(() => pendingTasks.remove(taskId)));\n    } else {\n      return chain(req, handler);\n    }\n  };\n}\n\nlet fetchBackendWarningDisplayed = false;\n\n/** Internal function to reset the flag in tests */\nexport function resetFetchBackendWarningFlag() {\n  fetchBackendWarningDisplayed = false;\n}\n\n@Injectable()\nexport class HttpInterceptorHandler extends HttpHandler {\n  private chain: ChainedInterceptorFn<unknown> | null = null;\n  private readonly pendingTasks = inject(PendingTasks);\n  private readonly contributeToStability = inject(REQUESTS_CONTRIBUTE_TO_STABILITY);\n\n  constructor(\n    private backend: HttpBackend,\n    private injector: EnvironmentInjector,\n  ) {\n    super();\n\n    // We strongly recommend using fetch backend for HTTP calls when SSR is used\n    // for an application. The logic below checks if that's the case and produces\n    // a warning otherwise.\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !fetchBackendWarningDisplayed) {\n      const isServer = isPlatformServer(injector.get(PLATFORM_ID));\n\n      // This flag is necessary because provideHttpClientTesting() overrides the backend\n      // even if `withFetch()` is used within the test. When the testing HTTP backend is provided,\n      // no HTTP calls are actually performed during the test, so producing a warning would be\n      // misleading.\n      const isTestingBackend = (this.backend as any).isTestingBackend;\n\n      if (isServer && !(this.backend instanceof FetchBackend) && !isTestingBackend) {\n        fetchBackendWarningDisplayed = true;\n        injector\n          .get(Console)\n          .warn(\n            formatRuntimeError(\n              RuntimeErrorCode.NOT_USING_FETCH_BACKEND_IN_SSR,\n              'Angular detected that `HttpClient` is not configured ' +\n                \"to use `fetch` APIs. It's strongly recommended to \" +\n                'enable `fetch` for applications that use Server-Side Rendering ' +\n                'for better performance and compatibility. ' +\n                'To enable `fetch`, add the `withFetch()` to the `provideHttpClient()` ' +\n                'call at the root of the application.',\n            ),\n          );\n      }\n    }\n  }\n\n  override handle(initialRequest: HttpRequest<any>): Observable<HttpEvent<any>> {\n    if (this.chain === null) {\n      const dedupedInterceptorFns = Array.from(\n        new Set([\n          ...this.injector.get(HTTP_INTERCEPTOR_FNS),\n          ...this.injector.get(HTTP_ROOT_INTERCEPTOR_FNS, []),\n        ]),\n      );\n\n      // Note: interceptors are wrapped right-to-left so that final execution order is\n      // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to\n      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n      // out.\n      this.chain = dedupedInterceptorFns.reduceRight(\n        (nextSequencedFn, interceptorFn) =>\n          chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector),\n        interceptorChainEndFn as ChainedInterceptorFn<unknown>,\n      );\n    }\n\n    if (this.contributeToStability) {\n      const taskId = this.pendingTasks.add();\n      return this.chain(initialRequest, (downstreamRequest) =>\n        this.backend.handle(downstreamRequest),\n      ).pipe(finalize(() => this.pendingTasks.remove(taskId)));\n    } else {\n      return this.chain(initialRequest, (downstreamRequest) =>\n        this.backend.handle(downstreamRequest),\n      );\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT} from '../../index';\nimport {\n  EnvironmentInjector,\n  Inject,\n  inject,\n  Injectable,\n  runInInjectionContext,\n} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpHandlerFn} from './interceptor';\nimport {HttpRequest} from './request';\nimport {\n  HTTP_STATUS_CODE_OK,\n  HttpErrorResponse,\n  HttpEvent,\n  HttpEventType,\n  HttpResponse,\n} from './response';\n\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId: number = 0;\n\n/**\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\n * executed.\n */\nlet foreignDocument: Document | undefined;\n\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nexport const JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nexport const JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nexport const JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n\n// Error text given when a request is passed to the JsonpClientBackend that has\n// headers set\nexport const JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\n\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nexport abstract class JsonpCallbackContext {\n  [key: string]: (data: any) => void;\n}\n\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nexport function jsonpCallbackContext(): Object {\n  if (typeof window === 'object') {\n    return window;\n  }\n  return {};\n}\n\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see {@link HttpHandler}\n * @see {@link HttpXhrBackend}\n *\n * @publicApi\n */\n@Injectable()\nexport class JsonpClientBackend implements HttpBackend {\n  /**\n   * A resolved promise that can be used to schedule microtasks in the event handlers.\n   */\n  private readonly resolvedPromise = Promise.resolve();\n\n  constructor(\n    private callbackMap: JsonpCallbackContext,\n    @Inject(DOCUMENT) private document: any,\n  ) {}\n\n  /**\n   * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n   */\n  private nextCallback(): string {\n    return `ng_jsonp_callback_${nextRequestId++}`;\n  }\n\n  /**\n   * Processes a JSONP request and returns an event stream of the results.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   *\n   */\n  handle(req: HttpRequest<never>): Observable<HttpEvent<any>> {\n    // Firstly, check both the method and response type. If either doesn't match\n    // then the request was improperly routed here and cannot be handled.\n    if (req.method !== 'JSONP') {\n      throw new Error(JSONP_ERR_WRONG_METHOD);\n    } else if (req.responseType !== 'json') {\n      throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n    }\n\n    // Check the request headers. JSONP doesn't support headers and\n    // cannot set any that were supplied.\n    if (req.headers.keys().length > 0) {\n      throw new Error(JSONP_ERR_HEADERS_NOT_SUPPORTED);\n    }\n\n    // Everything else happens inside the Observable boundary.\n    return new Observable<HttpEvent<any>>((observer: Observer<HttpEvent<any>>) => {\n      // The first step to make a request is to generate the callback name, and replace the\n      // callback placeholder in the URL with the name. Care has to be taken here to ensure\n      // a trailing &, if matched, gets inserted back into the URL in the correct place.\n      const callback = this.nextCallback();\n      const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n\n      // Construct the <script> tag and point it at the URL.\n      const node = this.document.createElement('script');\n      node.src = url;\n\n      // A JSONP request requires waiting for multiple callbacks. These variables\n      // are closed over and track state across those callbacks.\n\n      // The response object, if one has been received, or null otherwise.\n      let body: any | null = null;\n\n      // Whether the response callback has been called.\n      let finished: boolean = false;\n\n      // Set the response callback in this.callbackMap (which will be the window\n      // object in the browser. The script being loaded via the <script> tag will\n      // eventually call this callback.\n      this.callbackMap[callback] = (data?: any) => {\n        // Data has been received from the JSONP script. Firstly, delete this callback.\n        delete this.callbackMap[callback];\n\n        // Set state to indicate data was received.\n        body = data;\n        finished = true;\n      };\n\n      // cleanup() is a utility closure that removes the <script> from the page and\n      // the response callback from the window. This logic is used in both the\n      // success, error, and cancellation paths, so it's extracted out for convenience.\n      const cleanup = () => {\n        node.removeEventListener('load', onLoad);\n        node.removeEventListener('error', onError);\n\n        // Remove the <script> tag if it's still on the page.\n        node.remove();\n\n        // Remove the response callback from the callbackMap (window object in the\n        // browser).\n        delete this.callbackMap[callback];\n      };\n\n      // onLoad() is the success callback which runs after the response callback\n      // if the JSONP script loads successfully. The event itself is unimportant.\n      // If something went wrong, onLoad() may run without the response callback\n      // having been invoked.\n      const onLoad = (event: Event) => {\n        // We wrap it in an extra Promise, to ensure the microtask\n        // is scheduled after the loaded endpoint has executed any potential microtask itself,\n        // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n        this.resolvedPromise.then(() => {\n          // Cleanup the page.\n          cleanup();\n\n          // Check whether the response callback has run.\n          if (!finished) {\n            // It hasn't, something went wrong with the request. Return an error via\n            // the Observable error path. All JSONP errors have status 0.\n            observer.error(\n              new HttpErrorResponse({\n                url,\n                status: 0,\n                statusText: 'JSONP Error',\n                error: new Error(JSONP_ERR_NO_CALLBACK),\n              }),\n            );\n            return;\n          }\n\n          // Success. body either contains the response body or null if none was\n          // returned.\n          observer.next(\n            new HttpResponse({\n              body,\n              status: HTTP_STATUS_CODE_OK,\n              statusText: 'OK',\n              url,\n            }),\n          );\n\n          // Complete the stream, the response is over.\n          observer.complete();\n        });\n      };\n\n      // onError() is the error callback, which runs if the script returned generates\n      // a Javascript error. It emits the error via the Observable error channel as\n      // a HttpErrorResponse.\n      const onError: any = (error: Error) => {\n        cleanup();\n\n        // Wrap the error in a HttpErrorResponse.\n        observer.error(\n          new HttpErrorResponse({\n            error,\n            status: 0,\n            statusText: 'JSONP Error',\n            url,\n          }),\n        );\n      };\n\n      // Subscribe to both the success (load) and error events on the <script> tag,\n      // and add it to the page.\n      node.addEventListener('load', onLoad);\n      node.addEventListener('error', onError);\n      this.document.body.appendChild(node);\n\n      // The request has now been successfully sent.\n      observer.next({type: HttpEventType.Sent});\n\n      // Cancellation handler.\n      return () => {\n        if (!finished) {\n          this.removeListeners(node);\n        }\n\n        // And finally, clean up the page.\n        cleanup();\n      };\n    });\n  }\n\n  private removeListeners(script: HTMLScriptElement): void {\n    // Issue #34818\n    // Changing <script>'s ownerDocument will prevent it from execution.\n    // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n    foreignDocument ??= (this.document.implementation as DOMImplementation).createHTMLDocument();\n\n    foreignDocument.adoptNode(script);\n  }\n}\n\n/**\n * Identifies requests with the method JSONP and shifts them to the `JsonpClientBackend`.\n */\nexport function jsonpInterceptorFn(\n  req: HttpRequest<unknown>,\n  next: HttpHandlerFn,\n): Observable<HttpEvent<unknown>> {\n  if (req.method === 'JSONP') {\n    return inject(JsonpClientBackend).handle(req as HttpRequest<never>);\n  }\n\n  // Fall through for normal HTTP requests.\n  return next(req);\n}\n\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see {@link HttpInterceptor}\n *\n * @publicApi\n */\n@Injectable()\nexport class JsonpInterceptor {\n  constructor(private injector: EnvironmentInjector) {}\n\n  /**\n   * Identifies and handles a given JSONP request.\n   * @param initialRequest The outgoing request object to handle.\n   * @param next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @returns An observable of the event stream.\n   */\n  intercept(initialRequest: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return runInInjectionContext(this.injector, () =>\n      jsonpInterceptorFn(initialRequest, (downstreamRequest) => next.handle(downstreamRequest)),\n    );\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {XhrFactory} from '../../index';\nimport {Injectable, ɵRuntimeError as RuntimeError} from '@angular/core';\nimport {from, Observable, Observer, of} from 'rxjs';\nimport {switchMap} from 'rxjs/operators';\n\nimport {HttpBackend} from './backend';\nimport {RuntimeErrorCode} from './errors';\nimport {HttpHeaders} from './headers';\nimport {\n  ACCEPT_HEADER,\n  ACCEPT_HEADER_VALUE,\n  CONTENT_TYPE_HEADER,\n  HttpRequest,\n  X_REQUEST_URL_HEADER,\n} from './request';\nimport {\n  HTTP_STATUS_CODE_NO_CONTENT,\n  HTTP_STATUS_CODE_OK,\n  HttpDownloadProgressEvent,\n  HttpErrorResponse,\n  HttpEvent,\n  HttpEventType,\n  HttpHeaderResponse,\n  HttpJsonParseError,\n  HttpResponse,\n  HttpUploadProgressEvent,\n} from './response';\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n\nconst X_REQUEST_URL_REGEXP = RegExp(`^${X_REQUEST_URL_HEADER}:`, 'm');\n\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr: any): string | null {\n  if ('responseURL' in xhr && xhr.responseURL) {\n    return xhr.responseURL;\n  }\n  if (X_REQUEST_URL_REGEXP.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader(X_REQUEST_URL_HEADER);\n  }\n  return null;\n}\n\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see {@link HttpHandler}\n * @see {@link JsonpClientBackend}\n *\n * @publicApi\n */\n@Injectable()\nexport class HttpXhrBackend implements HttpBackend {\n  constructor(private xhrFactory: XhrFactory) {}\n\n  /**\n   * Processes a request and returns a stream of response events.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   */\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    // Quick check to give a better error message when a user attempts to use\n    // HttpClient.jsonp() without installing the HttpClientJsonpModule\n    if (req.method === 'JSONP') {\n      throw new RuntimeError(\n        RuntimeErrorCode.MISSING_JSONP_MODULE,\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n          `Cannot make a JSONP request without JSONP support. To fix the problem, either add the \\`withJsonpSupport()\\` call (if \\`provideHttpClient()\\` is used) or import the \\`HttpClientJsonpModule\\` in the root NgModule.`,\n      );\n    }\n\n    // Check whether this factory has a special function to load an XHR implementation\n    // for various non-browser environments. We currently limit it to only `ServerXhr`\n    // class, which needs to load an XHR implementation.\n    const xhrFactory: XhrFactory & {ɵloadImpl?: () => Promise<void>} = this.xhrFactory;\n    const source: Observable<void | null> = xhrFactory.ɵloadImpl\n      ? from(xhrFactory.ɵloadImpl())\n      : of(null);\n\n    return source.pipe(\n      switchMap(() => {\n        // Everything happens on Observable subscription.\n        return new Observable((observer: Observer<HttpEvent<any>>) => {\n          // Start by setting up the XHR object with request method, URL, and withCredentials\n          // flag.\n          const xhr = xhrFactory.build();\n          xhr.open(req.method, req.urlWithParams);\n          if (req.withCredentials) {\n            xhr.withCredentials = true;\n          }\n\n          // Add all the requested headers.\n          req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n\n          // Add an Accept header if one isn't present already.\n          if (!req.headers.has(ACCEPT_HEADER)) {\n            xhr.setRequestHeader(ACCEPT_HEADER, ACCEPT_HEADER_VALUE);\n          }\n\n          // Auto-detect the Content-Type header if one isn't present already.\n          if (!req.headers.has(CONTENT_TYPE_HEADER)) {\n            const detectedType = req.detectContentTypeHeader();\n            // Sometimes Content-Type detection fails.\n            if (detectedType !== null) {\n              xhr.setRequestHeader(CONTENT_TYPE_HEADER, detectedType);\n            }\n          }\n\n          // Set the responseType if one was requested.\n          if (req.responseType) {\n            const responseType = req.responseType.toLowerCase();\n\n            // JSON responses need to be processed as text. This is because if the server\n            // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n            // xhr.response will be null, and xhr.responseText cannot be accessed to\n            // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n            // is parsed by first requesting text and then applying JSON.parse.\n            xhr.responseType = (responseType !== 'json' ? responseType : 'text') as any;\n          }\n\n          // Serialize the request body if one is present. If not, this will be set to null.\n          const reqBody = req.serializeBody();\n\n          // If progress events are enabled, response headers will be delivered\n          // in two events - the HttpHeaderResponse event and the full HttpResponse\n          // event. However, since response headers don't change in between these\n          // two events, it doesn't make sense to parse them twice. So headerResponse\n          // caches the data extracted from the response whenever it's first parsed,\n          // to ensure parsing isn't duplicated.\n          let headerResponse: HttpHeaderResponse | null = null;\n\n          // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n          // state, and memoizes it into headerResponse.\n          const partialFromXhr = (): HttpHeaderResponse => {\n            if (headerResponse !== null) {\n              return headerResponse;\n            }\n\n            const statusText = xhr.statusText || 'OK';\n\n            // Parse headers from XMLHttpRequest - this step is lazy.\n            const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n\n            // Read the response URL from the XMLHttpResponse instance and fall back on the\n            // request URL.\n            const url = getResponseUrl(xhr) || req.url;\n\n            // Construct the HttpHeaderResponse and memoize it.\n            headerResponse = new HttpHeaderResponse({headers, status: xhr.status, statusText, url});\n            return headerResponse;\n          };\n\n          // Next, a few closures are defined for the various events which XMLHttpRequest can\n          // emit. This allows them to be unregistered as event listeners later.\n\n          // First up is the load event, which represents a response being fully available.\n          const onLoad = () => {\n            // Read response state from the memoized partial data.\n            let {headers, status, statusText, url} = partialFromXhr();\n\n            // The body will be read out if present.\n            let body: any | null = null;\n\n            if (status !== HTTP_STATUS_CODE_NO_CONTENT) {\n              // Use XMLHttpRequest.response if set, responseText otherwise.\n              body = typeof xhr.response === 'undefined' ? xhr.responseText : xhr.response;\n            }\n\n            // Normalize another potential bug (this one comes from CORS).\n            if (status === 0) {\n              status = !!body ? HTTP_STATUS_CODE_OK : 0;\n            }\n\n            // ok determines whether the response will be transmitted on the event or\n            // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n            // but a successful status code can still result in an error if the user\n            // asked for JSON data and the body cannot be parsed as such.\n            let ok = status >= 200 && status < 300;\n\n            // Check whether the body needs to be parsed as JSON (in many cases the browser\n            // will have done that already).\n            if (req.responseType === 'json' && typeof body === 'string') {\n              // Save the original body, before attempting XSSI prefix stripping.\n              const originalBody = body;\n              body = body.replace(XSSI_PREFIX, '');\n              try {\n                // Attempt the parse. If it fails, a parse error should be delivered to the\n                // user.\n                body = body !== '' ? JSON.parse(body) : null;\n              } catch (error) {\n                // Since the JSON.parse failed, it's reasonable to assume this might not have\n                // been a JSON response. Restore the original body (including any XSSI prefix)\n                // to deliver a better error response.\n                body = originalBody;\n\n                // If this was an error request to begin with, leave it as a string, it\n                // probably just isn't JSON. Otherwise, deliver the parsing error to the user.\n                if (ok) {\n                  // Even though the response status was 2xx, this is still an error.\n                  ok = false;\n                  // The parse error contains the text of the body that failed to parse.\n                  body = {error, text: body} as HttpJsonParseError;\n                }\n              }\n            }\n\n            if (ok) {\n              // A successful response is delivered on the event stream.\n              observer.next(\n                new HttpResponse({\n                  body,\n                  headers,\n                  status,\n                  statusText,\n                  url: url || undefined,\n                }),\n              );\n              // The full body has been received and delivered, no further events\n              // are possible. This request is complete.\n              observer.complete();\n            } else {\n              // An unsuccessful request is delivered on the error channel.\n              observer.error(\n                new HttpErrorResponse({\n                  // The error in this case is the response body (error from the server).\n                  error: body,\n                  headers,\n                  status,\n                  statusText,\n                  url: url || undefined,\n                }),\n              );\n            }\n          };\n\n          // The onError callback is called when something goes wrong at the network level.\n          // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n          // transmitted on the error channel.\n          const onError = (error: ProgressEvent) => {\n            const {url} = partialFromXhr();\n            const res = new HttpErrorResponse({\n              error,\n              status: xhr.status || 0,\n              statusText: xhr.statusText || 'Unknown Error',\n              url: url || undefined,\n            });\n            observer.error(res);\n          };\n\n          // The sentHeaders flag tracks whether the HttpResponseHeaders event\n          // has been sent on the stream. This is necessary to track if progress\n          // is enabled since the event will be sent on only the first download\n          // progress event.\n          let sentHeaders = false;\n\n          // The download progress event handler, which is only registered if\n          // progress events are enabled.\n          const onDownProgress = (event: ProgressEvent) => {\n            // Send the HttpResponseHeaders event if it hasn't been sent already.\n            if (!sentHeaders) {\n              observer.next(partialFromXhr());\n              sentHeaders = true;\n            }\n\n            // Start building the download progress event to deliver on the response\n            // event stream.\n            let progressEvent: HttpDownloadProgressEvent = {\n              type: HttpEventType.DownloadProgress,\n              loaded: event.loaded,\n            };\n\n            // Set the total number of bytes in the event if it's available.\n            if (event.lengthComputable) {\n              progressEvent.total = event.total;\n            }\n\n            // If the request was for text content and a partial response is\n            // available on XMLHttpRequest, include it in the progress event\n            // to allow for streaming reads.\n            if (req.responseType === 'text' && !!xhr.responseText) {\n              progressEvent.partialText = xhr.responseText;\n            }\n\n            // Finally, fire the event.\n            observer.next(progressEvent);\n          };\n\n          // The upload progress event handler, which is only registered if\n          // progress events are enabled.\n          const onUpProgress = (event: ProgressEvent) => {\n            // Upload progress events are simpler. Begin building the progress\n            // event.\n            let progress: HttpUploadProgressEvent = {\n              type: HttpEventType.UploadProgress,\n              loaded: event.loaded,\n            };\n\n            // If the total number of bytes being uploaded is available, include\n            // it.\n            if (event.lengthComputable) {\n              progress.total = event.total;\n            }\n\n            // Send the event.\n            observer.next(progress);\n          };\n\n          // By default, register for load and error events.\n          xhr.addEventListener('load', onLoad);\n          xhr.addEventListener('error', onError);\n          xhr.addEventListener('timeout', onError);\n          xhr.addEventListener('abort', onError);\n\n          // Progress events are only enabled if requested.\n          if (req.reportProgress) {\n            // Download progress is always enabled if requested.\n            xhr.addEventListener('progress', onDownProgress);\n\n            // Upload progress depends on whether there is a body to upload.\n            if (reqBody !== null && xhr.upload) {\n              xhr.upload.addEventListener('progress', onUpProgress);\n            }\n          }\n\n          // Fire the request, and notify the event stream that it was fired.\n          xhr.send(reqBody!);\n          observer.next({type: HttpEventType.Sent});\n          // This is the return from the Observable function, which is the\n          // request cancellation handler.\n          return () => {\n            // On a cancellation, remove all registered event listeners.\n            xhr.removeEventListener('error', onError);\n            xhr.removeEventListener('abort', onError);\n            xhr.removeEventListener('load', onLoad);\n            xhr.removeEventListener('timeout', onError);\n\n            if (req.reportProgress) {\n              xhr.removeEventListener('progress', onDownProgress);\n              if (reqBody !== null && xhr.upload) {\n                xhr.upload.removeEventListener('progress', onUpProgress);\n              }\n            }\n\n            // Finally, abort the in-flight request.\n            if (xhr.readyState !== xhr.DONE) {\n              xhr.abort();\n            }\n          };\n        });\n      }),\n    );\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT, ɵparseCookieValue as parseCookieValue} from '../../index';\nimport {\n  EnvironmentInjector,\n  Inject,\n  inject,\n  Injectable,\n  InjectionToken,\n  runInInjectionContext,\n} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {HttpHandler} from './backend';\nimport {HttpHandlerFn, HttpInterceptor} from './interceptor';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\nexport const XSRF_ENABLED = new InjectionToken<boolean>(ngDevMode ? 'XSRF_ENABLED' : '');\n\nexport const XSRF_DEFAULT_COOKIE_NAME = 'XSRF-TOKEN';\nexport const XSRF_COOKIE_NAME = new InjectionToken<string>(ngDevMode ? 'XSRF_COOKIE_NAME' : '', {\n  providedIn: 'root',\n  factory: () => XSRF_DEFAULT_COOKIE_NAME,\n});\n\nexport const XSRF_DEFAULT_HEADER_NAME = 'X-XSRF-TOKEN';\nexport const XSRF_HEADER_NAME = new InjectionToken<string>(ngDevMode ? 'XSRF_HEADER_NAME' : '', {\n  providedIn: 'root',\n  factory: () => XSRF_DEFAULT_HEADER_NAME,\n});\n\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nexport abstract class HttpXsrfTokenExtractor {\n  /**\n   * Get the XSRF token to use with an outgoing request.\n   *\n   * Will be called for every request, so the token may change between requests.\n   */\n  abstract getToken(): string | null;\n}\n\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\n@Injectable()\nexport class HttpXsrfCookieExtractor implements HttpXsrfTokenExtractor {\n  private lastCookieString: string = '';\n  private lastToken: string | null = null;\n\n  /**\n   * @internal for testing\n   */\n  parseCount: number = 0;\n\n  constructor(\n    @Inject(DOCUMENT) private doc: any,\n    @Inject(XSRF_COOKIE_NAME) private cookieName: string,\n  ) {}\n\n  getToken(): string | null {\n    if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n      return null;\n    }\n    const cookieString = this.doc.cookie || '';\n    if (cookieString !== this.lastCookieString) {\n      this.parseCount++;\n      this.lastToken = parseCookieValue(cookieString, this.cookieName);\n      this.lastCookieString = cookieString;\n    }\n    return this.lastToken;\n  }\n}\n\nexport function xsrfInterceptorFn(\n  req: HttpRequest<unknown>,\n  next: HttpHandlerFn,\n): Observable<HttpEvent<unknown>> {\n  const lcUrl = req.url.toLowerCase();\n  // Skip both non-mutating requests and absolute URLs.\n  // Non-mutating requests don't require a token, and absolute URLs require special handling\n  // anyway as the cookie set\n  // on our origin is not the same as the token expected by another origin.\n  if (\n    !inject(XSRF_ENABLED) ||\n    req.method === 'GET' ||\n    req.method === 'HEAD' ||\n    lcUrl.startsWith('http://') ||\n    lcUrl.startsWith('https://')\n  ) {\n    return next(req);\n  }\n\n  const token = inject(HttpXsrfTokenExtractor).getToken();\n  const headerName = inject(XSRF_HEADER_NAME);\n\n  // Be careful not to overwrite an existing header of the same name.\n  if (token != null && !req.headers.has(headerName)) {\n    req = req.clone({headers: req.headers.set(headerName, token)});\n  }\n  return next(req);\n}\n\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\n@Injectable()\nexport class HttpXsrfInterceptor implements HttpInterceptor {\n  constructor(private injector: EnvironmentInjector) {}\n\n  intercept(initialRequest: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return runInInjectionContext(this.injector, () =>\n      xsrfInterceptorFn(initialRequest, (downstreamRequest) => next.handle(downstreamRequest)),\n    );\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  EnvironmentProviders,\n  inject,\n  InjectionToken,\n  makeEnvironmentProviders,\n  Provider,\n} from '@angular/core';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpClient} from './client';\nimport {FETCH_BACKEND, FetchBackend} from './fetch';\nimport {\n  HTTP_INTERCEPTOR_FNS,\n  HttpInterceptorFn,\n  HttpInterceptorHandler,\n  legacyInterceptorFnFactory,\n} from './interceptor';\nimport {\n  jsonpCallbackContext,\n  JsonpCallbackContext,\n  JsonpClientBackend,\n  jsonpInterceptorFn,\n} from './jsonp';\nimport {HttpXhrBackend} from './xhr';\nimport {\n  HttpXsrfCookieExtractor,\n  HttpXsrfTokenExtractor,\n  XSRF_COOKIE_NAME,\n  XSRF_ENABLED,\n  XSRF_HEADER_NAME,\n  xsrfInterceptorFn,\n} from './xsrf';\n\n/**\n * Identifies a particular kind of `HttpFeature`.\n *\n * @publicApi\n */\nexport enum HttpFeatureKind {\n  Interceptors,\n  LegacyInterceptors,\n  CustomXsrfConfiguration,\n  NoXsrfProtection,\n  JsonpSupport,\n  RequestsMadeViaParent,\n  Fetch,\n}\n\n/**\n * A feature for use when configuring `provideHttpClient`.\n *\n * @publicApi\n */\nexport interface HttpFeature<KindT extends HttpFeatureKind> {\n  ɵkind: KindT;\n  ɵproviders: Provider[];\n}\n\nfunction makeHttpFeature<KindT extends HttpFeatureKind>(\n  kind: KindT,\n  providers: Provider[],\n): HttpFeature<KindT> {\n  return {\n    ɵkind: kind,\n    ɵproviders: providers,\n  };\n}\n\n/**\n * Configures Angular's `HttpClient` service to be available for injection.\n *\n * By default, `HttpClient` will be configured for injection with its default options for XSRF\n * protection of outgoing requests. Additional configuration options can be provided by passing\n * feature functions to `provideHttpClient`. For example, HTTP interceptors can be added using the\n * `withInterceptors(...)` feature.\n *\n * <div class=\"docs-alert docs-alert-helpful\">\n *\n * It's strongly recommended to enable\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) for applications that use\n * Server-Side Rendering for better performance and compatibility. To enable `fetch`, add\n * `withFetch()` feature to the `provideHttpClient()` call at the root of the application:\n *\n * ```ts\n * provideHttpClient(withFetch());\n * ```\n *\n * </div>\n *\n * @see {@link withInterceptors}\n * @see {@link withInterceptorsFromDi}\n * @see {@link withXsrfConfiguration}\n * @see {@link withNoXsrfProtection}\n * @see {@link withJsonpSupport}\n * @see {@link withRequestsMadeViaParent}\n * @see {@link withFetch}\n */\nexport function provideHttpClient(\n  ...features: HttpFeature<HttpFeatureKind>[]\n): EnvironmentProviders {\n  if (ngDevMode) {\n    const featureKinds = new Set(features.map((f) => f.ɵkind));\n    if (\n      featureKinds.has(HttpFeatureKind.NoXsrfProtection) &&\n      featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)\n    ) {\n      throw new Error(\n        ngDevMode\n          ? `Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.`\n          : '',\n      );\n    }\n  }\n\n  const providers: Provider[] = [\n    HttpClient,\n    HttpXhrBackend,\n    HttpInterceptorHandler,\n    {provide: HttpHandler, useExisting: HttpInterceptorHandler},\n    {\n      provide: HttpBackend,\n      useFactory: () => {\n        return inject(FETCH_BACKEND, {optional: true}) ?? inject(HttpXhrBackend);\n      },\n    },\n    {\n      provide: HTTP_INTERCEPTOR_FNS,\n      useValue: xsrfInterceptorFn,\n      multi: true,\n    },\n    {provide: XSRF_ENABLED, useValue: true},\n    {provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor},\n  ];\n\n  for (const feature of features) {\n    providers.push(...feature.ɵproviders);\n  }\n\n  return makeEnvironmentProviders(providers);\n}\n\n/**\n * Adds one or more functional-style HTTP interceptors to the configuration of the `HttpClient`\n * instance.\n *\n * @see {@link HttpInterceptorFn}\n * @see {@link provideHttpClient}\n * @publicApi\n */\nexport function withInterceptors(\n  interceptorFns: HttpInterceptorFn[],\n): HttpFeature<HttpFeatureKind.Interceptors> {\n  return makeHttpFeature(\n    HttpFeatureKind.Interceptors,\n    interceptorFns.map((interceptorFn) => {\n      return {\n        provide: HTTP_INTERCEPTOR_FNS,\n        useValue: interceptorFn,\n        multi: true,\n      };\n    }),\n  );\n}\n\nconst LEGACY_INTERCEPTOR_FN = new InjectionToken<HttpInterceptorFn>(\n  ngDevMode ? 'LEGACY_INTERCEPTOR_FN' : '',\n);\n\n/**\n * Includes class-based interceptors configured using a multi-provider in the current injector into\n * the configured `HttpClient` instance.\n *\n * Prefer `withInterceptors` and functional interceptors instead, as support for DI-provided\n * interceptors may be phased out in a later release.\n *\n * @see {@link HttpInterceptor}\n * @see {@link HTTP_INTERCEPTORS}\n * @see {@link provideHttpClient}\n */\nexport function withInterceptorsFromDi(): HttpFeature<HttpFeatureKind.LegacyInterceptors> {\n  // Note: the legacy interceptor function is provided here via an intermediate token\n  // (`LEGACY_INTERCEPTOR_FN`), using a pattern which guarantees that if these providers are\n  // included multiple times, all of the multi-provider entries will have the same instance of the\n  // interceptor function. That way, the `HttpINterceptorHandler` will dedup them and legacy\n  // interceptors will not run multiple times.\n  return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [\n    {\n      provide: LEGACY_INTERCEPTOR_FN,\n      useFactory: legacyInterceptorFnFactory,\n    },\n    {\n      provide: HTTP_INTERCEPTOR_FNS,\n      useExisting: LEGACY_INTERCEPTOR_FN,\n      multi: true,\n    },\n  ]);\n}\n\n/**\n * Customizes the XSRF protection for the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withNoXsrfProtection` feature.\n *\n * @see {@link provideHttpClient}\n */\nexport function withXsrfConfiguration({\n  cookieName,\n  headerName,\n}: {\n  cookieName?: string;\n  headerName?: string;\n}): HttpFeature<HttpFeatureKind.CustomXsrfConfiguration> {\n  const providers: Provider[] = [];\n  if (cookieName !== undefined) {\n    providers.push({provide: XSRF_COOKIE_NAME, useValue: cookieName});\n  }\n  if (headerName !== undefined) {\n    providers.push({provide: XSRF_HEADER_NAME, useValue: headerName});\n  }\n\n  return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);\n}\n\n/**\n * Disables XSRF protection in the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withXsrfConfiguration` feature.\n *\n * @see {@link provideHttpClient}\n */\nexport function withNoXsrfProtection(): HttpFeature<HttpFeatureKind.NoXsrfProtection> {\n  return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [\n    {\n      provide: XSRF_ENABLED,\n      useValue: false,\n    },\n  ]);\n}\n\n/**\n * Add JSONP support to the configuration of the current `HttpClient` instance.\n *\n * @see {@link provideHttpClient}\n */\nexport function withJsonpSupport(): HttpFeature<HttpFeatureKind.JsonpSupport> {\n  return makeHttpFeature(HttpFeatureKind.JsonpSupport, [\n    JsonpClientBackend,\n    {provide: JsonpCallbackContext, useFactory: jsonpCallbackContext},\n    {provide: HTTP_INTERCEPTOR_FNS, useValue: jsonpInterceptorFn, multi: true},\n  ]);\n}\n\n/**\n * Configures the current `HttpClient` instance to make requests via the parent injector's\n * `HttpClient` instead of directly.\n *\n * By default, `provideHttpClient` configures `HttpClient` in its injector to be an independent\n * instance. For example, even if `HttpClient` is configured in the parent injector with\n * one or more interceptors, they will not intercept requests made via this instance.\n *\n * With this option enabled, once the request has passed through the current injector's\n * interceptors, it will be delegated to the parent injector's `HttpClient` chain instead of\n * dispatched directly, and interceptors in the parent configuration will be applied to the request.\n *\n * If there are several `HttpClient` instances in the injector hierarchy, it's possible for\n * `withRequestsMadeViaParent` to be used at multiple levels, which will cause the request to\n * \"bubble up\" until either reaching the root level or an `HttpClient` which was not configured with\n * this option.\n *\n * @see {@link provideHttpClient}\n * @publicApi\n */\nexport function withRequestsMadeViaParent(): HttpFeature<HttpFeatureKind.RequestsMadeViaParent> {\n  return makeHttpFeature(HttpFeatureKind.RequestsMadeViaParent, [\n    {\n      provide: HttpBackend,\n      useFactory: () => {\n        const handlerFromParent = inject(HttpHandler, {skipSelf: true, optional: true});\n        if (ngDevMode && handlerFromParent === null) {\n          throw new Error(\n            'withRequestsMadeViaParent() can only be used when the parent injector also configures HttpClient',\n          );\n        }\n        return handlerFromParent;\n      },\n    },\n  ]);\n}\n\n/**\n * Configures the current `HttpClient` instance to make requests using the fetch API.\n *\n * Note: The Fetch API doesn't support progress report on uploads.\n *\n * @publicApi\n */\nexport function withFetch(): HttpFeature<HttpFeatureKind.Fetch> {\n  return makeHttpFeature(HttpFeatureKind.Fetch, [\n    FetchBackend,\n    {provide: FETCH_BACKEND, useExisting: FetchBackend},\n    {provide: HttpBackend, useExisting: FetchBackend},\n  ]);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {HTTP_INTERCEPTORS} from './interceptor';\nimport {\n  provideHttpClient,\n  withInterceptorsFromDi,\n  withJsonpSupport,\n  withNoXsrfProtection,\n  withXsrfConfiguration,\n} from './provider';\nimport {\n  HttpXsrfCookieExtractor,\n  HttpXsrfInterceptor,\n  HttpXsrfTokenExtractor,\n  XSRF_DEFAULT_COOKIE_NAME,\n  XSRF_DEFAULT_HEADER_NAME,\n  XSRF_ENABLED,\n} from './xsrf';\n\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n * @deprecated Use withXsrfConfiguration({cookieName: 'XSRF-TOKEN', headerName: 'X-XSRF-TOKEN'}) as\n *     providers instead or `withNoXsrfProtection` if you want to disabled XSRF protection.\n */\n@NgModule({\n  providers: [\n    HttpXsrfInterceptor,\n    {provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true},\n    {provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor},\n    withXsrfConfiguration({\n      cookieName: XSRF_DEFAULT_COOKIE_NAME,\n      headerName: XSRF_DEFAULT_HEADER_NAME,\n    }).ɵproviders,\n    {provide: XSRF_ENABLED, useValue: true},\n  ],\n})\nexport class HttpClientXsrfModule {\n  /**\n   * Disable the default XSRF protection.\n   */\n  static disable(): ModuleWithProviders<HttpClientXsrfModule> {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [withNoXsrfProtection().ɵproviders],\n    };\n  }\n\n  /**\n   * Configure XSRF protection.\n   * @param options An object that can specify either or both\n   * cookie name or header name.\n   * - Cookie name default is `XSRF-TOKEN`.\n   * - Header name default is `X-XSRF-TOKEN`.\n   *\n   */\n  static withOptions(\n    options: {\n      cookieName?: string;\n      headerName?: string;\n    } = {},\n  ): ModuleWithProviders<HttpClientXsrfModule> {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: withXsrfConfiguration(options).ɵproviders,\n    };\n  }\n}\n\n/**\n * Configures the dependency injector for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in DI token `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n * @deprecated use `provideHttpClient(withInterceptorsFromDi())` as providers instead\n */\n@NgModule({\n  /**\n   * Configures the dependency injector where it is imported\n   * with supporting services for HTTP communications.\n   */\n  providers: [provideHttpClient(withInterceptorsFromDi())],\n})\nexport class HttpClientModule {}\n\n/**\n * Configures the dependency injector for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * @publicApi\n * @deprecated `withJsonpSupport()` as providers instead\n */\n@NgModule({\n  providers: [withJsonpSupport().ɵproviders],\n})\nexport class HttpClientJsonpModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Injector,\n  Signal,\n  ɵResourceImpl as ResourceImpl,\n  inject,\n  linkedSignal,\n  assertInInjectionContext,\n  signal,\n  ResourceStatus,\n  computed,\n  Resource,\n  WritableSignal,\n  ResourceStreamItem,\n  type ValueEqualityFn,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {HttpRequest} from './request';\nimport {HttpClient} from './client';\nimport {HttpErrorResponse, HttpEventType, HttpProgressEvent, HttpResponseBase} from './response';\nimport {HttpHeaders} from './headers';\nimport {HttpParams} from './params';\nimport {HttpResourceRef, HttpResourceOptions, HttpResourceRequest} from './resource_api';\n\n/**\n * Type for the `httpRequest` top-level function, which includes the call signatures for the JSON-\n * based `httpRequest` as well as sub-functions for `ArrayBuffer`, `Blob`, and `string` type\n * requests.\n *\n * @experimental\n */\nexport interface HttpResourceFn {\n  /**\n   * Create a `Resource` that fetches data with an HTTP GET request to the given URL.\n   *\n   * If a reactive function is passed for the URL, the resource will update when the URL changes via\n   * signals.\n   *\n   * Uses `HttpClient` to make requests and supports interceptors, testing, and the other features\n   * of the `HttpClient` API. Data is parsed as JSON by default - use a sub-function of\n   * `httpResource`, such as `httpResource.text()`, to parse the response differently.\n   *\n   * @experimental\n   */\n  <TResult = unknown>(\n    url: string | (() => string | undefined),\n    options: HttpResourceOptions<TResult, unknown> & {defaultValue: NoInfer<TResult>},\n  ): HttpResourceRef<TResult>;\n\n  /**\n   * Create a `Resource` that fetches data with an HTTP GET request to the given URL.\n   *\n   * If a reactive function is passed for the URL, the resource will update when the URL changes via\n   * signals.\n   *\n   * Uses `HttpClient` to make requests and supports interceptors, testing, and the other features\n   * of the `HttpClient` API. Data is parsed as JSON by default - use a sub-function of\n   * `httpResource`, such as `httpResource.text()`, to parse the response differently.\n   *\n   * @experimental\n   */\n  <TResult = unknown>(\n    url: string | (() => string | undefined),\n    options?: HttpResourceOptions<TResult, unknown>,\n  ): HttpResourceRef<TResult | undefined>;\n\n  /**\n   * Create a `Resource` that fetches data with the configured HTTP request.\n   *\n   * If a reactive function is passed for the request, the resource will update when the request\n   * changes via signals.\n   *\n   * Uses `HttpClient` to make requests and supports interceptors, testing, and the other features\n   * of the `HttpClient` API. Data is parsed as JSON by default - use a sub-function of\n   * `httpResource`, such as `httpResource.text()`, to parse the response differently.\n   *\n   * @experimental\n   */\n  <TResult = unknown>(\n    request: HttpResourceRequest | (() => HttpResourceRequest | undefined),\n    options: HttpResourceOptions<TResult, unknown> & {defaultValue: NoInfer<TResult>},\n  ): HttpResourceRef<TResult>;\n\n  /**\n   * Create a `Resource` that fetches data with the configured HTTP request.\n   *\n   * If a reactive function is passed for the request, the resource will update when the request\n   * changes via signals.\n   *\n   * Uses `HttpClient` to make requests and supports interceptors, testing, and the other features\n   * of the `HttpClient` API. Data is parsed as JSON by default - use a sub-function of\n   * `httpResource`, such as `httpResource.text()`, to parse the response differently.\n   *\n   * @experimental\n   */\n  <TResult = unknown>(\n    request: HttpResourceRequest | (() => HttpResourceRequest | undefined),\n    options?: HttpResourceOptions<TResult, unknown>,\n  ): HttpResourceRef<TResult | undefined>;\n\n  /**\n   * Create a `Resource` that fetches data with the configured HTTP request.\n   *\n   * If a reactive function is passed for the URL or request, the resource will update when the\n   * URL or request changes via signals.\n   *\n   * Uses `HttpClient` to make requests and supports interceptors, testing, and the other features\n   * of the `HttpClient` API. Data is parsed into an `ArrayBuffer`.\n   *\n   * @experimental\n   */\n  arrayBuffer: {\n    <TResult = ArrayBuffer>(\n      url: string | (() => string | undefined),\n      options: HttpResourceOptions<TResult, ArrayBuffer> & {defaultValue: NoInfer<TResult>},\n    ): HttpResourceRef<TResult>;\n\n    <TResult = ArrayBuffer>(\n      url: string | (() => string | undefined),\n      options?: HttpResourceOptions<TResult, ArrayBuffer>,\n    ): HttpResourceRef<TResult | undefined>;\n\n    <TResult = ArrayBuffer>(\n      request: HttpResourceRequest | (() => HttpResourceRequest | undefined),\n      options: HttpResourceOptions<TResult, ArrayBuffer> & {defaultValue: NoInfer<TResult>},\n    ): HttpResourceRef<TResult>;\n\n    <TResult = ArrayBuffer>(\n      request: HttpResourceRequest | (() => HttpResourceRequest | undefined),\n      options?: HttpResourceOptions<TResult, ArrayBuffer>,\n    ): HttpResourceRef<TResult | undefined>;\n  };\n\n  /**\n   * Create a `Resource` that fetches data with the configured HTTP request.\n   *\n   * If a reactive function is passed for the URL or request, the resource will update when the\n   * URL or request changes via signals.\n   *\n   * Uses `HttpClient` to make requests and supports interceptors, testing, and the other features\n   * of the `HttpClient` API. Data is parsed into a `Blob`.\n   *\n   * @experimental\n   */\n  blob: {\n    <TResult = Blob>(\n      url: string | (() => string | undefined),\n      options: HttpResourceOptions<TResult, Blob> & {defaultValue: NoInfer<TResult>},\n    ): HttpResourceRef<TResult>;\n\n    <TResult = Blob>(\n      url: string | (() => string | undefined),\n      options?: HttpResourceOptions<TResult, Blob>,\n    ): HttpResourceRef<TResult | undefined>;\n\n    <TResult = Blob>(\n      request: HttpResourceRequest | (() => HttpResourceRequest | undefined),\n      options: HttpResourceOptions<TResult, Blob> & {defaultValue: NoInfer<TResult>},\n    ): HttpResourceRef<TResult>;\n\n    <TResult = Blob>(\n      request: HttpResourceRequest | (() => HttpResourceRequest | undefined),\n      options?: HttpResourceOptions<TResult, Blob>,\n    ): HttpResourceRef<TResult | undefined>;\n  };\n\n  /**\n   * Create a `Resource` that fetches data with the configured HTTP request.\n   *\n   * If a reactive function is passed for the URL or request, the resource will update when the\n   * URL or request changes via signals.\n   *\n   * Uses `HttpClient` to make requests and supports interceptors, testing, and the other features\n   * of the `HttpClient` API. Data is parsed as a `string`.\n   *\n   * @experimental\n   */\n  text: {\n    <TResult = string>(\n      url: string | (() => string | undefined),\n      options: HttpResourceOptions<TResult, string> & {defaultValue: NoInfer<TResult>},\n    ): HttpResourceRef<TResult>;\n\n    <TResult = string>(\n      url: string | (() => string | undefined),\n      options?: HttpResourceOptions<TResult, string>,\n    ): HttpResourceRef<TResult | undefined>;\n\n    <TResult = string>(\n      request: HttpResourceRequest | (() => HttpResourceRequest | undefined),\n      options: HttpResourceOptions<TResult, string> & {defaultValue: NoInfer<TResult>},\n    ): HttpResourceRef<TResult>;\n\n    <TResult = string>(\n      request: HttpResourceRequest | (() => HttpResourceRequest | undefined),\n      options?: HttpResourceOptions<TResult, string>,\n    ): HttpResourceRef<TResult | undefined>;\n  };\n}\n\n/**\n * `httpResource` makes a reactive HTTP request and exposes the request status and response value as\n * a `WritableResource`. By default, it assumes that the backend will return JSON data. To make a\n * request that expects a different kind of data, you can use a sub-constructor of `httpResource`,\n * such as `httpResource.text`.\n *\n * @experimental\n * @initializerApiFunction\n */\nexport const httpResource: HttpResourceFn = (() => {\n  const jsonFn = makeHttpResourceFn<unknown>('json') as HttpResourceFn;\n  jsonFn.arrayBuffer = makeHttpResourceFn<ArrayBuffer>('arraybuffer');\n  jsonFn.blob = makeHttpResourceFn('blob');\n  jsonFn.text = makeHttpResourceFn('text');\n  return jsonFn;\n})();\n\ntype RawRequestType =\n  | string\n  | (() => string | undefined)\n  | HttpResourceRequest\n  | (() => HttpResourceRequest | undefined);\n\nfunction makeHttpResourceFn<TRaw>(responseType: 'arraybuffer' | 'blob' | 'json' | 'text') {\n  return function httpResourceRef<TResult = TRaw>(\n    request: RawRequestType,\n    options?: HttpResourceOptions<TResult, TRaw>,\n  ): HttpResourceRef<TResult> {\n    options?.injector || assertInInjectionContext(httpResource);\n    const injector = options?.injector ?? inject(Injector);\n    return new HttpResourceImpl(\n      injector,\n      () => normalizeRequest(request, responseType),\n      options?.defaultValue,\n      options?.parse as (value: unknown) => TResult,\n      options?.equal as ValueEqualityFn<unknown>,\n    ) as HttpResourceRef<TResult>;\n  };\n}\n\nfunction normalizeRequest(\n  request: RawRequestType,\n  responseType: 'arraybuffer' | 'blob' | 'json' | 'text',\n): HttpRequest<unknown> | undefined {\n  let unwrappedRequest = typeof request === 'function' ? request() : request;\n  if (unwrappedRequest === undefined) {\n    return undefined;\n  } else if (typeof unwrappedRequest === 'string') {\n    unwrappedRequest = {url: unwrappedRequest};\n  }\n\n  const headers =\n    unwrappedRequest.headers instanceof HttpHeaders\n      ? unwrappedRequest.headers\n      : new HttpHeaders(\n          unwrappedRequest.headers as\n            | Record<string, string | number | Array<string | number>>\n            | undefined,\n        );\n\n  const params =\n    unwrappedRequest.params instanceof HttpParams\n      ? unwrappedRequest.params\n      : new HttpParams({fromObject: unwrappedRequest.params});\n\n  return new HttpRequest(\n    unwrappedRequest.method ?? 'GET',\n    unwrappedRequest.url,\n    unwrappedRequest.body ?? null,\n    {\n      headers,\n      params,\n      reportProgress: unwrappedRequest.reportProgress,\n      withCredentials: unwrappedRequest.withCredentials,\n      responseType,\n      context: unwrappedRequest.context,\n      transferCache: unwrappedRequest.transferCache,\n    },\n  );\n}\nclass HttpResourceImpl<T>\n  extends ResourceImpl<T, HttpRequest<unknown> | undefined>\n  implements HttpResourceRef<T>\n{\n  private client!: HttpClient;\n  private _headers = linkedSignal({\n    source: this.extRequest,\n    computation: () => undefined as HttpHeaders | undefined,\n  });\n  private _progress = linkedSignal({\n    source: this.extRequest,\n    computation: () => undefined as HttpProgressEvent | undefined,\n  });\n  private _statusCode = linkedSignal({\n    source: this.extRequest,\n    computation: () => undefined as number | undefined,\n  });\n\n  readonly headers = computed(() =>\n    this.status() === ResourceStatus.Resolved || this.status() === ResourceStatus.Error\n      ? this._headers()\n      : undefined,\n  );\n  readonly progress = this._progress.asReadonly();\n  readonly statusCode = this._statusCode.asReadonly();\n\n  constructor(\n    injector: Injector,\n    request: () => HttpRequest<T> | undefined,\n    defaultValue: T,\n    parse?: (value: unknown) => T,\n    equal?: ValueEqualityFn<unknown>,\n  ) {\n    super(\n      request,\n      ({request, abortSignal}) => {\n        let sub: Subscription;\n\n        // Track the abort listener so it can be removed if the Observable completes (as a memory\n        // optimization).\n        const onAbort = () => sub.unsubscribe();\n        abortSignal.addEventListener('abort', onAbort);\n\n        // Start off stream as undefined.\n        const stream = signal<ResourceStreamItem<T>>({value: undefined as T});\n        let resolve: ((value: Signal<ResourceStreamItem<T>>) => void) | undefined;\n        const promise = new Promise<Signal<ResourceStreamItem<T>>>((r) => (resolve = r));\n\n        const send = (value: ResourceStreamItem<T>): void => {\n          stream.set(value);\n          resolve?.(stream);\n          resolve = undefined;\n        };\n\n        sub = this.client.request(request!).subscribe({\n          next: (event) => {\n            switch (event.type) {\n              case HttpEventType.Response:\n                this._headers.set(event.headers);\n                this._statusCode.set(event.status);\n                try {\n                  send({value: parse ? parse(event.body) : (event.body as T)});\n                } catch (error) {\n                  send({error});\n                }\n                break;\n              case HttpEventType.DownloadProgress:\n                this._progress.set(event);\n                break;\n            }\n          },\n          error: (error) => {\n            if (error instanceof HttpErrorResponse) {\n              this._headers.set(error.headers);\n              this._statusCode.set(error.status);\n            }\n\n            send({error});\n            abortSignal.removeEventListener('abort', onAbort);\n          },\n          complete: () => {\n            if (resolve) {\n              send({error: new Error('Resource completed before producing a value')});\n            }\n            abortSignal.removeEventListener('abort', onAbort);\n          },\n        });\n\n        return promise;\n      },\n      defaultValue,\n      equal,\n      injector,\n    );\n    this.client = injector.get(HttpClient);\n  }\n\n  // This is a type only override of the method\n  declare hasValue: () => this is HttpResourceRef<Exclude<T, undefined>>;\n}\n\n/**\n * A `Resource` of the `HttpResponse` meant for use in `HttpResource` if we decide to go this route.\n *\n * TODO(alxhub): delete this if we decide we don't want it.\n */\nclass HttpResponseResource implements Resource<HttpResponseBase | undefined> {\n  readonly status: Signal<ResourceStatus>;\n  readonly value: WritableSignal<HttpResponseBase | undefined>;\n  readonly error: Signal<unknown>;\n  readonly isLoading: Signal<boolean>;\n\n  constructor(\n    private parent: Resource<unknown>,\n    request: Signal<unknown>,\n  ) {\n    this.status = computed(() => {\n      // There are two kinds of errors which can occur in an HTTP request: HTTP errors or normal JS\n      // errors. Since we have a response for HTTP errors, we report `Resolved` status even if the\n      // overall request is considered to be in an Error state.\n      if (parent.status() === ResourceStatus.Error) {\n        return this.value() !== undefined ? ResourceStatus.Resolved : ResourceStatus.Error;\n      }\n      return parent.status();\n    });\n    this.error = computed(() => {\n      // Filter out HTTP errors.\n      return this.value() === undefined ? parent.error() : undefined;\n    });\n    this.value = linkedSignal({\n      source: request,\n      computation: () => undefined as HttpResponseBase | undefined,\n    });\n    this.isLoading = parent.isLoading;\n  }\n\n  hasValue(): this is Resource<HttpResponseBase> {\n    return this.value() !== undefined;\n  }\n\n  reload(): boolean {\n    // TODO: should you be able to reload this way?\n    return this.parent.reload();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  APP_BOOTSTRAP_LISTENER,\n  ApplicationRef,\n  inject,\n  InjectionToken,\n  makeStateKey,\n  Provider,\n  StateKey,\n  TransferState,\n  ɵformatRuntimeError as formatRuntimeError,\n  ɵperformanceMarkFeature as performanceMarkFeature,\n  ɵtruncateMiddle as truncateMiddle,\n  ɵRuntimeError as RuntimeError,\n} from '@angular/core';\nimport {Observable, of} from 'rxjs';\nimport {tap} from 'rxjs/operators';\n\nimport {RuntimeErrorCode} from './errors';\nimport {HttpHeaders} from './headers';\nimport {HTTP_ROOT_INTERCEPTOR_FNS, HttpHandlerFn} from './interceptor';\nimport {HttpRequest} from './request';\nimport {HttpEvent, HttpResponse} from './response';\nimport {HttpParams} from './params';\n\n/**\n * Options to configure how TransferCache should be used to cache requests made via HttpClient.\n *\n * @param includeHeaders Specifies which headers should be included into cached responses. No\n *     headers are included by default.\n * @param filter A function that receives a request as an argument and returns a boolean to indicate\n *     whether a request should be included into the cache.\n * @param includePostRequests Enables caching for POST requests. By default, only GET and HEAD\n *     requests are cached. This option can be enabled if POST requests are used to retrieve data\n *     (for example using GraphQL).\n * @param includeRequestsWithAuthHeaders Enables caching of requests containing either `Authorization`\n *     or `Proxy-Authorization` headers. By default, these requests are excluded from caching.\n *\n * @publicApi\n */\nexport type HttpTransferCacheOptions = {\n  includeHeaders?: string[];\n  filter?: (req: HttpRequest<unknown>) => boolean;\n  includePostRequests?: boolean;\n  includeRequestsWithAuthHeaders?: boolean;\n};\n\n/**\n * If your application uses different HTTP origins to make API calls (via `HttpClient`) on the server and\n * on the client, the `HTTP_TRANSFER_CACHE_ORIGIN_MAP` token allows you to establish a mapping\n * between those origins, so that `HttpTransferCache` feature can recognize those requests as the same\n * ones and reuse the data cached on the server during hydration on the client.\n *\n * **Important note**: the `HTTP_TRANSFER_CACHE_ORIGIN_MAP` token should *only* be provided in\n * the *server* code of your application (typically in the `app.server.config.ts` script). Angular throws an\n * error if it detects that the token is defined while running on the client.\n *\n * @usageNotes\n *\n * When the same API endpoint is accessed via `http://internal-domain.com:8080` on the server and\n * via `https://external-domain.com` on the client, you can use the following configuration:\n * ```ts\n * // in app.server.config.ts\n * {\n *     provide: HTTP_TRANSFER_CACHE_ORIGIN_MAP,\n *     useValue: {\n *         'http://internal-domain.com:8080': 'https://external-domain.com'\n *     }\n * }\n * ```\n *\n * @publicApi\n */\nexport const HTTP_TRANSFER_CACHE_ORIGIN_MAP = new InjectionToken<Record<string, string>>(\n  ngDevMode ? 'HTTP_TRANSFER_CACHE_ORIGIN_MAP' : '',\n);\n\n/**\n * Keys within cached response data structure.\n */\n\nexport const BODY = 'b';\nexport const HEADERS = 'h';\nexport const STATUS = 's';\nexport const STATUS_TEXT = 'st';\nexport const REQ_URL = 'u';\nexport const RESPONSE_TYPE = 'rt';\n\ninterface TransferHttpResponse {\n  /** body */\n  [BODY]: any;\n  /** headers */\n  [HEADERS]: Record<string, string[]>;\n  /** status */\n  [STATUS]?: number;\n  /** statusText */\n  [STATUS_TEXT]?: string;\n  /** url */\n  [REQ_URL]?: string;\n  /** responseType */\n  [RESPONSE_TYPE]?: HttpRequest<unknown>['responseType'];\n}\n\ninterface CacheOptions extends HttpTransferCacheOptions {\n  isCacheActive: boolean;\n}\n\nconst CACHE_OPTIONS = new InjectionToken<CacheOptions>(\n  ngDevMode ? 'HTTP_TRANSFER_STATE_CACHE_OPTIONS' : '',\n);\n\n/**\n * A list of allowed HTTP methods to cache.\n */\nconst ALLOWED_METHODS = ['GET', 'HEAD'];\n\nexport function transferCacheInterceptorFn(\n  req: HttpRequest<unknown>,\n  next: HttpHandlerFn,\n): Observable<HttpEvent<unknown>> {\n  const {isCacheActive, ...globalOptions} = inject(CACHE_OPTIONS);\n  const {transferCache: requestOptions, method: requestMethod} = req;\n\n  // In the following situations we do not want to cache the request\n  if (\n    !isCacheActive ||\n    requestOptions === false ||\n    // POST requests are allowed either globally or at request level\n    (requestMethod === 'POST' && !globalOptions.includePostRequests && !requestOptions) ||\n    (requestMethod !== 'POST' && !ALLOWED_METHODS.includes(requestMethod)) ||\n    // Do not cache request that require authorization when includeRequestsWithAuthHeaders is falsey\n    (!globalOptions.includeRequestsWithAuthHeaders && hasAuthHeaders(req)) ||\n    globalOptions.filter?.(req) === false\n  ) {\n    return next(req);\n  }\n\n  const transferState = inject(TransferState);\n\n  const originMap: Record<string, string> | null = inject(HTTP_TRANSFER_CACHE_ORIGIN_MAP, {\n    optional: true,\n  });\n\n  if (typeof ngServerMode !== 'undefined' && !ngServerMode && originMap) {\n    throw new RuntimeError(\n      RuntimeErrorCode.HTTP_ORIGIN_MAP_USED_IN_CLIENT,\n      ngDevMode &&\n        'Angular detected that the `HTTP_TRANSFER_CACHE_ORIGIN_MAP` token is configured and ' +\n          'present in the client side code. Please ensure that this token is only provided in the ' +\n          'server code of the application.',\n    );\n  }\n\n  const requestUrl =\n    typeof ngServerMode !== 'undefined' && ngServerMode && originMap\n      ? mapRequestOriginUrl(req.url, originMap)\n      : req.url;\n\n  const storeKey = makeCacheKey(req, requestUrl);\n  const response = transferState.get(storeKey, null);\n\n  let headersToInclude = globalOptions.includeHeaders;\n  if (typeof requestOptions === 'object' && requestOptions.includeHeaders) {\n    // Request-specific config takes precedence over the global config.\n    headersToInclude = requestOptions.includeHeaders;\n  }\n\n  if (response) {\n    const {\n      [BODY]: undecodedBody,\n      [RESPONSE_TYPE]: responseType,\n      [HEADERS]: httpHeaders,\n      [STATUS]: status,\n      [STATUS_TEXT]: statusText,\n      [REQ_URL]: url,\n    } = response;\n    // Request found in cache. Respond using it.\n    let body: ArrayBuffer | Blob | string | undefined = undecodedBody;\n\n    switch (responseType) {\n      case 'arraybuffer':\n        body = new TextEncoder().encode(undecodedBody).buffer;\n        break;\n      case 'blob':\n        body = new Blob([undecodedBody]);\n        break;\n    }\n\n    // We want to warn users accessing a header provided from the cache\n    // That HttpTransferCache alters the headers\n    // The warning will be logged a single time by HttpHeaders instance\n    let headers = new HttpHeaders(httpHeaders);\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      // Append extra logic in dev mode to produce a warning when a header\n      // that was not transferred to the client is accessed in the code via `get`\n      // and `has` calls.\n      headers = appendMissingHeadersDetection(req.url, headers, headersToInclude ?? []);\n    }\n\n    return of(\n      new HttpResponse({\n        body,\n        headers,\n        status,\n        statusText,\n        url,\n      }),\n    );\n  }\n\n  // Request not found in cache. Make the request and cache it if on the server.\n  return next(req).pipe(\n    tap((event: HttpEvent<unknown>) => {\n      if (event instanceof HttpResponse && typeof ngServerMode !== 'undefined' && ngServerMode) {\n        transferState.set<TransferHttpResponse>(storeKey, {\n          [BODY]: event.body,\n          [HEADERS]: getFilteredHeaders(event.headers, headersToInclude),\n          [STATUS]: event.status,\n          [STATUS_TEXT]: event.statusText,\n          [REQ_URL]: requestUrl,\n          [RESPONSE_TYPE]: req.responseType,\n        });\n      }\n    }),\n  );\n}\n\n/** @returns true when the requests contains autorization related headers. */\nfunction hasAuthHeaders(req: HttpRequest<unknown>): boolean {\n  return req.headers.has('authorization') || req.headers.has('proxy-authorization');\n}\n\nfunction getFilteredHeaders(\n  headers: HttpHeaders,\n  includeHeaders: string[] | undefined,\n): Record<string, string[]> {\n  if (!includeHeaders) {\n    return {};\n  }\n\n  const headersMap: Record<string, string[]> = {};\n  for (const key of includeHeaders) {\n    const values = headers.getAll(key);\n    if (values !== null) {\n      headersMap[key] = values;\n    }\n  }\n\n  return headersMap;\n}\n\nfunction sortAndConcatParams(params: HttpParams | URLSearchParams): string {\n  return [...params.keys()]\n    .sort()\n    .map((k) => `${k}=${params.getAll(k)}`)\n    .join('&');\n}\n\nfunction makeCacheKey(\n  request: HttpRequest<any>,\n  mappedRequestUrl: string,\n): StateKey<TransferHttpResponse> {\n  // make the params encoded same as a url so it's easy to identify\n  const {params, method, responseType} = request;\n  const encodedParams = sortAndConcatParams(params);\n\n  let serializedBody = request.serializeBody();\n  if (serializedBody instanceof URLSearchParams) {\n    serializedBody = sortAndConcatParams(serializedBody);\n  } else if (typeof serializedBody !== 'string') {\n    serializedBody = '';\n  }\n\n  const key = [method, responseType, mappedRequestUrl, serializedBody, encodedParams].join('|');\n  const hash = generateHash(key);\n\n  return makeStateKey(hash);\n}\n\n/**\n * A method that returns a hash representation of a string using a variant of DJB2 hash\n * algorithm.\n *\n * This is the same hashing logic that is used to generate component ids.\n */\nfunction generateHash(value: string): string {\n  let hash = 0;\n\n  for (const char of value) {\n    hash = (Math.imul(31, hash) + char.charCodeAt(0)) << 0;\n  }\n\n  // Force positive number hash.\n  // 2147483647 = equivalent of Integer.MAX_VALUE.\n  hash += 2147483647 + 1;\n\n  return hash.toString();\n}\n\n/**\n * Returns the DI providers needed to enable HTTP transfer cache.\n *\n * By default, when using server rendering, requests are performed twice: once on the server and\n * other one on the browser.\n *\n * When these providers are added, requests performed on the server are cached and reused during the\n * bootstrapping of the application in the browser thus avoiding duplicate requests and reducing\n * load time.\n *\n */\nexport function withHttpTransferCache(cacheOptions: HttpTransferCacheOptions): Provider[] {\n  return [\n    {\n      provide: CACHE_OPTIONS,\n      useFactory: (): CacheOptions => {\n        performanceMarkFeature('NgHttpTransferCache');\n        return {isCacheActive: true, ...cacheOptions};\n      },\n    },\n    {\n      provide: HTTP_ROOT_INTERCEPTOR_FNS,\n      useValue: transferCacheInterceptorFn,\n      multi: true,\n    },\n    {\n      provide: APP_BOOTSTRAP_LISTENER,\n      multi: true,\n      useFactory: () => {\n        const appRef = inject(ApplicationRef);\n        const cacheState = inject(CACHE_OPTIONS);\n\n        return () => {\n          appRef.whenStable().then(() => {\n            cacheState.isCacheActive = false;\n          });\n        };\n      },\n    },\n  ];\n}\n\n/**\n * This function will add a proxy to an HttpHeader to intercept calls to get/has\n * and log a warning if the header entry requested has been removed\n */\nfunction appendMissingHeadersDetection(\n  url: string,\n  headers: HttpHeaders,\n  headersToInclude: string[],\n): HttpHeaders {\n  const warningProduced = new Set();\n  return new Proxy<HttpHeaders>(headers, {\n    get(target: HttpHeaders, prop: keyof HttpHeaders): unknown {\n      const value = Reflect.get(target, prop);\n      const methods: Set<keyof HttpHeaders> = new Set(['get', 'has', 'getAll']);\n\n      if (typeof value !== 'function' || !methods.has(prop)) {\n        return value;\n      }\n\n      return (headerName: string) => {\n        // We log when the key has been removed and a warning hasn't been produced for the header\n        const key = (prop + ':' + headerName).toLowerCase(); // e.g. `get:cache-control`\n        if (!headersToInclude.includes(headerName) && !warningProduced.has(key)) {\n          warningProduced.add(key);\n          const truncatedUrl = truncateMiddle(url);\n\n          // TODO: create Error guide for this warning\n          console.warn(\n            formatRuntimeError(\n              RuntimeErrorCode.HEADERS_ALTERED_BY_TRANSFER_CACHE,\n              `Angular detected that the \\`${headerName}\\` header is accessed, but the value of the header ` +\n                `was not transferred from the server to the client by the HttpTransferCache. ` +\n                `To include the value of the \\`${headerName}\\` header for the \\`${truncatedUrl}\\` request, ` +\n                `use the \\`includeHeaders\\` list. The \\`includeHeaders\\` can be defined either ` +\n                `on a request level by adding the \\`transferCache\\` parameter, or on an application ` +\n                `level by adding the \\`httpCacheTransfer.includeHeaders\\` argument to the ` +\n                `\\`provideClientHydration()\\` call. `,\n            ),\n          );\n        }\n\n        // invoking the original method\n        return (value as Function).apply(target, [headerName]);\n      };\n    },\n  });\n}\n\nfunction mapRequestOriginUrl(url: string, originMap: Record<string, string>): string {\n  const origin = new URL(url, 'resolve://').origin;\n  const mappedOrigin = originMap[origin];\n  if (!mappedOrigin) {\n    return url;\n  }\n\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    verifyMappedOrigin(mappedOrigin);\n  }\n\n  return url.replace(origin, mappedOrigin);\n}\n\nfunction verifyMappedOrigin(url: string): void {\n  if (new URL(url, 'resolve://').pathname !== '/') {\n    throw new RuntimeError(\n      RuntimeErrorCode.HTTP_ORIGIN_MAP_CONTAINS_PATH,\n      'Angular detected a URL with a path segment in the value provided for the ' +\n        `\\`HTTP_TRANSFER_CACHE_ORIGIN_MAP\\` token: ${url}. The map should only contain origins ` +\n        'without any other segments.',\n    );\n  }\n}\n"],
  "mappings": "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",
  "names": ["HttpHandler", "HttpBackend", "HttpHeaders", "headers", "normalizedNames", "Map", "lazyInit", "lazyUpdate", "constructor", "split", "forEach", "line", "index", "indexOf", "name", "slice", "value", "trim", "addHeaderEntry", "Headers", "ngDevMode", "assertValidHeaders", "Object", "entries", "values", "setHeaderEntries", "has", "init", "toLowerCase", "get", "length", "keys", "Array", "from", "getAll", "append", "clone", "op", "set", "delete", "maybeSetNormalizedName", "lcName", "copyFrom", "update", "applyUpdate", "other", "key", "concat", "base", "undefined", "push", "toDelete", "existing", "filter", "headerValues", "isArray", "map", "toString", "fn", "Error", "HttpUrlEncodingCodec", "encodeKey", "standardEncoding", "encodeValue", "decodeKey", "decodeURIComponent", "decodeValue", "paramParser", "rawParams", "codec", "params", "replace", "param", "eqIdx", "val", "list", "STANDARD_ENCODING_REGEX", "STANDARD_ENCODING_REPLACEMENTS", "v", "encodeURIComponent", "s", "t", "valueToString", "HttpParams", "encoder", "updates", "cloneFrom", "options", "fromString", "fromObject", "_RuntimeError", "res", "appendAll", "_value", "eKey", "join", "idx", "splice", "HttpContextToken", "defaultValue", "HttpContext", "token", "mightHaveBody", "method", "isArrayBuffer", "ArrayBuffer", "isBlob", "Blob", "isFormData", "FormData", "isUrlSearchParams", "URLSearchParams", "CONTENT_TYPE_HEADER", "ACCEPT_HEADER", "X_REQUEST_URL_HEADER", "TEXT_CONTENT_TYPE", "JSON_CONTENT_TYPE", "ACCEPT_HEADER_VALUE", "HttpRequest", "url", "body", "context", "reportProgress", "withCredentials", "responseType", "urlWithParams", "transferCache", "third", "fourth", "toUpperCase", "qIdx", "sep", "serializeBody", "JSON", "stringify", "detectContentTypeHeader", "type", "setHeaders", "reduce", "setParams", "HttpEventType", "HttpResponseBase", "status", "statusText", "ok", "defaultStatus", "defaultStatusText", "HttpHeaderResponse", "ResponseHeader", "HttpResponse", "Response", "HttpErrorResponse", "message", "error", "HTTP_STATUS_CODE_OK", "HTTP_STATUS_CODE_NO_CONTENT", "HttpStatusCode", "addBody", "observe", "HttpClient", "handler", "request", "first", "req", "events$", "of", "pipe", "concatMap", "handle", "res$", "event", "head", "jsonp", "callbackParam", "patch", "post", "put", "factory", "ɵfac", "Injectable", "XSSI_PREFIX$1", "getResponseUrl$1", "response", "xRequestUrl", "toLocaleLowerCase", "FETCH_BACKEND", "InjectionToken", "FetchBackend", "fetchImpl", "inject", "FetchFactory", "optional", "fetch", "args", "globalThis", "ngZone", "NgZone", "destroyRef", "DestroyRef", "destroyed", "onDestroy", "Observable", "observer", "aborter", "AbortController", "doRequest", "signal", "then", "noop", "abort", "createRequestInit", "fetchPromise", "runOutsideAngular", "silenceSuperfluousUnhandledPromiseRejection", "next", "Sent", "contentLength", "chunks", "reader", "getReader", "receivedLength", "decoder", "partialText", "reqZone", "Zone", "current", "canceled", "cancel", "done", "read", "TextDecoder", "decode", "stream", "DownloadProgress", "total", "loaded", "run", "complete", "chunksAll", "concatChunks", "contentType", "parseBody", "binContent", "text", "parse", "buffer", "credentials", "detectedType", "totalLength", "Uint8Array", "position", "chunk", "promise", "interceptorChainEndFn", "finalHandlerFn", "adaptLegacyInterceptorToChain", "chainTailFn", "interceptor", "initialRequest", "intercept", "downstreamRequest", "chainedInterceptorFn", "interceptorFn", "injector", "runInInjectionContext", "HTTP_INTERCEPTORS", "HTTP_INTERCEPTOR_FNS", "HTTP_ROOT_INTERCEPTOR_FNS", "REQUESTS_CONTRIBUTE_TO_STABILITY", "providedIn", "legacyInterceptorFnFactory", "chain", "interceptors", "reduceRight", "pendingTasks", "_PendingTasksInternal", "contributeToStability", "taskId", "add", "finalize", "remove", "fetchBackendWarningDisplayed", "HttpInterceptorHandler", "backend", "isServer", "isPlatformServer", "PLATFORM_ID", "isTestingBackend", "_Console", "warn", "_formatRuntimeError", "dedupedInterceptorFns", "Set", "nextSequencedFn", "EnvironmentInjector", "nextRequestId", "foreignDocument", "JSONP_ERR_NO_CALLBACK", "JSONP_ERR_WRONG_METHOD", "JSONP_ERR_WRONG_RESPONSE_TYPE", "JSONP_ERR_HEADERS_NOT_SUPPORTED", "JsonpCallbackContext", "jsonpCallbackContext", "window", "JsonpClientBackend", "callbackMap", "document", "resolvedPromise", "Promise", "resolve", "nextCallback", "callback", "node", "createElement", "src", "finished", "data", "cleanup", "removeEventListener", "onLoad", "onError", "addEventListener", "appendChild", "removeListeners", "script", "implementation", "createHTMLDocument", "adoptNode", "JsonpClientBackend_Factory", "__ngFactoryType__", "DOCUMENT", "Inject", "jsonpInterceptorFn", "JsonpInterceptor", "XSSI_PREFIX", "X_REQUEST_URL_REGEXP", "RegExp", "getResponseUrl", "xhr", "responseURL", "test", "getAllResponseHeaders", "getResponseHeader", "HttpXhrBackend", "xhrFactory", "source", "ɵloadImpl", "switchMap", "build", "open", "setRequestHeader", "reqBody", "headerResponse", "partialFromXhr", "responseText", "originalBody", "sentHeaders", "onDownProgress", "progressEvent", "lengthComputable", "onUpProgress", "progress", "UploadProgress", "upload", "send", "readyState", "DONE", "XhrFactory", "XSRF_ENABLED", "XSRF_DEFAULT_COOKIE_NAME", "XSRF_COOKIE_NAME", "XSRF_DEFAULT_HEADER_NAME", "XSRF_HEADER_NAME", "HttpXsrfTokenExtractor", "HttpXsrfCookieExtractor", "doc", "cookieName", "lastCookieString", "lastToken", "parseCount", "getToken", "ngServerMode", "cookieString", "cookie", "parseCookieValue", "xsrfInterceptorFn", "lcUrl", "startsWith", "headerName", "HttpXsrfInterceptor", "HttpFeatureKind", "makeHttpFeature", "kind", "providers", "ɵkind", "ɵproviders", "provideHttpClient", "features", "featureKinds", "f", "NoXsrfProtection", "CustomXsrfConfiguration", "provide", "useExisting", "useFactory", "useValue", "multi", "useClass", "feature", "makeEnvironmentProviders", "withInterceptors", "interceptorFns", "Interceptors", "LEGACY_INTERCEPTOR_FN", "withInterceptorsFromDi", "LegacyInterceptors", "withXsrfConfiguration", "withNoXsrfProtection", "withJsonpSupport", "JsonpSupport", "withRequestsMadeViaParent", "RequestsMadeViaParent", "handlerFromParent", "skipSelf", "withFetch", "Fetch", "HttpClientXsrfModule", "disable", "ngModule", "withOptions", "ɵinj", "NgModule", "HttpClientModule", "HttpClientJsonpModule", "httpResource", "jsonFn", "makeHttpResourceFn", "arrayBuffer", "blob", "text", "responseType", "httpResourceRef", "request", "options", "injector", "assertInInjectionContext", "inject", "Injector", "HttpResourceImpl", "normalizeRequest", "defaultValue", "parse", "equal", "unwrappedRequest", "undefined", "url", "headers", "HttpHeaders", "params", "HttpParams", "fromObject", "HttpRequest", "method", "body", "reportProgress", "withCredentials", "context", "transferCache", "_ResourceImpl", "client", "_headers", "linkedSignal", "source", "extRequest", "computation", "_progress", "_statusCode", "computed", "status", "ResourceStatus", "Resolved", "Error", "progress", "asReadonly", "statusCode", "constructor", "abortSignal", "sub", "onAbort", "unsubscribe", "addEventListener", "stream", "signal", "value", "resolve", "promise", "Promise", "r", "send", "set", "subscribe", "next", "event", "type", "HttpEventType", "Response", "error", "DownloadProgress", "HttpErrorResponse", "removeEventListener", "complete", "get", "HttpClient", "HTTP_TRANSFER_CACHE_ORIGIN_MAP", "InjectionToken", "ngDevMode", "BODY", "HEADERS", "STATUS", "STATUS_TEXT", "REQ_URL", "RESPONSE_TYPE", "CACHE_OPTIONS", "ALLOWED_METHODS", "transferCacheInterceptorFn", "req", "isCacheActive", "globalOptions", "requestOptions", "requestMethod", "includePostRequests", "includes", "includeRequestsWithAuthHeaders", "hasAuthHeaders", "filter", "transferState", "TransferState", "originMap", "optional", "_RuntimeError", "requestUrl", "ngServerMode", "mapRequestOriginUrl", "storeKey", "makeCacheKey", "response", "headersToInclude", "includeHeaders", "undecodedBody", "httpHeaders", "statusText", "TextEncoder", "encode", "buffer", "Blob", "appendMissingHeadersDetection", "of", "HttpResponse", "pipe", "tap", "getFilteredHeaders", "has", "sortAndConcatParams", "params", "keys", "sort", "map", "k", "getAll", "join", "makeCacheKey", "request", "mappedRequestUrl", "method", "responseType", "encodedParams", "serializedBody", "serializeBody", "URLSearchParams", "key", "hash", "generateHash", "makeStateKey", "value", "char", "Math", "imul", "charCodeAt", "toString", "withHttpTransferCache", "cacheOptions", "provide", "CACHE_OPTIONS", "useFactory", "_performanceMarkFeature", "isCacheActive", "HTTP_ROOT_INTERCEPTOR_FNS", "useValue", "transferCacheInterceptorFn", "multi", "APP_BOOTSTRAP_LISTENER", "appRef", "inject", "ApplicationRef", "cacheState", "whenStable", "then", "appendMissingHeadersDetection", "url", "headers", "headersToInclude", "warningProduced", "Set", "Proxy", "get", "target", "prop", "Reflect", "methods", "has", "headerName", "toLowerCase", "includes", "add", "truncatedUrl", "_truncateMiddle", "console", "warn", "_formatRuntimeError", "apply"]
}
